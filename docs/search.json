[
  {
    "objectID": "pages/w2.html",
    "href": "pages/w2.html",
    "title": "DBMS - Week 2",
    "section": "",
    "text": "\\(A_{1},A_{2},...,A_{n}\\) are attributes\n\\(R=(A_{1},A_{2},...,A_{n})\\) is a relational schema\n\nExample: \\(instructor(ID, name, dept_name, salary)\\)\n\nFormally, given sets \\(D_{1},D_{2},...,D_{n}\\), a relation \\(r\\) is a subset of \\[\nD_{1} \\times D_{2} \\times ... \\times D_{n}\n\\] Thus, a relation is a set of \\(n\\)-tuples \\((a_{1},a_{2},...,a_{n})\\) where each \\(a_{i} \\in D_{i}\\)\nThe current values (relation instance) of a relation are specified in a table\nExample: \\(instuctor \\equiv (String(5) \\times String \\times String \\times Number+)\\), where \\(ID \\in String(5)\\), \\(name \\in String\\), \\(dept\\_name \\in String\\), \\(salary \\in Number+\\)\n\n\n\n\n\nOrder of tuples/rows in a relation is irrelevant (tuples may be stored in an arbitrary order)\nNo two tuples in a relation are the same (i.e., no duplicate tuples)\nExample: instructor relation with unordered tuples\n\n\n\n\nID\nname\ndept_name\nsalary\n\n\n\n\n22222\nEinstein\nPhysics\n95000\n\n\n12121\nWu\nFinance\n90000\n\n\n32343\nEl Said\nHistory\n60000\n\n\n45565\nKatz\nComp. Sci.\n75000\n\n\n98345\nKim\nElec. Eng.\n80000\n\n\n76766\nCrick\nBiology\n72000\n\n\n10101\nSrinivasan\nComp. Sci.\n65000\n\n\n58583\nCalifieri\nHistory\n62000\n\n\n82821\nBrandt\nComp. Sci.\n92000\n\n\n15151\nMozart\nMusic\n40000\n\n\n33456\nGold\nPhysics\n87000\n\n\n76543\nSingh\nFinance\n80000\n\n\n\n\n\n\n\nLet \\(K \\subseteq R\\), where \\(R\\) is the set of attributes in the relation.\n\\(K\\) is a superkey of \\(R\\) if values for \\(K\\) are sufficient to identify a unique tuple of each possible relation \\(r(R)\\)\n\nExample: \\(\\{ID\\}\\) and \\(\\{ID, name\\}\\) are both superkeys of \\(instructor\\)\n\nSuperkey \\(K\\) is a candidate key if \\(K\\) is minimal\n\nExample: \\(\\{ID\\}\\) is a candidate key for \\(instructor\\)\n\nOne of the candidate keys is chosen as the primary key\n\nWhich one?\n\nA surrogate key or synthetic key in a database is a unique identifier for either an entity in the modeled world or an object in the database.\n\nThe surrogate key is not derived from application data, unlike a natural (or business) key which is derived from application data.\n\n\n\n\n\n\nStudents = Roll#, First Name, Last Name, DoB, Passport#, Aadhaar#, Department\nSuper Key: Roll#, {Roll#, DoB}\nCandidate Keys: Roll#, {First Name, Last Name}, Aadhaar#\n\nPassport# cannot be a key. Why?\nNull values are allowed for Passport# (a student may not have a passport)\n\nPrimary Key: Roll#\n\nCan we use Aadhaar# as the primary key?\nIt may suffice for unique identification. But Roll# may have additional useful information. For example: 14CS92P01\n\nRead 14CS92P01 as 14-CS-92-P-01\n14: Admission in 2014\nCS: Department = CS\n92: Category of Student\nP: Type of admission: Project\n01: Serial Number\n\n\n\n\n\n\n\nForeign key constraint: Value in one relation must appear in another\n\nReferencing relation\n\nEnrolment: Foreign keys - Roll#, Course#\n\nReferenced relation\n\nStudents, Courses\n\n\nA compound key consists of more than one attribute to uniquely identify an entity occurrence\n\nEach attribute, which makes up the key, is a simple key in its own right\n{Roll#, Course#}\n\n\n\nStudents\n\n\n\n\n\n\n\n\n\n\n\nRoll #\nFirst Name\nLast Name\nDoB\nPassport #\nAadhaar #\nDepartment\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCourses\n\n\nCourse #\nCourse Name\nCredits\nL-T-P\nDepartment\n\n\n\n\n\n\nEnrolment\n\n\nRoll #\nCourse #\nInstructor ID\n\n\n\n\n\n\n\n\nProcedural viz-a-viz Non-procedural or Declarative Paradigms - Procedural programming requires that the programmer specify the exact steps to be taken to solve a problem. - That is, how to get the output for the range of required inputs - The programmer must know an appropriate algorithm\n\nDeclarative programming requires a more descriptive approach.\n\nThe programmer must know what relationships hold between various entities\n\nExample - Square root of \\(n\\)\n\nProcedural\n\nGuess \\(x_0\\) (close to root of \\(n\\))\n\\(i \\leftarrow 0\\)\n\\(x_{i+1} \\leftarrow \\frac{(x_i + \\frac{n}{x_i})}{2}\\)\nRepeat Step 2 if \\(|x_{i+1} - x_i| &gt; \\delta\\)\n\nDeclarative\n\nRoot of \\(n\\) is \\(m\\) such that \\(m^2 = n\\)",
    "crumbs": [
      "DBMS",
      "Week 2"
    ]
  },
  {
    "objectID": "pages/w2.html#lecture-2.1-introduction-to-relational-model1",
    "href": "pages/w2.html#lecture-2.1-introduction-to-relational-model1",
    "title": "DBMS - Week 2",
    "section": "",
    "text": "\\(A_{1},A_{2},...,A_{n}\\) are attributes\n\\(R=(A_{1},A_{2},...,A_{n})\\) is a relational schema\n\nExample: \\(instructor(ID, name, dept_name, salary)\\)\n\nFormally, given sets \\(D_{1},D_{2},...,D_{n}\\), a relation \\(r\\) is a subset of \\[\nD_{1} \\times D_{2} \\times ... \\times D_{n}\n\\] Thus, a relation is a set of \\(n\\)-tuples \\((a_{1},a_{2},...,a_{n})\\) where each \\(a_{i} \\in D_{i}\\)\nThe current values (relation instance) of a relation are specified in a table\nExample: \\(instuctor \\equiv (String(5) \\times String \\times String \\times Number+)\\), where \\(ID \\in String(5)\\), \\(name \\in String\\), \\(dept\\_name \\in String\\), \\(salary \\in Number+\\)\n\n\n\n\n\nOrder of tuples/rows in a relation is irrelevant (tuples may be stored in an arbitrary order)\nNo two tuples in a relation are the same (i.e., no duplicate tuples)\nExample: instructor relation with unordered tuples\n\n\n\n\nID\nname\ndept_name\nsalary\n\n\n\n\n22222\nEinstein\nPhysics\n95000\n\n\n12121\nWu\nFinance\n90000\n\n\n32343\nEl Said\nHistory\n60000\n\n\n45565\nKatz\nComp. Sci.\n75000\n\n\n98345\nKim\nElec. Eng.\n80000\n\n\n76766\nCrick\nBiology\n72000\n\n\n10101\nSrinivasan\nComp. Sci.\n65000\n\n\n58583\nCalifieri\nHistory\n62000\n\n\n82821\nBrandt\nComp. Sci.\n92000\n\n\n15151\nMozart\nMusic\n40000\n\n\n33456\nGold\nPhysics\n87000\n\n\n76543\nSingh\nFinance\n80000\n\n\n\n\n\n\n\nLet \\(K \\subseteq R\\), where \\(R\\) is the set of attributes in the relation.\n\\(K\\) is a superkey of \\(R\\) if values for \\(K\\) are sufficient to identify a unique tuple of each possible relation \\(r(R)\\)\n\nExample: \\(\\{ID\\}\\) and \\(\\{ID, name\\}\\) are both superkeys of \\(instructor\\)\n\nSuperkey \\(K\\) is a candidate key if \\(K\\) is minimal\n\nExample: \\(\\{ID\\}\\) is a candidate key for \\(instructor\\)\n\nOne of the candidate keys is chosen as the primary key\n\nWhich one?\n\nA surrogate key or synthetic key in a database is a unique identifier for either an entity in the modeled world or an object in the database.\n\nThe surrogate key is not derived from application data, unlike a natural (or business) key which is derived from application data.\n\n\n\n\n\n\nStudents = Roll#, First Name, Last Name, DoB, Passport#, Aadhaar#, Department\nSuper Key: Roll#, {Roll#, DoB}\nCandidate Keys: Roll#, {First Name, Last Name}, Aadhaar#\n\nPassport# cannot be a key. Why?\nNull values are allowed for Passport# (a student may not have a passport)\n\nPrimary Key: Roll#\n\nCan we use Aadhaar# as the primary key?\nIt may suffice for unique identification. But Roll# may have additional useful information. For example: 14CS92P01\n\nRead 14CS92P01 as 14-CS-92-P-01\n14: Admission in 2014\nCS: Department = CS\n92: Category of Student\nP: Type of admission: Project\n01: Serial Number\n\n\n\n\n\n\n\nForeign key constraint: Value in one relation must appear in another\n\nReferencing relation\n\nEnrolment: Foreign keys - Roll#, Course#\n\nReferenced relation\n\nStudents, Courses\n\n\nA compound key consists of more than one attribute to uniquely identify an entity occurrence\n\nEach attribute, which makes up the key, is a simple key in its own right\n{Roll#, Course#}\n\n\n\nStudents\n\n\n\n\n\n\n\n\n\n\n\nRoll #\nFirst Name\nLast Name\nDoB\nPassport #\nAadhaar #\nDepartment\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCourses\n\n\nCourse #\nCourse Name\nCredits\nL-T-P\nDepartment\n\n\n\n\n\n\nEnrolment\n\n\nRoll #\nCourse #\nInstructor ID\n\n\n\n\n\n\n\n\nProcedural viz-a-viz Non-procedural or Declarative Paradigms - Procedural programming requires that the programmer specify the exact steps to be taken to solve a problem. - That is, how to get the output for the range of required inputs - The programmer must know an appropriate algorithm\n\nDeclarative programming requires a more descriptive approach.\n\nThe programmer must know what relationships hold between various entities\n\nExample - Square root of \\(n\\)\n\nProcedural\n\nGuess \\(x_0\\) (close to root of \\(n\\))\n\\(i \\leftarrow 0\\)\n\\(x_{i+1} \\leftarrow \\frac{(x_i + \\frac{n}{x_i})}{2}\\)\nRepeat Step 2 if \\(|x_{i+1} - x_i| &gt; \\delta\\)\n\nDeclarative\n\nRoot of \\(n\\) is \\(m\\) such that \\(m^2 = n\\)",
    "crumbs": [
      "DBMS",
      "Week 2"
    ]
  },
  {
    "objectID": "pages/w2.html#lecture-2.2-introduction-to-relational-model2",
    "href": "pages/w2.html#lecture-2.2-introduction-to-relational-model2",
    "title": "DBMS - Week 2",
    "section": "Lecture 2.2: Introduction to Relational Model/2",
    "text": "Lecture 2.2: Introduction to Relational Model/2\n\nBasic Properties of Relations\n\nA relation is a set. Hence,\nOrdering of tuples is immaterial\nAll rows/tuples must be distinct\n\n\n\nSelect Operation - selection of rows (tuples)\nRelation \\(r\\)\n\n\n\n\\(A\\)\n\\(B\\)\n\\(C\\)\n\\(D\\)\n\n\n\n\n\\(\\alpha\\)\n\\(\\alpha\\)\n\\(1\\)\n\\(7\\)\n\n\n\\(\\alpha\\)\n\\(\\beta\\)\n\\(5\\)\n\\(7\\)\n\n\n\\(\\beta\\)\n\\(\\beta\\)\n\\(12\\)\n\\(3\\)\n\n\n\\(\\beta\\)\n\\(\\beta\\)\n\\(23\\)\n\\(10\\)\n\n\n\n\\(\\sigma_{A=B \\wedge D &gt; 5}(r)\\)\n\n\n\n\\(A\\)\n\\(B\\)\n\\(C\\)\n\\(D\\)\n\n\n\n\n\\(\\alpha\\)\n\\(\\alpha\\)\n\\(1\\)\n\\(7\\)\n\n\n\\(\\beta\\)\n\\(\\beta\\)\n\\(23\\)\n\\(10\\)\n\n\n\n\n\nProject Operation - selection of columns (attributes)\nRelation \\(r\\)\n\n\n\n\\(A\\)\n\\(B\\)\n\\(C\\)\n\n\n\n\n\\(\\alpha\\)\n\\(10\\)\n\\(1\\)\n\n\n\\(\\alpha\\)\n\\(20\\)\n\\(1\\)\n\n\n\\(\\beta\\)\n\\(30\\)\n\\(1\\)\n\n\n\\(\\beta\\)\n\\(40\\)\n\\(2\\)\n\n\n\n\\(\\pi_{A,C}(r)\\)\n\n\n\n\\(A\\)\n\\(C\\)\n\n\n\n\n\\(\\alpha\\)\n\\(1\\)\n\n\n\\(\\beta\\)\n\\(1\\)\n\n\n\\(\\beta\\)\n\\(2\\)\n\n\n\n\n\nUnion of two relations\nRelation \\(r\\)\n\n\n\n\\(A\\)\n\\(B\\)\n\n\n\n\n\\(\\alpha\\)\n\\(1\\)\n\n\n\\(\\alpha\\)\n\\(2\\)\n\n\n\\(\\beta\\)\n\\(1\\)\n\n\n\nRelation \\(s\\)\n\n\n\n\\(A\\)\n\\(B\\)\n\n\n\n\n\\(\\alpha\\)\n\\(2\\)\n\n\n\\(\\beta\\)\n\\(3\\)\n\n\n\n\\(r \\cup s\\)\n\n\n\n\\(A\\)\n\\(B\\)\n\n\n\n\n\\(\\alpha\\)\n\\(1\\)\n\n\n\\(\\alpha\\)\n\\(2\\)\n\n\n\\(\\beta\\)\n\\(1\\)\n\n\n\\(\\beta\\)\n\\(3\\)\n\n\n\n\n\nSet Difference of two relations\nRelation \\(r\\)\n\n\n\n\\(A\\)\n\\(B\\)\n\n\n\n\n\\(\\alpha\\)\n\\(1\\)\n\n\n\\(\\alpha\\)\n\\(2\\)\n\n\n\\(\\beta\\)\n\\(1\\)\n\n\n\nRelation \\(s\\)\n\n\n\n\\(A\\)\n\\(B\\)\n\n\n\n\n\\(\\alpha\\)\n\\(2\\)\n\n\n\\(\\beta\\)\n\\(3\\)\n\n\n\n\\(r - s\\)\n\n\n\n\\(A\\)\n\\(B\\)\n\n\n\n\n\\(\\alpha\\)\n\\(1\\)\n\n\n\\(\\beta\\)\n\\(1\\)\n\n\n\n\n\nSet Intersection of two relations\nRelation \\(r\\)\n\n\n\n\\(A\\)\n\\(B\\)\n\n\n\n\n\\(\\alpha\\)\n\\(1\\)\n\n\n\\(\\alpha\\)\n\\(2\\)\n\n\n\\(\\beta\\)\n\\(1\\)\n\n\n\nRelation \\(s\\)\n\n\n\n\\(A\\)\n\\(B\\)\n\n\n\n\n\\(\\alpha\\)\n\\(2\\)\n\n\n\\(\\beta\\)\n\\(3\\)\n\n\n\n\\(r \\cap s\\)\n\n\n\n\\(A\\)\n\\(B\\)\n\n\n\n\n\\(\\alpha\\)\n\\(2\\)\n\n\n\nNote: \\(r \\cap s = r-(r-s)\\)\n\n\nJoining two relations - Cartesian Product\nRelation \\(r\\)\n\n\n\n\\(A\\)\n\\(B\\)\n\n\n\n\n\\(\\alpha\\)\n\\(1\\)\n\n\n\\(\\beta\\)\n\\(2\\)\n\n\n\nRelation \\(s\\)\n\n\n\n\\(C\\)\n\\(D\\)\n\\(E\\)\n\n\n\n\n\\(\\alpha\\)\n\\(10\\)\n\\(\\text{a}\\)\n\n\n\\(\\beta\\)\n\\(10\\)\n\\(\\text{a}\\)\n\n\n\\(\\beta\\)\n\\(20\\)\n\\(\\text{b}\\)\n\n\n\\(\\gamma\\)\n\\(10\\)\n\\(\\text{b}\\)\n\n\n\n\\(r \\times s\\)\n\n\n\n\\(A\\)\n\\(B\\)\n\\(C\\)\n\\(D\\)\n\\(E\\)\n\n\n\n\n\\(\\alpha\\)\n\\(1\\)\n\\(\\alpha\\)\n\\(10\\)\n\\(\\text{a}\\)\n\n\n\\(\\alpha\\)\n\\(1\\)\n\\(\\beta\\)\n\\(10\\)\n\\(\\text{a}\\)\n\n\n\\(\\alpha\\)\n\\(1\\)\n\\(\\beta\\)\n\\(20\\)\n\\(\\text{b}\\)\n\n\n\\(\\alpha\\)\n\\(1\\)\n\\(\\gamma\\)\n\\(10\\)\n\\(\\text{b}\\)\n\n\n\\(\\beta\\)\n\\(2\\)\n\\(\\alpha\\)\n\\(10\\)\n\\(\\text{a}\\)\n\n\n\\(\\beta\\)\n\\(2\\)\n\\(\\beta\\)\n\\(10\\)\n\\(\\text{a}\\)\n\n\n\\(\\beta\\)\n\\(2\\)\n\\(\\beta\\)\n\\(20\\)\n\\(\\text{b}\\)\n\n\n\\(\\beta\\)\n\\(2\\)\n\\(\\gamma\\)\n\\(10\\)\n\\(\\text{b}\\)\n\n\n\nCartesian Product: Naming issue\nRelation \\(r\\)\n\n\n\n\\(A\\)\n\\(B\\)\n\n\n\n\n\\(\\alpha\\)\n\\(1\\)\n\n\n\\(\\beta\\)\n\\(2\\)\n\n\n\nRelation \\(s\\)\n\n\n\n\\(B\\)\n\\(D\\)\n\\(E\\)\n\n\n\n\n\\(\\alpha\\)\n\\(10\\)\n\\(\\text{a}\\)\n\n\n\\(\\beta\\)\n\\(10\\)\n\\(\\text{a}\\)\n\n\n\\(\\beta\\)\n\\(20\\)\n\\(\\text{b}\\)\n\n\n\\(\\gamma\\)\n\\(10\\)\n\\(\\text{b}\\)\n\n\n\n\\(r \\times s\\)\n\n\n\n\\(A\\)\n\\(r.B\\)\n\\(s.B\\)\n\\(D\\)\n\\(E\\)\n\n\n\n\n\\(\\alpha\\)\n\\(1\\)\n\\(\\alpha\\)\n\\(10\\)\n\\(\\text{a}\\)\n\n\n\\(\\alpha\\)\n\\(1\\)\n\\(\\beta\\)\n\\(10\\)\n\\(\\text{a}\\)\n\n\n\\(\\alpha\\)\n\\(1\\)\n\\(\\beta\\)\n\\(20\\)\n\\(\\text{b}\\)\n\n\n\\(\\alpha\\)\n\\(1\\)\n\\(\\gamma\\)\n\\(10\\)\n\\(\\text{b}\\)\n\n\n\\(\\beta\\)\n\\(2\\)\n\\(\\alpha\\)\n\\(10\\)\n\\(\\text{a}\\)\n\n\n\\(\\beta\\)\n\\(2\\)\n\\(\\beta\\)\n\\(10\\)\n\\(\\text{a}\\)\n\n\n\\(\\beta\\)\n\\(2\\)\n\\(\\beta\\)\n\\(20\\)\n\\(\\text{b}\\)\n\n\n\\(\\beta\\)\n\\(2\\)\n\\(\\gamma\\)\n\\(10\\)\n\\(\\text{b}\\)\n\n\n\n\n\nRenaming a table\nRenaming a table allows us to refer to a relation, say \\(E\\), by more than one name. The operator \\[\n\\rho_{X}(E) \\] renames relation \\(E\\) as \\(X\\).\nRelation \\(r\\)\n\n\n\n\\(A\\)\n\\(B\\)\n\n\n\n\n\\(\\alpha\\)\n\\(1\\)\n\n\n\\(\\beta\\)\n\\(2\\)\n\n\n\n\\(r \\times \\rho_{s}(r)\\)\n\n\n\n\\(r.A\\)\n\\(r.B\\)\n\\(s.A\\)\n\\(s.B\\)\n\n\n\n\n\\(\\alpha\\)\n\\(1\\)\n\\(\\alpha\\)\n\\(1\\)\n\n\n\\(\\alpha\\)\n\\(1\\)\n\\(\\beta\\)\n\\(2\\)\n\n\n\\(\\beta\\)\n\\(2\\)\n\\(\\alpha\\)\n\\(1\\)\n\n\n\\(\\beta\\)\n\\(2\\)\n\\(\\beta\\)\n\\(2\\)\n\n\n\n\n\nComposition of Operations\nCan build expressions using multiple operations\nExample: \\(\\sigma_{A=C}(r \\times s)\\)\n\\(r \\times s\\)\n\n\n\n\\(A\\)\n\\(B\\)\n\\(C\\)\n\\(D\\)\n\\(E\\)\n\n\n\n\n\\(\\alpha\\)\n\\(1\\)\n\\(\\alpha\\)\n\\(10\\)\n\\(\\text{a}\\)\n\n\n\\(\\alpha\\)\n\\(1\\)\n\\(\\beta\\)\n\\(10\\)\n\\(\\text{a}\\)\n\n\n\\(\\alpha\\)\n\\(1\\)\n\\(\\beta\\)\n\\(20\\)\n\\(\\text{b}\\)\n\n\n\\(\\alpha\\)\n\\(1\\)\n\\(\\gamma\\)\n\\(10\\)\n\\(\\text{b}\\)\n\n\n\\(\\beta\\)\n\\(2\\)\n\\(\\alpha\\)\n\\(10\\)\n\\(\\text{a}\\)\n\n\n\\(\\beta\\)\n\\(2\\)\n\\(\\beta\\)\n\\(10\\)\n\\(\\text{a}\\)\n\n\n\\(\\beta\\)\n\\(2\\)\n\\(\\beta\\)\n\\(20\\)\n\\(\\text{b}\\)\n\n\n\\(\\beta\\)\n\\(2\\)\n\\(\\gamma\\)\n\\(10\\)\n\\(\\text{b}\\)\n\n\n\n\\(\\sigma_{A=C}(r \\times s)\\)\n\n\n\n\\(A\\)\n\\(B\\)\n\\(C\\)\n\\(D\\)\n\\(E\\)\n\n\n\n\n\\(\\alpha\\)\n\\(1\\)\n\\(\\alpha\\)\n\\(10\\)\n\\(\\text{a}\\)\n\n\n\\(\\beta\\)\n\\(2\\)\n\\(\\beta\\)\n\\(10\\)\n\\(\\text{a}\\)\n\n\n\\(\\beta\\)\n\\(2\\)\n\\(\\beta\\)\n\\(20\\)\n\\(\\text{b}\\)\n\n\n\n\n\nJoining two relations - Natural Join\n\nLet \\(r\\) and \\(s\\) be relations on schemas \\(R\\) and \\(S\\) respectively. Then, the “natural join” of relations \\(R\\) and \\(S\\) is a relation on schema \\(R \\cup S\\) obtained as follows:\nConsider each pair of tuples \\(t_{r}\\) from \\(r\\) and \\(t_{s}\\) from \\(s\\)\nIf \\(t_{r}\\) and \\(t_{s}\\) have the same value on each of the attributes in \\(R \\cap S\\), add a tuple \\(t\\) to the result, where\n\n\\(t\\) has the same value as \\(t_{r}\\) on \\(r\\)\n\\(t\\) has the same value as \\(t_{s}\\) on \\(s\\)\n\n\n\n\nNatural Join Example\nRelation \\(r\\)\n\n\n\n\\(A\\)\n\\(B\\)\n\\(C\\)\n\\(D\\)\n\n\n\n\n\\(\\alpha\\)\n\\(1\\)\n\\(\\alpha\\)\n\\(\\text{a}\\)\n\n\n\\(\\beta\\)\n\\(2\\)\n\\(\\gamma\\)\n\\(\\text{a}\\)\n\n\n\\(\\gamma\\)\n\\(4\\)\n\\(\\beta\\)\n\\(\\text{b}\\)\n\n\n\\(\\alpha\\)\n\\(1\\)\n\\(\\gamma\\)\n\\(\\text{a}\\)\n\n\n\\(\\delta\\)\n\\(2\\)\n\\(\\beta\\)\n\\(\\text{b}\\)\n\n\n\nRelation \\(s\\)\n\n\n\n\\(B\\)\n\\(D\\)\n\\(E\\)\n\n\n\n\n\\(1\\)\n\\(\\text{a}\\)\n\\(\\alpha\\)\n\n\n\\(3\\)\n\\(\\text{a}\\)\n\\(\\beta\\)\n\n\n\\(1\\)\n\\(\\text{a}\\)\n\\(\\gamma\\)\n\n\n\\(2\\)\n\\(\\text{b}\\)\n\\(\\delta\\)\n\n\n\\(3\\)\n\\(\\text{b}\\)\n\\(\\epsilon\\)\n\n\n\nNatural join - \\(r \\bowtie s\\)\n\n\\(\\pi_{A,r.B,C,r.D,E}(\\sigma_{r.B=s.B \\wedge r.D=s.D}(r \\times s))\\)\n\n\n\\(A\\)\n\\(B\\)\n\\(C\\)\n\\(D\\)\n\\(E\\)\n\n\n\n\n\\(\\alpha\\)\n\\(1\\)\n\\(\\text{a}\\)\n\\(\\text{a}\\)\n\\(\\alpha\\)\n\n\n\\(\\alpha\\)\n\\(1\\)\n\\(\\alpha\\)\n\\(\\text{a}\\)\n\\(\\gamma\\)\n\n\n\\(\\alpha\\)\n\\(1\\)\n\\(\\gamma\\)\n\\(\\text{a}\\)\n\\(\\alpha\\)\n\n\n\\(\\alpha\\)\n\\(1\\)\n\\(\\gamma\\)\n\\(\\text{a}\\)\n\\(\\gamma\\)\n\n\n\\(\\delta\\)\n\\(2\\)\n\\(\\beta\\)\n\\(\\text{b}\\)\n\\(\\delta\\)\n\n\n\n\n\nAggregate Operators\nCan compute: - SUM - AVG - MAX - MIN\n\nRelational operators always return a relation.\nAggregate operators return a single value.",
    "crumbs": [
      "DBMS",
      "Week 2"
    ]
  },
  {
    "objectID": "pages/w2.html#lecture-2.3-introduction-to-sql1",
    "href": "pages/w2.html#lecture-2.3-introduction-to-sql1",
    "title": "DBMS - Week 2",
    "section": "Lecture 2.3: Introduction to SQL/1",
    "text": "Lecture 2.3: Introduction to SQL/1\n\nHistory of Query Language\n\nIBM developed Structured English Query Language (SEQUEL) as a part of System R project. Renamed Structured Query Language (SQL: pronounced as “sequel”)\nANSI and ISO standards for SQL:\n\n\n\n\n\n\n\n\nSQL-86\nFirst formalized by ANSI\n\n\nSQL-89\n+ Integrity constraints\n\n\nSQL-92\nMajor revision (ISO/IEC 9075 standard), De-facto Industry Standard\n\n\nSQL:1999\n+ Regular Expression Matching, Recursive Queries, Triggers, Support for Procedural and Control Flow Statements, Nonscalar types (Arrays), and Some OO features (structured types), Embedding SQL in Java (SQL/OLB), and Embedding Java in SQL (SQL/JRT)\n\n\nSQL:2003\n+ XML features (SQL/XML), Window Functions, Standardized Sequences, and Columns with Auto-generated Values (identity columns)\n\n\nSQL:2006\n+ Ways of importing and storing XML data in an SQL database, manipulating it within the database, and publishing both XML and conventional SQL-data in XML form\n\n\nSQL:2008\nLegalizes ORDER BY outside Cursor Definitions\n+ INSTEAD OF Triggers, TRUNCATE Statement, and FETCH Clause\n\n\nSQL:2011\n+ Temporal Data (PERIOD FOR)\nEnhancements to Window Functions, and Enhancements to FETCH Clause\n\n\nSQL:2016\n+ Row Pattern Matching, Polymorphic Table Functions, and JSON\n\n\nSQL:2019\n+ Multi-Dimensional Arrays (MDarray type and operators)\n\n\n\n\n\nHistory of Query Language (2): Compliance\n\nSQL is the de-facto standard today for relational or structured data systems\nCommercial systems as well as open systems may be fully or partially compliant to one or more standards from SQL-92 onwards\nNot all examples here may work on your particular system. Check your system’s SQL documentation\n\n\n\nHistory of Query Language (3): Alternatives\n\nThere aren’t any alternatives to SQL for speaking to a relational database (that is, SQL as a protocol), but there are many alternatives to writing SQL in the applications\nThese alternatives have been implemented in the form of frontends for working with relational databases. Some examples of a frontend include (for a section of languages):\n\nSchemeQL and CLSQL, which are probably the most flexible, owing to their Lisp heritage, but they also look a lot more like SQL than other frontends\nLINQ (in .NET)\nScalaQL and ScalaQuery (in Scala)\nSqlStatement, ActiveRecord and many others in Ruby\nHaskellDB\n…the list goes on for many other languages\n\n\n\n\nHistory of Query Language (4): Derivatives\n\nThere are several query languages that are derived from or inspired by SQL. Of these, the most popular and effective is SPARQL.\n\nSPARQL (pronounced “sparkle”, a recursive acronym for SPARQL Protocol and RDF Query Language) is an RDF query language\n\nA semantic query language for databases - able to retrieve and manipulate data stored in Resource Description Framework (RDF) format.\nIt has been standardized by the W3C as key technology of the Semantic Web\nVersions:\n\nSPARQL 1.0 (January 2008)\nSPARQL 1.1 (March 2013)\n\nUsed as the query language for several NoSQL systems - particularly the graph databases that use RDF as storage format\n\n\n\n\n\nData Definition Language (DDL)\nThe SQL data definition language (DDL) allwos the specification of information about relations, including: - The Schema for each Relation - The Domain of values associated with each Attribute - Integrity Constraints - Also other information such as: - The set of Indices to be maintained for each relation - Security and Authorization information for each relation - The Physical Storage Structure for each relation on disk\n\n\nDomain Types in SQL\n\nchar(n): Fixed-length character string, with user-specified length \\(n\\)\nvarchar(n): Variable-length character strings, with user-specified maximum length \\(n\\)\nint: Integer (a finite subset of the integers that is machine-dependent)\nsmallint(n): Small integer (a machine-dependent subset of the integer domain type)\nnumeric(p,d): Fixed-point number, with user-specified precision of \\(p\\) digits, with \\(d\\) digits to the right of the decimal point. (Example: numeric(3,1), allows 44.5 to be stored exactly but not 444.5 or 0.32)\nreal, double precision: Floating-point and double-precision floating-point numbers with machine-dependent precision\nfloat(n): Floating-point number, with user-specified precision of at least \\(n\\) bits\n\n\n\nCreate Table Construct\n\nAn SQL relation is defined using the create table command:\ncreate table \\(r\\) ( \\[ (A_{1}D_{1}, A_{2}D_{2}, ..., A_{n}D_{n}), \\] \\[ (\\text{integrity-constraint}_1), \\] \\[...\\] \\[ (\\text{integrity-constraint}_k)); \\]\n\n\\(r\\) is the name of the relation\neach \\(A_i\\) is an attribute name in the schema of relation \\(r\\)\n\\(D_i\\) is the data type of values in the domain of attribute \\(A_i\\)\n\n\n\n\nBased on a question from Practice Assignment 2\nGiven the schema:\n\\[\n\\text{studentInfo}(\\text{enrollment\\_num}, \\text{class}, \\text{section}, \\text{roll}, \\text{name})\n\\]\nand the candidate keys:\n\n\\(\\{\\text{enrollment\\_num}\\}\\)\n\\(\\{\\text{class}, \\text{section}, \\text{roll}\\}\\)\n\n\n\nSuperkeys involving \\(\\{\\text{enrollment\\_num}\\}\\):\nFor the candidate key \\(\\{\\text{enrollment\\_num}\\}\\), we can form a superkey by combining it with any subset of the remaining attributes \\(\\{\\text{class}, \\text{section}, \\text{roll}, \\text{name}\\}\\). The number of such subsets is \\(2^4 = 16\\), which includes the empty set.\n\n\nSuperkeys involving \\(\\{\\text{class}, \\text{section}, \\text{roll}\\}\\):\nFor the candidate key \\(\\{\\text{class}, \\text{section}, \\text{roll}\\}\\), we can form a superkey by combining it with any subset of the remaining attributes \\(\\{\\text{enrollment\\_num}, \\text{name}\\}\\). The number of such subsets is \\(2^2 = 4\\), which includes the empty set.\nHowever, we must ensure we do not double count the combination of both candidate keys. Specifically, the combination \\(\\{\\text{enrollment\\_num}, \\text{class}, \\text{section}, \\text{roll}\\}\\) is a superkey common to both sets.\n\n\nCorrect Count of Superkeys:\n\nSuperkeys involving \\(\\{\\text{enrollment\\_num}\\}\\):\n\n\\(16\\) superkeys (including \\(\\{\\text{enrollment\\_num}\\}\\) itself).\n\nSuperkeys involving \\(\\{\\text{class}, \\text{section}, \\text{roll}\\}\\):\n\n\\(4\\) superkeys (including \\(\\{\\text{class}, \\text{section}, \\text{roll}\\}\\) itself).\n\n\nTotaling these gives us \\(16 + 4 = 20\\) superkeys.\nHowever, we must subtract 2 for the overlap between the two candidate keys:\n\\[\n20 - 2 = 18\n\\]\nThus, the maximum number of possible superkeys of studentInfo is 18.",
    "crumbs": [
      "DBMS",
      "Week 2"
    ]
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "maybe/about.html",
    "href": "maybe/about.html",
    "title": "About",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "maybe/w3.html#select-distinct",
    "href": "maybe/w3.html#select-distinct",
    "title": "DBMS - Week 3",
    "section": "Select distinct",
    "text": "Select distinct\n\nFrom the classroom relation, find the names of buildings in which every individual classroom has capacity less than 100 (removing the duplicates).\n\n\n\n * sqlite:///univdb-sqlite.db\nDone.\n\n\n\n\n\nbuilding\nroom_number\ncapacity\n\n\n\n\nPackard\n101\n500\n\n\nPainter\n514\n10\n\n\nTaylor\n3128\n70\n\n\nWatson\n100\n30\n\n\nWatson\n120\n50\n\n\n\n\n\n\n\n('Packard', '101', 500)\n('Painter', '514', 10)\n('Taylor', '3128', 70)\n('Watson', '100', 30)\n('Watson', '120', 50)\n\n\nQuery:\n\n\n * sqlite:///univdb-sqlite.db\nDone.\n\n\n\n\n\nbuilding\n\n\n\n\nPainter\n\n\nTaylor\n\n\nWatson\n\n\n\n\n\n\n\n * sqlite:///univdb-sqlite.db\nDone.\n\n\n\n\n\n\n\nbuilding\n\n\n\n\nPainter\n\n\nTaylor\n\n\nWatson\n\n\n\n\n\n\n\n('Painter',)\n('Taylor',)\n('Watson',)"
  },
  {
    "objectID": "maybe/w3.html#select-all",
    "href": "maybe/w3.html#select-all",
    "title": "DBMS - Week 3",
    "section": "Select all",
    "text": "Select all\n\nFrom the classroom relation, find the names of buildings in which every individual classroom has a capacity of less than 100 (without removing the duplicates).\n\n\n\n * sqlite:///univdb-sqlite.db\nDone.\n\n\n\n\n\nbuilding\nroom_number\ncapacity\n\n\n\n\nPackard\n101\n500\n\n\nPainter\n514\n10\n\n\nTaylor\n3128\n70\n\n\nWatson\n100\n30\n\n\nWatson\n120\n50\n\n\n\n\n\nQuery:\n\n\n * sqlite:///univdb-sqlite.db\nDone.\n\n\n\n\n\nbuilding\n\n\n\n\nPainter\n\n\nTaylor\n\n\nWatson\n\n\nWatson\n\n\n\n\n\n\nNote that duplicate retention is the default and hence it is a common practice to skip all immediately after select."
  },
  {
    "objectID": "maybe/w3.html#cartesian-product",
    "href": "maybe/w3.html#cartesian-product",
    "title": "DBMS - Week 3",
    "section": "Cartesian product",
    "text": "Cartesian product\n\n\n * sqlite:///univdb-sqlite.db\nDone.\n\n\n\n\n\ndept_name\nbuilding\nbudget\n\n\n\n\nBiology\nWatson\n90000\n\n\nComp. Sci.\nTaylor\n100000\n\n\nElec. Eng.\nTaylor\n85000\n\n\nFinance\nPainter\n120000\n\n\nHistory\nPainter\n50000\n\n\nMusic\nPackard\n80000\n\n\nPhysics\nWatson\n70000\n\n\n\n\n\n\n\n * sqlite:///univdb-sqlite.db\nDone.\n\n\n\n\n\nID\nname\ndept_name\ntot_cred\n\n\n\n\n00128\nZhang\nComp. Sci.\n102\n\n\n12345\nShankar\nComp. Sci.\n32\n\n\n19991\nBrandt\nHistory\n80\n\n\n23121\nChavez\nFinance\n110\n\n\n44553\nPeltier\nPhysics\n56\n\n\n45678\nLevy\nPhysics\n46\n\n\n54321\nWilliams\nComp. Sci.\n54\n\n\n55739\nSanchez\nMusic\n38\n\n\n70557\nSnow\nPhysics\n0\n\n\n76543\nBrown\nComp. Sci.\n58\n\n\n76653\nAoi\nElec. Eng.\n60\n\n\n98765\nBourikas\nElec. Eng.\n98\n\n\n98988\nTanaka\nBiology\n120\n\n\n\n\n\n\nFind the list of all students of departments which have a budget &lt; $0.1million\n\n\n\n * sqlite:///univdb-sqlite.db\nDone.\n\n\n\n\n\nname\nbudget\n\n\n\n\nBrandt\n50000\n\n\nPeltier\n70000\n\n\nLevy\n70000\n\n\nSanchez\n80000\n\n\nSnow\n70000\n\n\nAoi\n85000\n\n\nBourikas\n85000\n\n\nTanaka\n90000\n\n\n\n\n\n\nThe above query first generates every possible student-department pair, which is the Cartesian product of the student and department relations. Then, it filters out all the rows with student.dept_name = department.dept_name and department.budget &lt; 100000.\nThe common attribute dept_name in the resulting table is renamed using the relation name - student.dept_name and department.dept_name."
  },
  {
    "objectID": "maybe/w3.html#rename-as-operation",
    "href": "maybe/w3.html#rename-as-operation",
    "title": "DBMS - Week 3",
    "section": "Rename AS Operation",
    "text": "Rename AS Operation\n\nThe same query above can be framed by renaming the tables as follows:\n\n\n\n * sqlite:///univdb-sqlite.db\nDone.\n\n\n\n\n\nstudentname\ndeptbudget\n\n\n\n\nBrandt\n50000\n\n\nPeltier\n70000\n\n\nLevy\n70000\n\n\nSanchez\n80000\n\n\nSnow\n70000\n\n\nAoi\n85000\n\n\nBourikas\n85000\n\n\nTanaka\n90000\n\n\n\n\n\n\nThe above query renames the relations student and department as S and D respectively\nIt also displays the attribute name as StudentName and budget as DeptBudget\nNote that the budget attribute does not have any prefix because it occurs only in the department relation."
  },
  {
    "objectID": "maybe/w3.html#where-and-and-or",
    "href": "maybe/w3.html#where-and-and-or",
    "title": "DBMS - Week 3",
    "section": "Where: AND and OR",
    "text": "Where: AND and OR\n\nFrom the instructor and department relations, find out the names of all instructors whose department is Finance or whose department is in any of the following buildings: Watson, Taylor.\n\n\n\n * sqlite:///univdb-sqlite.db\nDone.\n\n\n\n\n\nID\nname\ndept_name\nsalary\n\n\n\n\n10101\nSrinivasan\nComp. Sci.\n65000\n\n\n12121\nWu\nFinance\n90000\n\n\n15151\nMozart\nMusic\n40000\n\n\n22222\nEinstein\nPhysics\n95000\n\n\n32343\nEl Said\nHistory\n60000\n\n\n33456\nGold\nPhysics\n87000\n\n\n45565\nKatz\nComp. Sci.\n75000\n\n\n58583\nCalifieri\nHistory\n62000\n\n\n76543\nSingh\nFinance\n80000\n\n\n76766\nCrick\nBiology\n72000\n\n\n83821\nBrandt\nComp. Sci.\n92000\n\n\n98345\nKim\nElec. Eng.\n80000\n\n\n\n\n\n\n\n * sqlite:///univdb-sqlite.db\nDone.\n\n\n\n\n\ndept_name\nbuilding\nbudget\n\n\n\n\nBiology\nWatson\n90000\n\n\nComp. Sci.\nTaylor\n100000\n\n\nElec. Eng.\nTaylor\n85000\n\n\nFinance\nPainter\n120000\n\n\nHistory\nPainter\n50000\n\n\nMusic\nPackard\n80000\n\n\nPhysics\nWatson\n70000\n\n\n\n\n\nQuery:\n\n\n * sqlite:///univdb-sqlite.db\nDone.\n\n\n\n\n\nname\n\n\n\n\nSrinivasan\n\n\nWu\n\n\nEinstein\n\n\nGold\n\n\nKatz\n\n\nSingh\n\n\nCrick\n\n\nBrandt\n\n\nKim"
  },
  {
    "objectID": "maybe/w3.html#string-operations",
    "href": "maybe/w3.html#string-operations",
    "title": "DBMS - Week 3",
    "section": "String Operations",
    "text": "String Operations\n\n\n * sqlite:///univdb-sqlite.db\nDone.\n\n\n\n\n\ncourse_id\ntitle\ndept_name\ncredits\n\n\n\n\nBIO-101\nIntro. to Biology\nBiology\n4\n\n\nBIO-301\nGenetics\nBiology\n4\n\n\nBIO-399\nComputational Biology\nBiology\n3\n\n\nCS-101\nIntro. to Computer Science\nComp. Sci.\n4\n\n\nCS-190\nGame Design\nComp. Sci.\n4\n\n\nCS-315\nRobotics\nComp. Sci.\n3\n\n\nCS-319\nImage Processing\nComp. Sci.\n3\n\n\nCS-347\nDatabase System Concepts\nComp. Sci.\n3\n\n\nEE-181\nIntro. to Digital Systems\nElec. Eng.\n3\n\n\nFIN-201\nInvestment Banking\nFinance\n3\n\n\nHIS-351\nWorld History\nHistory\n3\n\n\nMU-199\nMusic Video Production\nMusic\n3\n\n\nPHY-101\nPhysical Principles\nPhysics\n4\n\n\n\n\n\n\nFrom the course relation, find the titles of all courses whose course_id has three alphabets indicating the department.\n\n\n\n * sqlite:///univdb-sqlite.db\nDone.\n\n\n\n\n\ntitle\n\n\n\n\nIntro. to Biology\n\n\nGenetics\n\n\nComputational Biology\n\n\nInvestment Banking\n\n\nWorld History\n\n\nPhysical Principles\n\n\n\n\n\n\nThe course_id of each department either has 2 or 3 alphabets in the beginning, followed by a hypher and then followed by 3 digits. The above query returns the names of all courses whose course_id has 3 alphabets in the beginning."
  },
  {
    "objectID": "maybe/w3.html#order-by",
    "href": "maybe/w3.html#order-by",
    "title": "DBMS - Week 3",
    "section": "Order By",
    "text": "Order By\n\n\n * sqlite:///univdb-sqlite.db\nDone.\n\n\n\n\n\nID\nname\ndept_name\ntot_cred\n\n\n\n\n00128\nZhang\nComp. Sci.\n102\n\n\n12345\nShankar\nComp. Sci.\n32\n\n\n19991\nBrandt\nHistory\n80\n\n\n23121\nChavez\nFinance\n110\n\n\n44553\nPeltier\nPhysics\n56\n\n\n45678\nLevy\nPhysics\n46\n\n\n54321\nWilliams\nComp. Sci.\n54\n\n\n55739\nSanchez\nMusic\n38\n\n\n70557\nSnow\nPhysics\n0\n\n\n76543\nBrown\nComp. Sci.\n58\n\n\n76653\nAoi\nElec. Eng.\n60\n\n\n98765\nBourikas\nElec. Eng.\n98\n\n\n98988\nTanaka\nBiology\n120\n\n\n\n\n\n\nFrom the student relation in the figure, obtain the list of all students in alphabetic order of departments and within each department, in decreasing order of total credits.\n\n\n\n * sqlite:///univdb-sqlite.db\nDone.\n\n\n\n\n\nname\ndept_name\ntot_cred\n\n\n\n\nTanaka\nBiology\n120\n\n\nZhang\nComp. Sci.\n102\n\n\nBrown\nComp. Sci.\n58\n\n\nWilliams\nComp. Sci.\n54\n\n\nShankar\nComp. Sci.\n32\n\n\nBourikas\nElec. Eng.\n98\n\n\nAoi\nElec. Eng.\n60\n\n\nChavez\nFinance\n110\n\n\nBrandt\nHistory\n80\n\n\nSanchez\nMusic\n38\n\n\nPeltier\nPhysics\n56\n\n\nLevy\nPhysics\n46\n\n\nSnow\nPhysics\n0\n\n\n\n\n\n\nThe list is first sorted in alphabetic order of dept name.\nWithin each dept, it is sorted in decreasing order of total credits."
  },
  {
    "objectID": "maybe/w3.html#in-operator",
    "href": "maybe/w3.html#in-operator",
    "title": "DBMS - Week 3",
    "section": "In Operator",
    "text": "In Operator\n\n\n * sqlite:///univdb-sqlite.db\nDone.\n\n\n\n\n\nID\ncourse_id\nsec_id\nsemester\nyear\n\n\n\n\n10101\nCS-101\n1\nFall\n2017\n\n\n10101\nCS-315\n1\nSpring\n2018\n\n\n10101\nCS-347\n1\nFall\n2017\n\n\n12121\nFIN-201\n1\nSpring\n2018\n\n\n15151\nMU-199\n1\nSpring\n2018\n\n\n22222\nPHY-101\n1\nFall\n2017\n\n\n32343\nHIS-351\n1\nSpring\n2018\n\n\n45565\nCS-101\n1\nSpring\n2018\n\n\n45565\nCS-319\n1\nSpring\n2018\n\n\n76766\nBIO-101\n1\nSummer\n2017\n\n\n76766\nBIO-301\n1\nSummer\n2018\n\n\n83821\nCS-190\n1\nSpring\n2017\n\n\n83821\nCS-190\n2\nSpring\n2017\n\n\n83821\nCS-319\n2\nSpring\n2018\n\n\n98345\nEE-181\n1\nSpring\n2017\n\n\n\n\n\n\nFrom the teaches relation, find the IDs of all courses taught in the Fall or Spring of 2018.\n\n\n\n * sqlite:///univdb-sqlite.db\nDone.\n\n\n\n\n\ncourse_id\n\n\n\n\nCS-315\n\n\nFIN-201\n\n\nMU-199\n\n\nHIS-351\n\n\nCS-101\n\n\nCS-319\n\n\nCS-319\n\n\n\n\n\n\nNote: We can use distinct to remove duplicates.\n\n\n\n * sqlite:///univdb-sqlite.db\nDone.\n\n\n\n\n\ncourse_id\n\n\n\n\nCS-315\n\n\nFIN-201\n\n\nMU-199\n\n\nHIS-351\n\n\nCS-101\n\n\nCS-319"
  },
  {
    "objectID": "maybe/w3.html#set-operations-2-intersect",
    "href": "maybe/w3.html#set-operations-2-intersect",
    "title": "DBMS - Week 3",
    "section": "Set Operations (2): intersect",
    "text": "Set Operations (2): intersect\n\n\n * sqlite:///univdb-sqlite.db\nDone.\n\n\n\n\n\nID\nname\ndept_name\nsalary\n\n\n\n\n10101\nSrinivasan\nComp. Sci.\n65000\n\n\n12121\nWu\nFinance\n90000\n\n\n15151\nMozart\nMusic\n40000\n\n\n22222\nEinstein\nPhysics\n95000\n\n\n32343\nEl Said\nHistory\n60000\n\n\n33456\nGold\nPhysics\n87000\n\n\n45565\nKatz\nComp. Sci.\n75000\n\n\n58583\nCalifieri\nHistory\n62000\n\n\n76543\nSingh\nFinance\n80000\n\n\n76766\nCrick\nBiology\n72000\n\n\n83821\nBrandt\nComp. Sci.\n92000\n\n\n98345\nKim\nElec. Eng.\n80000\n\n\n\n\n\n\nFrom the instructor relation, find the names of all instructors who taught in either the Computer Science department or the Finance department and whose salary is &lt; 80000.\n\n\n\n * sqlite:///univdb-sqlite.db\nDone.\n\n\n\n\n\nname\n\n\n\n\nKatz\n\n\nSrinivasan\n\n\n\n\n\n\n\n * sqlite:///univdb-sqlite.db\nDone.\n\n\n\n\n\nname\n\n\n\n\nSrinivasan\n\n\nKatz"
  },
  {
    "objectID": "maybe/w3.html#set-operations-3-except",
    "href": "maybe/w3.html#set-operations-3-except",
    "title": "DBMS - Week 3",
    "section": "Set Operations (3): except",
    "text": "Set Operations (3): except\n\nFrom the instructor relation, find the names of all instructors who taught in the Computer Science department or the Finance department and whose salary is either &gt;= 90000 or &lt;= 70000.\n\n\n\n * sqlite:///univdb-sqlite.db\nDone.\n\n\n\n\n\nname\n\n\n\n\nBrandt\n\n\nSrinivasan\n\n\nWu\n\n\n\n\n\n\n\n * sqlite:///univdb-sqlite.db\nDone.\n\n\n\n\n\nname\n\n\n\n\nSrinivasan\n\n\nWu\n\n\nBrandt"
  },
  {
    "objectID": "maybe/w3.html#aggregate-functions-avg",
    "href": "maybe/w3.html#aggregate-functions-avg",
    "title": "DBMS - Week 3",
    "section": "Aggregate functions: avg",
    "text": "Aggregate functions: avg\n\n\n * sqlite:///univdb-sqlite.db\nDone.\n\n\n\n\n\nbuilding\nroom_number\ncapacity\n\n\n\n\nPackard\n101\n500\n\n\nPainter\n514\n10\n\n\nTaylor\n3128\n70\n\n\nWatson\n100\n30\n\n\nWatson\n120\n50\n\n\n\n\n\n\nFrom the classroom relation, find the names and the average capacity of each building whose average capacity is greater than 25.\n\n\n\n * sqlite:///univdb-sqlite.db\nDone.\n\n\n\n\n\nbuilding\nAVG(capacity)\n\n\n\n\nPackard\n500.0\n\n\nTaylor\n70.0\n\n\nWatson\n40.0"
  },
  {
    "objectID": "maybe/w3.html#aggregate-functions-2-min",
    "href": "maybe/w3.html#aggregate-functions-2-min",
    "title": "DBMS - Week 3",
    "section": "Aggregate functions (2): min",
    "text": "Aggregate functions (2): min\n\n\n * sqlite:///univdb-sqlite.db\nDone.\n\n\n\n\n\nID\nname\ndept_name\nsalary\n\n\n\n\n10101\nSrinivasan\nComp. Sci.\n65000\n\n\n12121\nWu\nFinance\n90000\n\n\n15151\nMozart\nMusic\n40000\n\n\n22222\nEinstein\nPhysics\n95000\n\n\n32343\nEl Said\nHistory\n60000\n\n\n33456\nGold\nPhysics\n87000\n\n\n45565\nKatz\nComp. Sci.\n75000\n\n\n58583\nCalifieri\nHistory\n62000\n\n\n76543\nSingh\nFinance\n80000\n\n\n76766\nCrick\nBiology\n72000\n\n\n83821\nBrandt\nComp. Sci.\n92000\n\n\n98345\nKim\nElec. Eng.\n80000\n\n\n\n\n\n\nFrom the instructor relation, find the least salary drawn by any instructor among all the instructors.\n\n\n\n * sqlite:///univdb-sqlite.db\nDone.\n\n\n\n\n\nleast_salary\n\n\n\n\n40000"
  },
  {
    "objectID": "maybe/w3.html#aggregate-functions-3-max",
    "href": "maybe/w3.html#aggregate-functions-3-max",
    "title": "DBMS - Week 3",
    "section": "Aggregate functions (3): max",
    "text": "Aggregate functions (3): max\n\n\n * sqlite:///univdb-sqlite.db\nDone.\n\n\n\n\n\nID\nname\ndept_name\ntot_cred\n\n\n\n\n00128\nZhang\nComp. Sci.\n102\n\n\n12345\nShankar\nComp. Sci.\n32\n\n\n19991\nBrandt\nHistory\n80\n\n\n23121\nChavez\nFinance\n110\n\n\n44553\nPeltier\nPhysics\n56\n\n\n45678\nLevy\nPhysics\n46\n\n\n54321\nWilliams\nComp. Sci.\n54\n\n\n55739\nSanchez\nMusic\n38\n\n\n70557\nSnow\nPhysics\n0\n\n\n76543\nBrown\nComp. Sci.\n58\n\n\n76653\nAoi\nElec. Eng.\n60\n\n\n98765\nBourikas\nElec. Eng.\n98\n\n\n98988\nTanaka\nBiology\n120\n\n\n\n\n\n\nFrom the student relation, find the maximum credits obtained by any student among all the students.\n\n\n\n * sqlite:///univdb-sqlite.db\nDone.\n\n\n\n\n\nmax_credits\n\n\n\n\n120"
  },
  {
    "objectID": "maybe/w3.html#aggregate-functions-4-count",
    "href": "maybe/w3.html#aggregate-functions-4-count",
    "title": "DBMS - Week 3",
    "section": "Aggregate functions (4): count",
    "text": "Aggregate functions (4): count\n\n\n * sqlite:///univdb-sqlite.db\nDone.\n\n\n\n\n\ncourse_id\nsec_id\nsemester\nyear\nbuilding\nroom_number\ntime_slot_id\n\n\n\n\nBIO-101\n1\nSummer\n2017\nPainter\n514\nB\n\n\nBIO-301\n1\nSummer\n2018\nPainter\n514\nA\n\n\nCS-101\n1\nFall\n2017\nPackard\n101\nH\n\n\nCS-101\n1\nSpring\n2018\nPackard\n101\nF\n\n\nCS-190\n1\nSpring\n2017\nTaylor\n3128\nE\n\n\nCS-190\n2\nSpring\n2017\nTaylor\n3128\nA\n\n\nCS-315\n1\nSpring\n2018\nWatson\n120\nD\n\n\nCS-319\n1\nSpring\n2018\nWatson\n100\nB\n\n\nCS-319\n2\nSpring\n2018\nTaylor\n3128\nC\n\n\nCS-347\n1\nFall\n2017\nTaylor\n3128\nA\n\n\nEE-181\n1\nSpring\n2017\nTaylor\n3128\nC\n\n\nFIN-201\n1\nSpring\n2018\nPackard\n101\nB\n\n\nHIS-351\n1\nSpring\n2018\nPainter\n514\nC\n\n\nMU-199\n1\nSpring\n2018\nPackard\n101\nD\n\n\nPHY-101\n1\nFall\n2017\nWatson\n100\nA\n\n\n\n\n\n\nFrom the section relation, find the number of courses run in each building.\n\n\n\n * sqlite:///univdb-sqlite.db\nDone.\n\n\n\n\n\nbuilding\ncourse_count\n\n\n\n\nPackard\n4\n\n\nPainter\n3\n\n\nTaylor\n5\n\n\nWatson\n3"
  },
  {
    "objectID": "maybe/w3.html#aggregate-functions-5-sum",
    "href": "maybe/w3.html#aggregate-functions-5-sum",
    "title": "DBMS - Week 3",
    "section": "Aggregate functions (5): sum",
    "text": "Aggregate functions (5): sum\n\n\n * sqlite:///univdb-sqlite.db\nDone.\n\n\n\n\n\ncourse_id\ntitle\ndept_name\ncredits\n\n\n\n\nBIO-101\nIntro. to Biology\nBiology\n4\n\n\nBIO-301\nGenetics\nBiology\n4\n\n\nBIO-399\nComputational Biology\nBiology\n3\n\n\nCS-101\nIntro. to Computer Science\nComp. Sci.\n4\n\n\nCS-190\nGame Design\nComp. Sci.\n4\n\n\nCS-315\nRobotics\nComp. Sci.\n3\n\n\nCS-319\nImage Processing\nComp. Sci.\n3\n\n\nCS-347\nDatabase System Concepts\nComp. Sci.\n3\n\n\nEE-181\nIntro. to Digital Systems\nElec. Eng.\n3\n\n\nFIN-201\nInvestment Banking\nFinance\n3\n\n\nHIS-351\nWorld History\nHistory\n3\n\n\nMU-199\nMusic Video Production\nMusic\n3\n\n\nPHY-101\nPhysical Principles\nPhysics\n4\n\n\n\n\n\n\nFrom the course relation, find the total credits offered by each department.\n\n\n\n * sqlite:///univdb-sqlite.db\nDone.\n\n\n\n\n\ndept_name\nsum_credits\n\n\n\n\nBiology\n11\n\n\nComp. Sci.\n17\n\n\nElec. Eng.\n3\n\n\nFinance\n3\n\n\nHistory\n3\n\n\nMusic\n3\n\n\nPhysics\n4"
  },
  {
    "objectID": "maybe/w3.html#nested-subqueries",
    "href": "maybe/w3.html#nested-subqueries",
    "title": "DBMS - Week 3",
    "section": "Nested Subqueries",
    "text": "Nested Subqueries\n\nSQL provides a mechanism for nesting of subqueries\nA subquery is a select-from-where expression that is nested within another query\nThe nesting can be done in the following SQL query \\[ \\text{select } A_1, A_2, ..., A_n \\] \\[ \\text{from } r_1, r_2, ..., r_m \\] \\[ \\text{where } P \\] as follows:\n\n\\(A_i\\) can be a subquery that generates a single value\n\\(r_i\\) can be replaced by any valid subquery\n\\(P\\) can be replaced with an expressionm of the form:\n\\(B \\text{ &lt;operation&gt;}\\) (subquery)\nwhere \\(B\\) is an attribute and \\(\\text{&lt;operation&gt;}\\) to be defined later."
  },
  {
    "objectID": "maybe/w3.html#subqueries-in-the-where-clause",
    "href": "maybe/w3.html#subqueries-in-the-where-clause",
    "title": "DBMS - Week 3",
    "section": "Subqueries in the Where Clause",
    "text": "Subqueries in the Where Clause\n\nTypical use of subqueries is to perform tests:\n\nFor set membership\nFor set comparisons\nFor set cardinality"
  },
  {
    "objectID": "maybe/w3.html#set-membership",
    "href": "maybe/w3.html#set-membership",
    "title": "DBMS - Week 3",
    "section": "Set Membership",
    "text": "Set Membership\n\nFind courses offered in Fall 2009 and in Spring 2010 (intersect example)\n\nselect distinct course_id\nfrom section\nwhere semester = 'Fall' and year = 2017 and\ncourse_id in (select course_id\n              from section\n              where semester = 'Spring' and year = 2018);\n\n\nCS-101\n\n\n\nFind courses offered in Fall 2009 but not in Spring 2010 (except example)\n\nselect distinct course_id\nfrom section\nwhere semester = 'Fall' and year = 2017 and\ncourse_id not in (select course_id\n              from section\n              where semester = 'Spring' and year = 2018);\n\n\nCS-347\nPHY-101\n\n\n\n\n * sqlite:///univdb-sqlite.db\nDone.\n\n\n\n\n\ncourse_id\n\n\n\n\nCS-347\n\n\nPHY-101"
  },
  {
    "objectID": "maybe/w3.html#set-membership-2",
    "href": "maybe/w3.html#set-membership-2",
    "title": "DBMS - Week 3",
    "section": "Set Membership (2)",
    "text": "Set Membership (2)\n\nFind the total number of (distinct) students who have taken course sections taught by instructor with ID ‘10101’\n\nselect count(distinct ID)\nfrom takes\nwhere (course_id, sec_id, semester, year) in\n    (select course_id, sec_id, semester, year\n    from teaches\n    where teaches.ID = '10101');\n\n\n6\n\n\n\n\n * sqlite:///univdb-sqlite.db\nDone.\n\n\n\n\n\ncount(distinct ID)\n\n\n\n\n6\n\n\n\n\n\n\n\n * sqlite:///univdb-sqlite.db\nDone.\n\n\n\n\n\n\n\ncount(distinct ID)\n\n\n\n\n6"
  },
  {
    "objectID": "maybe/w3.html#set-comparison---some-clause",
    "href": "maybe/w3.html#set-comparison---some-clause",
    "title": "DBMS - Week 3",
    "section": "Set Comparison - “some” Clause",
    "text": "Set Comparison - “some” Clause\n\nFind the names of instructors with salary greater than that of some (at least one) instructor in the Biology department\n\nselect distinct T.name\nfrom instructor T, instructor S\nwhere T.salary &gt; S.salary and S.dept_name = 'Biology';\n\nSame query using some clause\n\nselect name\nfrom instructor\nwhere salary &gt; some (select salary\n                    from instructor\n                    where dept_name = 'Biology');"
  },
  {
    "objectID": "maybe/w3.html#definition-of-some-clause",
    "href": "maybe/w3.html#definition-of-some-clause",
    "title": "DBMS - Week 3",
    "section": "Definition of “some” Clause",
    "text": "Definition of “some” Clause\n\nF \\(\\text{&lt;comp&gt;}\\) some \\(r \\Leftrightarrow \\exists t \\in r\\) such that (F \\(\\text{&lt;comp&gt;}\\) t) where \\(\\text{&lt;comp&gt;}\\) can be: \\(&lt;\\), \\(\\leq\\), \\(&gt;\\), \\(\\geq\\), \\(=\\), \\(\\neq\\)\nsome represents existential quantification\n\n(5 &lt; some {0, 5, 6}) = True\n(5 &lt; some {0, 5}) = False\n(5 = some {0, 5}) = True\n(5 \\(\\neq\\) some {0, 5}) = False\n(= some) \\(\\equiv\\) in\nHowever, (\\(\\neq\\) some) \\(\\equiv\\) not in"
  },
  {
    "objectID": "maybe/w3.html#set-comparison---all-clause",
    "href": "maybe/w3.html#set-comparison---all-clause",
    "title": "DBMS - Week 3",
    "section": "Set Comparison - “all” Clause",
    "text": "Set Comparison - “all” Clause\n\nFind the names of all instructors with salary greater than that of all instructors in the Biology department\n\nselect name\nfrom instructor\nwhere salary &gt; all (select salary\n                    from instructor\n                    where dept_name = 'Biology');"
  },
  {
    "objectID": "maybe/w3.html#definition-of-all-clause",
    "href": "maybe/w3.html#definition-of-all-clause",
    "title": "DBMS - Week 3",
    "section": "Definition of “all” Clause",
    "text": "Definition of “all” Clause\n\nF \\(\\text{&lt;comp&gt;}\\) all \\(r \\Leftrightarrow \\forall t \\in r\\) such that (F \\(\\text{&lt;comp&gt;}\\) t) where \\(\\text{&lt;comp&gt;}\\) can be: \\(&lt;\\), \\(\\leq\\), \\(&gt;\\), \\(\\geq\\), \\(=\\), \\(\\neq\\)\nall represents universal quantification\n\n(5 &lt; all {0, 5, 6}) = False\n(5 &lt; all {6, 10}) = True\n(5 = all {0, 5}) = False\n(5 \\(\\neq\\) all {4, 6}) = True\n(\\(\\neq\\) all) \\(\\equiv\\) not in\nHowever, (\\(=\\) all) !\\(\\equiv\\) in"
  },
  {
    "objectID": "maybe/w3.html#test-for-empty-relations-exists",
    "href": "maybe/w3.html#test-for-empty-relations-exists",
    "title": "DBMS - Week 3",
    "section": "Test for Empty Relations: “exists”",
    "text": "Test for Empty Relations: “exists”\n\nThe exists constucrt returns the value true if the argument subquery is non-empty\n\nexists $r r $\nnot exists $r r = $"
  },
  {
    "objectID": "maybe/w3.html#use-of-exists-clause",
    "href": "maybe/w3.html#use-of-exists-clause",
    "title": "DBMS - Week 3",
    "section": "Use of “exists” clause",
    "text": "Use of “exists” clause\n\nYet another way of specifying the query “Find all courses taught in both the Fall 2009 semester and in the Spring 2010 semester”\n\nselect course_id\nfrom section as S\nwhere semester = 'Fall' and year = 2009 and\nexists (select *\n        from section as T\n        where semester = 'Spring' and year = 2010 and\n        S.course_id = T.course_id);\n\nCorrelation name - variable S in the outer query\nCorrelated subquery - subquery that references the correlation name (the inner query)"
  },
  {
    "objectID": "maybe/w3.html#use-of-not-exists-clause",
    "href": "maybe/w3.html#use-of-not-exists-clause",
    "title": "DBMS - Week 3",
    "section": "Use of “not exists” clause",
    "text": "Use of “not exists” clause\n\nFind all students who have taken all courses offered in the Biology department.\n\nselect distinct S.ID, S.name\nfrom student as S\nwhere not exists ((select course_id\n                    from course\n                    where dept_name = 'Biology')\n                    except\n                    (select T.course_id\n                    from takes as T\n                    where S.ID = T.ID));\n\nFirst nested query lists all courses offered in Biology\nSecond nested query lists all courses a particular student took\nNote: \\(X-Y = \\emptyset \\Leftrightarrow X \\subseteq Y\\)\nNote: Cannot write this query using \\(=\\) all and its variants"
  },
  {
    "objectID": "maybe/w3.html#test-for-absence-of-duplicate-tuples-unique",
    "href": "maybe/w3.html#test-for-absence-of-duplicate-tuples-unique",
    "title": "DBMS - Week 3",
    "section": "Test for Absence of Duplicate Tuples: “unique”",
    "text": "Test for Absence of Duplicate Tuples: “unique”\n\nThe unique construct tests whether a subquery has any duplicate tuples in its result\nThe unique construct evaluates to true if the subquery result has no duplicate tuples\nFind all courses that were offered at most once in 2009\n\nselect T.course_id\nfrom course as T\nwhere unique (select R.course_id\n              from section as R\n              where R.course_id = T.course_id\n              and R.year = 2009);"
  },
  {
    "objectID": "maybe/w3.html#subqueries-in-the-from-clause",
    "href": "maybe/w3.html#subqueries-in-the-from-clause",
    "title": "DBMS - Week 3",
    "section": "Subqueries in the From Clause",
    "text": "Subqueries in the From Clause\n\nSQL allows a subquery expression to be used in the from clause\nFind the average instructors’ salaries of those departments where the average salary is greater than $42,000\n\nselect dept_name, avg_salary\nfrom (select dept_name, avg(salary) as avg_salary\n      from instructor\n      group by dept_name)\nwhere avg_salary &gt; 42000;\n\nNote that we do not need to use the having clause\nAnoter way to write the same query is:\n\nselect dept_name, avg_salary\nfrom (select dept_name, avg(salary)\n      from instructor\n      group by dept_name) as dept_avg (dept_name, avg_salary)\nwhere avg_salary &gt; 42000;"
  },
  {
    "objectID": "maybe/w3.html#with-clause",
    "href": "maybe/w3.html#with-clause",
    "title": "DBMS - Week 3",
    "section": "With Clause",
    "text": "With Clause\n\nThe with clause provides a way of defining a temporary relation whose definition is available only to the query in which the with clause occurs\nFind all departments with the maximum budget\n\nwith max_budget(value) as\n    (select max(budget)\n    from department)\nselect department.dept_name\nfrom department, max_budget\nwhere department.budget = max_budget.value;"
  },
  {
    "objectID": "maybe/w3.html#complex-queries-using-with-clause",
    "href": "maybe/w3.html#complex-queries-using-with-clause",
    "title": "DBMS - Week 3",
    "section": "Complex Queries using With Clause",
    "text": "Complex Queries using With Clause\n\nFind all departments where the total salary is greater than the average of the total salary at all departments\n\nwith dept_total(dept_name, value) as\n    select dept_name, sum(salary)\n    from instructor\n    group by dept_name,\ndept_total_avg(value) as\n    (select avg(value)\n    from dept_total)\nselect dept_name\nfrom dept_total, dept_total_avg\nwhere dept_total.value &gt; dept_total_avg.value;"
  },
  {
    "objectID": "maybe/w3.html#scalar-subquery",
    "href": "maybe/w3.html#scalar-subquery",
    "title": "DBMS - Week 3",
    "section": "Scalar Subquery",
    "text": "Scalar Subquery\n\nA scalar subquery is a subquery that returns a single value\nList all departments along with the number of instructors in each department\n\nselect dept_name,\n    (select count(*)\n    from instructor\n    where instructor.dept_name = department.dept_name)\n    as num_instructors\n    from department;\n\nRuntime error if the subquery returns more than one result tuple"
  },
  {
    "objectID": "maybe/w3.html#modification-of-the-database",
    "href": "maybe/w3.html#modification-of-the-database",
    "title": "DBMS - Week 3",
    "section": "Modification of the Database",
    "text": "Modification of the Database\n\nDeletion of tuples from a given relation\nInsertion of new tuples into a given relation\nUpdating of values in some tuples in a given relation"
  },
  {
    "objectID": "maybe/w3.html#deletion",
    "href": "maybe/w3.html#deletion",
    "title": "DBMS - Week 3",
    "section": "Deletion",
    "text": "Deletion\n\nDelete all instructors\ndelete from instructor;\nDelete all instructors from the Finance department\ndelete from instructor\nwhere dept_name = 'Finance';\nDelete all tuples in the instructor relation for those instructors associated with a department located in the Watson building\ndelete from instructor\nwhere dept_name in (select dept_name\n                    from department\n                    where building = 'Watson');\nDelete all instructors whose salary is less than the average of all instructors’ salaries\ndelete from instructor\nwhere salary &lt; (select avg(salary)\n                from instructor);\nProblem: as we delete tuples, the average salary changes\nSolution used in SQL:\n\nFirst compute avg(salary) and find all tuples to be deleted\nNext, delete all tuples found above (without recomputing avg or retesting the tuples)"
  },
  {
    "objectID": "maybe/w3.html#insertion",
    "href": "maybe/w3.html#insertion",
    "title": "DBMS - Week 3",
    "section": "Insertion",
    "text": "Insertion\n\nAdd a new typle to course\ninsert into course\nvalues ('CS-437', 'Database Systems', 'Comp. Sci.', 4);\nor equivalently\ninsert into course (course_id, title, dept_name, credits)\nvalues ('CS-437', 'Database Systems', 'Comp. Sci.', 4);\nAdd a new tuple to student with tot_creds set to null\ninsert into student\nvalues ('3003', 'Green', 'Finance', null);\nAdd all instructors to the student relation with tot_creds set to 0\ninsert into student\nselect ID, name, dept_name, 0\nfrom instructor;\nThe select-from-where statement is evaluated fully before any of its results are inserted into the relation\nOtherwise queries like\ninsert into table1 select * from table1;\nwould result in an infinite loop"
  },
  {
    "objectID": "maybe/w3.html#updates",
    "href": "maybe/w3.html#updates",
    "title": "DBMS - Week 3",
    "section": "Updates",
    "text": "Updates\n\nIncrease the salary of all instructors whose salary is over $100,00 by 3% and all others by 5%\n\nWith two update statements\nupdate instructor\n    set salary = salary * 1.03\n    where salary &gt; 100000;\nupdate instructor\n    set salary = salary * 1.05\n    where salary &lt;= 100000;\n\nThe order is important\nCan be done better using the case statement"
  },
  {
    "objectID": "maybe/w3.html#case-statement-for-conditional-updates",
    "href": "maybe/w3.html#case-statement-for-conditional-updates",
    "title": "DBMS - Week 3",
    "section": "Case Statement for Conditional Updates",
    "text": "Case Statement for Conditional Updates\n\nSame query as above using the case statement\nupdate instructor\n    set salary = case\n                when salary &lt;= 100000\n                then salary * 1.05\n                else salary * 1.03\n                end;"
  },
  {
    "objectID": "maybe/w3.html#updates-with-scalar-subqueries",
    "href": "maybe/w3.html#updates-with-scalar-subqueries",
    "title": "DBMS - Week 3",
    "section": "Updates with Scalar Subqueries",
    "text": "Updates with Scalar Subqueries\n\nRecompute and update tot_creds value for all students\nupdate student\nset tot_creds = (select sum(credits)\n                from takes, course\n                where takes.course_id = course.course_id and\n                S.ID = takes.ID and\n                takes.grade &lt;&gt; 'F' and\n                takes.grade is not null);\nSet tot_creds to null for all students who have not taken any courses\nInstead of sum(credits), use:\n    case\n    when sum(credits) is not null then sum(credits)\n    else 0\nend;"
  },
  {
    "objectID": "week-2/2.2.html",
    "href": "week-2/2.2.html",
    "title": "Select Operation (σ) - selection of rows (tuples)",
    "section": "",
    "text": "import pandas as pd\nimport matplotlib.pyplot as plt\nfrom IPython.display import HTML"
  },
  {
    "objectID": "week-2/2.2.html#question-2",
    "href": "week-2/2.2.html#question-2",
    "title": "Select Operation (σ) - selection of rows (tuples)",
    "section": "Question 2",
    "text": "Question 2\n\nimport pandas as pd\nfrom IPython.display import HTML\n\nr = {\n    'A':[1, 3, 1, 3],\n    'B':[1, 4, 1, 2],\n    'C':[3, 5, 2, 5],\n    'D':[4, 1, 3, 1]\n}\n\n# Create DataFrame for r\ndf_r = pd.DataFrame(r)\n\n# Display the original DataFrame without the index\nprint(\"Relation r:\")\n\ndisplay(HTML(df_r.to_html(index=False)))\n\nRelation r:\n\n\n\n\n\nA\nB\nC\nD\n\n\n\n\n1\n1\n3\n4\n\n\n3\n4\n5\n1\n\n\n1\n1\n2\n3\n\n\n3\n2\n5\n1\n\n\n\n\n\nWhat will be the output of the following relational operation on r? ### $ _{(A=BC &gt; 2)}(r) $"
  },
  {
    "objectID": "week-2/2.2.html#solution",
    "href": "week-2/2.2.html#solution",
    "title": "Select Operation (σ) - selection of rows (tuples)",
    "section": "Solution",
    "text": "Solution\nTo find the output of the relational operation \\(\\sigma_{\\neg(A=B \\vee C &gt; 2)}(r)\\) on the given relation \\(r\\), we need to filter the rows of the DataFrame where the condition \\(\\neg(A=B \\vee C &gt; 2)\\) holds true.\n\nBreaking Down the Condition\n\n$ A = B $: This means the values in column A should be equal to the values in column B.\n$ C &gt; 2 $: This means the values in column C should be greater than 2.\n$ A = B C &gt; 2 $: This means either $ A = B $ or $ C &gt; 2 $ (or both) should be true.\n$ (A = B C &gt; 2) $: This negates the previous condition, meaning neither $ A = B $ nor $ C &gt; 2 $ should be true.\n\n\n\nExplanation\n\nStep 1: Create the DataFrame df_r.\nStep 2: Apply the condition ~((df_r['A'] == df_r['B']) | (df_r['C'] &gt; 2)):\n\ndf_r['A'] == df_r['B'] creates a boolean series where each element is True if the corresponding elements in columns A and B are equal, and False otherwise.\ndf_r['C'] &gt; 2 creates a boolean series where each element is True if the corresponding element in column C is greater than 2, and False otherwise.\nThe | operator performs an element-wise OR operation between these two boolean series.\nThe ~ operator negates the resulting boolean series.\n\nStep 3: Filter the DataFrame using this boolean series to keep only the rows where the condition holds true.\nStep 4: Display the resulting DataFrame.\n\n\n\nExpected Output\nThe output will be the rows of the DataFrame where neither A = B nor C &gt; 2 is true. Let’s break it down for the given data:\n\nFor the first row (index 0): $ A = 1, B = 1, C = 3 $. Here, $ A = B $ is true and $ C &gt; 2 $ is true.\nFor the second row (index 1): $ A = 3, B = 4, C = 5 $. Here, $ A = B $ is false but $ C &gt; 2 $ is true.\nFor the third row (index 2): $ A = 1, B = 1, C = 2 $. Here, $ A = B $ is true but $ C &gt; 2 $ is false.\nFor the fourth row (index 3): $ A = 3, B = 2, C = 5 $. Here, $ A = B $ is false but $ C &gt; 2 $ is true.\n\nNone of these rows satisfy the condition $ (A = B C &gt; 2) $, so the resulting DataFrame will be empty.\n\n# Relational operation: ¬(A=B ∨ C &gt; 2)\nfiltered_df = df_r[~((df_r['A'] == df_r['B']) | (df_r['C'] &gt; 2))]\n\n# Display the filtered DataFrame without the index\ndisplay(HTML(filtered_df.to_html(index=False)))\n\n\n\n\nA\nB\nC\nD"
  },
  {
    "objectID": "week-2/2.2.html#question-3",
    "href": "week-2/2.2.html#question-3",
    "title": "Select Operation (σ) - selection of rows (tuples)",
    "section": "Question 3",
    "text": "Question 3\n\nimport pandas as pd\nfrom IPython.display import HTML\n\nr = {\n    'A':[1, 3, 1, 3],\n    'B':[1, 4, 1, 2],\n    'C':[3, 5, 2, 5],\n    'D':[4, 1, 3, 1]\n}\n\n# Create DataFrame for r\ndf_r = pd.DataFrame(r)\n\n# Display the original DataFrame without the index\nprint(\"Relation r:\")\n\ndisplay(HTML(df_r.to_html(index=False)))\n\nRelation r:\n\n\n\n\n\nA\nB\nC\nD\n\n\n\n\n1\n1\n3\n4\n\n\n3\n4\n5\n1\n\n\n1\n1\n2\n3\n\n\n3\n2\n5\n1\n\n\n\n\n\nHow many rows will be there in the output of the following relational operation on r? ### $ _{A,D}(r) $\n\n# Projection: Select columns A and C\nans = df_r[['A', 'D']].drop_duplicates()\n\n# Display the projected DataFrame with duplicates\nHTML(ans.to_html(index=False))\n\n\n\n\nA\nD\n\n\n\n\n1\n4\n\n\n3\n1\n\n\n1\n3"
  },
  {
    "objectID": "week-2/2.2.html#solution-3",
    "href": "week-2/2.2.html#solution-3",
    "title": "Select Operation (σ) - selection of rows (tuples)",
    "section": "Solution: 3",
    "text": "Solution: 3"
  },
  {
    "objectID": "week-2/2.2.html#question-6",
    "href": "week-2/2.2.html#question-6",
    "title": "Select Operation (σ) - selection of rows (tuples)",
    "section": "Question 6",
    "text": "Question 6\n\nimport pandas as pd\nfrom IPython.display import HTML\n\nr = {\n    'A':[0, 2, 1],\n    'B':[9, 2, 1],\n    'C':[0, 2, 1]\n}\n\n# Create DataFrame for r\ndf_r = pd.DataFrame(r)\n\ns = {\n    'A':[0, 2, 1],\n    'B':['Cat', 'Dog', 'Lion'],\n    'C':[0, 2, 1]\n}\n\n# Create DataFrame for s\ndf_s = pd.DataFrame(s)\n\n\n# Display the original DataFrames without the index\nprint(\"DataFrame r:\")\ndisplay(HTML(df_r.to_html(index=False)))\n\nprint(\"DataFrame s:\")\ndisplay(HTML(df_s.to_html(index=False)))\n\nDataFrame r:\nDataFrame s:\n\n\n\n\n\nA\nB\nC\n\n\n\n\n0\n9\n0\n\n\n2\n2\n2\n\n\n1\n1\n1\n\n\n\n\n\n\n\n\nA\nB\nC\n\n\n\n\n0\nCat\n0\n\n\n2\nDog\n2\n\n\n1\nLion\n1\n\n\n\n\n\nHow many columns and rows will be there in the Cartesian product of the above two relations?"
  },
  {
    "objectID": "week-2/2.2.html#solution-1",
    "href": "week-2/2.2.html#solution-1",
    "title": "Select Operation (σ) - selection of rows (tuples)",
    "section": "Solution",
    "text": "Solution\n\n# Cartesian product of df_r and df_s\ncartesian_product_df = pd.merge(df_r.assign(key=1), df_s.assign(key=1), on='key').drop('key', axis=1)\n\n# Rename the columns to make them unique\ncartesian_product_df.columns = ['r.A', 'r.B', 'r.C', 's.A','s.B', 's.C']\n\n# Display the Cartesian product DataFrame without the index\nprint(\"Cartesian Product of r and s:\")\ndisplay(HTML(cartesian_product_df.to_html(index=False)))\n\nCartesian Product of r and s:\n\n\n\n\n\nr.A\nr.B\nr.C\ns.A\ns.B\ns.C\n\n\n\n\n0\n9\n0\n0\nCat\n0\n\n\n0\n9\n0\n2\nDog\n2\n\n\n0\n9\n0\n1\nLion\n1\n\n\n2\n2\n2\n0\nCat\n0\n\n\n2\n2\n2\n2\nDog\n2\n\n\n2\n2\n2\n1\nLion\n1\n\n\n1\n1\n1\n0\nCat\n0\n\n\n1\n1\n1\n2\nDog\n2\n\n\n1\n1\n1\n1\nLion\n1\n\n\n\n\n\n\ncartesian_product_df.shape\n\n(9, 6)\n\n\n9 rows and 6 columns."
  },
  {
    "objectID": "week-2/2.2.html#question-8",
    "href": "week-2/2.2.html#question-8",
    "title": "Select Operation (σ) - selection of rows (tuples)",
    "section": "Question 8",
    "text": "Question 8\n\nimport pandas as pd\nfrom IPython.display import HTML\n\nr = {\n    'A':['a1', 'a2', 'a3', 'a1', 'a2', 'a4'],\n    'B':['b1', 'b2', 'b1', 'b3', 'b4', 'b1'],\n    'C':['c1', 'c1', 'c3', 'c2', 'c2', 'a3']\n}\n\n# Create DataFrame for r\ndf_r = pd.DataFrame(r)\n\ns = {\n    'X': ['x1', 'x2', 'x3', 'x3', 'x1'],\n    'Y': ['y1', 'y2', 'y3', 'y3', 'y4'],\n    'A':['a1', 'a1', 'a2', 'a3', 'a3'],\n    'C':['c1', 'c2', 'c2', 'c2', 'c3']\n}\n\n# Create DataFrame for s\ndf_s = pd.DataFrame(s)\n\n\n# Display the original DataFrames without the index\nprint(\"DataFrame r:\")\ndisplay(HTML(df_r.to_html(index=False)))\n\nprint(\"DataFrame s:\")\ndisplay(HTML(df_s.to_html(index=False)))\n\nDataFrame r:\nDataFrame s:\n\n\n\n\n\nA\nB\nC\n\n\n\n\na1\nb1\nc1\n\n\na2\nb2\nc1\n\n\na3\nb1\nc3\n\n\na1\nb3\nc2\n\n\na2\nb4\nc2\n\n\na4\nb1\na3\n\n\n\n\n\n\n\n\nX\nY\nA\nC\n\n\n\n\nx1\ny1\na1\nc1\n\n\nx2\ny2\na1\nc2\n\n\nx3\ny3\na2\nc2\n\n\nx3\ny3\na3\nc2\n\n\nx1\ny4\na3\nc3\n\n\n\n\n\nHow many rows will be selected by relational operation \\(r \\bowtie s\\)"
  },
  {
    "objectID": "week-2/2.2.html#solution-2",
    "href": "week-2/2.2.html#solution-2",
    "title": "Select Operation (σ) - selection of rows (tuples)",
    "section": "Solution",
    "text": "Solution\n\n# Natural join of df_r and df_s\nnatural_join_df = pd.merge(df_r, df_s, on=['A', 'C'])\n\n# Display the result of the natural join\nprint(\"Natural Join of r and s:\")\ndisplay(HTML(natural_join_df.to_html(index=False)))\n\n# Count the number of rows in the resulting DataFrame\nnum_rows = natural_join_df.shape[0]\nprint(\"Number of rows selected by r ⨝ s:\", num_rows)\n\nNatural Join of r and s:\nNumber of rows selected by r ⨝ s: 4\n\n\n\n\n\nA\nB\nC\nX\nY\n\n\n\n\na1\nb1\nc1\nx1\ny1\n\n\na3\nb1\nc3\nx1\ny4\n\n\na1\nb3\nc2\nx2\ny2\n\n\na2\nb4\nc2\nx3\ny3"
  },
  {
    "objectID": "week-2/2.5.html",
    "href": "week-2/2.5.html",
    "title": "DBMS",
    "section": "",
    "text": "import pandas as pd\nfrom IPython.display import display\nemployee_data = {\n    'eid': ['E001', 'E002', 'E003', 'E004', 'E005', 'E006', 'E007'],\n    'ename': ['Arun', 'William', 'Ramesh', 'Rekha', 'Syed', 'Gurpreet', 'Susan'],\n    'salary': [50000, 45000, 45000, 35000, 30000, 80000, 85000],\n    'deptid': ['D001', 'D002', 'D004', 'D003', 'D002', 'D003', 'D004']\n}\nemployee = pd.DataFrame(employee_data)\n\ndept_data = {\n    'deptid': ['D001', 'D002', 'D003', 'D004'],\n    'dname': ['Accounts', 'Marketing', 'Sales', 'Production'],\n    'building': ['B1', 'B2', 'B3', 'B1']\n}\n\ndepartment = pd.DataFrame(dept_data)\na = ['E001', 'E002', 'E003', 'E004', 'E005', 'E006', 'E007']\nb = ['Arun', 'William', 'Ramesh', 'Rekha', 'Syed', 'Gurpreet', 'Susan']\nc = [50000, 45000, 45000, 35000, 30000, 80000, 85000]\nd = ['D001', 'D002', 'D004', 'D003', 'D002', 'D003', 'D004']\nfor i in range (7):\n    print(f\"insert into employee values('{a[i]}', '{b[i]}', {c[i]}, '{d[i]}');\")\n\ninsert into employee values('E001', 'Arun', 50000, 'D001');\ninsert into employee values('E002', 'William', 45000, 'D002');\ninsert into employee values('E003', 'Ramesh', 45000, 'D004');\ninsert into employee values('E004', 'Rekha', 35000, 'D003');\ninsert into employee values('E005', 'Syed', 30000, 'D002');\ninsert into employee values('E006', 'Gurpreet', 80000, 'D003');\ninsert into employee values('E007', 'Susan', 85000, 'D004');\ndisplay(employee)\ndisplay(department)\n\n\n\n\n\n\n\n\neid\nename\nsalary\ndeptid\n\n\n\n\n0\nE001\nArun\n50000\nD001\n\n\n1\nE002\nWilliam\n45000\nD002\n\n\n2\nE003\nRamesh\n45000\nD004\n\n\n3\nE004\nRekha\n35000\nD003\n\n\n4\nE005\nSyed\n30000\nD002\n\n\n5\nE006\nGurpreet\n80000\nD003\n\n\n6\nE007\nSusan\n85000\nD004\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ndeptid\ndname\nbuilding\n\n\n\n\n0\nD001\nAccounts\nB1\n\n\n1\nD002\nMarketing\nB2\n\n\n2\nD003\nSales\nB3\n\n\n3\nD004\nProduction\nB1"
  },
  {
    "objectID": "week-2/2.5.html#question-2",
    "href": "week-2/2.5.html#question-2",
    "title": "DBMS",
    "section": "Question 2",
    "text": "Question 2\nHow many rows will be fetched by the following query?\nSELECT eid FROM Employee WHERE deptid = ’D003’ AND salary &gt; 35000\nEXCEPT\nSELECT e.eid FROM Employee e,Department d\nWHERE e.deptid = d.deptid AND d.building = ’B3’;\n\ndf2 = employee[(employee['deptid'] == 'D003')&(employee['salary'] &gt; 35000)]\ndisplay(df2)\n\n\n\n\n\n\n\n\neid\nename\nsalary\ndeptid\n\n\n\n\n5\nE006\nGurpreet\n80000\nD003\n\n\n\n\n\n\n\n\ndisplay(df2[['eid']])\n\n\n\n\n\n\n\n\neid\n\n\n\n\n5\nE006\n\n\n\n\n\n\n\n\npart1 = df2[['eid']]\n\n\npart1\n\n\n\n\n\n\n\n\neid\n\n\n\n\n5\nE006\n\n\n\n\n\n\n\n\ncp_df = pd.merge(employee, department, on='deptid', how='inner')\ndisplay(cp_df)\n\n\n\n\n\n\n\n\neid\nename\nsalary\ndeptid\ndname\nbuilding\n\n\n\n\n0\nE001\nArun\n50000\nD001\nAccounts\nB1\n\n\n1\nE002\nWilliam\n45000\nD002\nMarketing\nB2\n\n\n2\nE005\nSyed\n30000\nD002\nMarketing\nB2\n\n\n3\nE003\nRamesh\n45000\nD004\nProduction\nB1\n\n\n4\nE007\nSusan\n85000\nD004\nProduction\nB1\n\n\n5\nE004\nRekha\n35000\nD003\nSales\nB3\n\n\n6\nE006\nGurpreet\n80000\nD003\nSales\nB3\n\n\n\n\n\n\n\n\n# show the rows where building is B3\ncp_df_2 = cp_df[cp_df['building'] == 'B3']\ndisplay(cp_df_2)\n\n\n\n\n\n\n\n\neid\nename\nsalary\ndeptid\ndname\nbuilding\n\n\n\n\n5\nE004\nRekha\n35000\nD003\nSales\nB3\n\n\n6\nE006\nGurpreet\n80000\nD003\nSales\nB3\n\n\n\n\n\n\n\n\ndisplay(cp_df_2[['eid']])\n\n\n\n\n\n\n\n\neid\n\n\n\n\n5\nE004\n\n\n6\nE006\n\n\n\n\n\n\n\n\npart2 = cp_df_2[['eid']]\n\n\npart2\n\n\n\n\n\n\n\n\neid\n\n\n\n\n5\nE004\n\n\n6\nE006\n\n\n\n\n\n\n\n\nprint(part1)\nprint(part2)\n\n    eid\n5  E006\n    eid\n5  E004\n6  E006"
  },
  {
    "objectID": "week-2/2.5.html#question-3",
    "href": "week-2/2.5.html#question-3",
    "title": "DBMS",
    "section": "Question 3",
    "text": "Question 3\nWhat will be the output of the following query?\nSELECT e.eid FROM Employee e,Department d\nWHERE d.deptid = e.deptid AND d.building IN(’B2’)\nUNION ALL\nSELECT eid FROM Employee WHERE deptid = ’D002’\nEXCEPT ALL\nSELECT eid FROM Employee WHERE deptid = ’D002’;\n\n# select e.eid from Employee e, Dept d where same dept id and building b2\n\ncp_df = pd.merge(employee, department, on='deptid', how='inner')\n\ncp_df_3 = cp_df[cp_df['building'] == 'B2']\ndisplay(cp_df_3)\n\n\n\n\n\n\n\n\neid\nename\nsalary\ndeptid\ndname\nbuilding\n\n\n\n\n1\nE002\nWilliam\n45000\nD002\nMarketing\nB2\n\n\n2\nE005\nSyed\n30000\nD002\nMarketing\nB2\n\n\n\n\n\n\n\n\npart3_1 = cp_df_3[['eid']]\npart3_1\n\n\n\n\n\n\n\n\neid\n\n\n\n\n1\nE002\n\n\n2\nE005\n\n\n\n\n\n\n\n\ndf3_2 = employee[(employee['deptid'] == 'D002')]\ndisplay(df3_2)\n\n\n\n\n\n\n\n\neid\nename\nsalary\ndeptid\n\n\n\n\n1\nE002\nWilliam\n45000\nD002\n\n\n4\nE005\nSyed\n30000\nD002\n\n\n\n\n\n\n\n\npart3_2 = df3_2[['eid']]\npart3_2\n\n\n\n\n\n\n\n\neid\n\n\n\n\n1\nE002\n\n\n4\nE005"
  },
  {
    "objectID": "week-2/2.5.html#question-4",
    "href": "week-2/2.5.html#question-4",
    "title": "DBMS",
    "section": "Question 4",
    "text": "Question 4\nHow many rows will be printed as the result of the following query?\nSELECT MIN(salary),deptid FROM Employee GROUP BY deptid\nINTERSECT\nSELECT e1.salary,e1.deptid FROM Employee e1, Employee e2\nWHERE e1.salary &gt; e2.salary;\n\ne1 = employee\ne2 = employee\ncp_df_4 = pd.merge"
  },
  {
    "objectID": "week-3/w3.html#select-distinct",
    "href": "week-3/w3.html#select-distinct",
    "title": "DBMS - Week 3",
    "section": "Select distinct",
    "text": "Select distinct\n\nFrom the classroom relation, find the names of buildings in which every individual classroom has capacity less than 100 (removing the duplicates).\n\n\n\n * sqlite:///univdb-sqlite.db\nDone.\n\n\n\n\n\nbuilding\nroom_number\ncapacity\n\n\n\n\nPackard\n101\n500\n\n\nPainter\n514\n10\n\n\nTaylor\n3128\n70\n\n\nWatson\n100\n30\n\n\nWatson\n120\n50\n\n\n\n\n\n\n\n('Packard', '101', 500)\n('Painter', '514', 10)\n('Taylor', '3128', 70)\n('Watson', '100', 30)\n('Watson', '120', 50)\n\n\nQuery:\n\n\n * sqlite:///univdb-sqlite.db\nDone.\n\n\n\n\n\nbuilding\n\n\n\n\nPainter\n\n\nTaylor\n\n\nWatson\n\n\n\n\n\n\n\n * sqlite:///univdb-sqlite.db\nDone.\n\n\n\n\n\n\n\nbuilding\n\n\n\n\nPainter\n\n\nTaylor\n\n\nWatson\n\n\n\n\n\n\n\n('Painter',)\n('Taylor',)\n('Watson',)"
  },
  {
    "objectID": "week-3/w3.html#select-all",
    "href": "week-3/w3.html#select-all",
    "title": "DBMS - Week 3",
    "section": "Select all",
    "text": "Select all\n\nFrom the classroom relation, find the names of buildings in which every individual classroom has a capacity of less than 100 (without removing the duplicates).\n\n\n\n * sqlite:///univdb-sqlite.db\nDone.\n\n\n\n\n\nbuilding\nroom_number\ncapacity\n\n\n\n\nPackard\n101\n500\n\n\nPainter\n514\n10\n\n\nTaylor\n3128\n70\n\n\nWatson\n100\n30\n\n\nWatson\n120\n50\n\n\n\n\n\nQuery:\n\n\n * sqlite:///univdb-sqlite.db\nDone.\n\n\n\n\n\nbuilding\n\n\n\n\nPainter\n\n\nTaylor\n\n\nWatson\n\n\nWatson\n\n\n\n\n\n\nNote that duplicate retention is the default and hence it is a common practice to skip all immediately after select."
  },
  {
    "objectID": "week-3/w3.html#cartesian-product",
    "href": "week-3/w3.html#cartesian-product",
    "title": "DBMS - Week 3",
    "section": "Cartesian product",
    "text": "Cartesian product\n\n\n * sqlite:///univdb-sqlite.db\nDone.\n\n\n\n\n\ndept_name\nbuilding\nbudget\n\n\n\n\nBiology\nWatson\n90000\n\n\nComp. Sci.\nTaylor\n100000\n\n\nElec. Eng.\nTaylor\n85000\n\n\nFinance\nPainter\n120000\n\n\nHistory\nPainter\n50000\n\n\nMusic\nPackard\n80000\n\n\nPhysics\nWatson\n70000\n\n\n\n\n\n\n\n * sqlite:///univdb-sqlite.db\nDone.\n\n\n\n\n\nID\nname\ndept_name\ntot_cred\n\n\n\n\n00128\nZhang\nComp. Sci.\n102\n\n\n12345\nShankar\nComp. Sci.\n32\n\n\n19991\nBrandt\nHistory\n80\n\n\n23121\nChavez\nFinance\n110\n\n\n44553\nPeltier\nPhysics\n56\n\n\n45678\nLevy\nPhysics\n46\n\n\n54321\nWilliams\nComp. Sci.\n54\n\n\n55739\nSanchez\nMusic\n38\n\n\n70557\nSnow\nPhysics\n0\n\n\n76543\nBrown\nComp. Sci.\n58\n\n\n76653\nAoi\nElec. Eng.\n60\n\n\n98765\nBourikas\nElec. Eng.\n98\n\n\n98988\nTanaka\nBiology\n120\n\n\n\n\n\n\nFind the list of all students of departments which have a budget &lt; $0.1million\n\n\n\n * sqlite:///univdb-sqlite.db\nDone.\n\n\n\n\n\nname\nbudget\n\n\n\n\nBrandt\n50000\n\n\nPeltier\n70000\n\n\nLevy\n70000\n\n\nSanchez\n80000\n\n\nSnow\n70000\n\n\nAoi\n85000\n\n\nBourikas\n85000\n\n\nTanaka\n90000\n\n\n\n\n\n\nThe above query first generates every possible student-department pair, which is the Cartesian product of the student and department relations. Then, it filters out all the rows with student.dept_name = department.dept_name and department.budget &lt; 100000.\nThe common attribute dept_name in the resulting table is renamed using the relation name - student.dept_name and department.dept_name."
  },
  {
    "objectID": "week-3/w3.html#rename-as-operation",
    "href": "week-3/w3.html#rename-as-operation",
    "title": "DBMS - Week 3",
    "section": "Rename AS Operation",
    "text": "Rename AS Operation\n\nThe same query above can be framed by renaming the tables as follows:\n\n\n\n * sqlite:///univdb-sqlite.db\nDone.\n\n\n\n\n\nstudentname\ndeptbudget\n\n\n\n\nBrandt\n50000\n\n\nPeltier\n70000\n\n\nLevy\n70000\n\n\nSanchez\n80000\n\n\nSnow\n70000\n\n\nAoi\n85000\n\n\nBourikas\n85000\n\n\nTanaka\n90000\n\n\n\n\n\n\nThe above query renames the relations student and department as S and D respectively\nIt also displays the attribute name as StudentName and budget as DeptBudget\nNote that the budget attribute does not have any prefix because it occurs only in the department relation."
  },
  {
    "objectID": "week-3/w3.html#where-and-and-or",
    "href": "week-3/w3.html#where-and-and-or",
    "title": "DBMS - Week 3",
    "section": "Where: AND and OR",
    "text": "Where: AND and OR\n\nFrom the instructor and department relations, find out the names of all instructors whose department is Finance or whose department is in any of the following buildings: Watson, Taylor.\n\n\n\n * sqlite:///univdb-sqlite.db\nDone.\n\n\n\n\n\nID\nname\ndept_name\nsalary\n\n\n\n\n10101\nSrinivasan\nComp. Sci.\n65000\n\n\n12121\nWu\nFinance\n90000\n\n\n15151\nMozart\nMusic\n40000\n\n\n22222\nEinstein\nPhysics\n95000\n\n\n32343\nEl Said\nHistory\n60000\n\n\n33456\nGold\nPhysics\n87000\n\n\n45565\nKatz\nComp. Sci.\n75000\n\n\n58583\nCalifieri\nHistory\n62000\n\n\n76543\nSingh\nFinance\n80000\n\n\n76766\nCrick\nBiology\n72000\n\n\n83821\nBrandt\nComp. Sci.\n92000\n\n\n98345\nKim\nElec. Eng.\n80000\n\n\n\n\n\n\n\n * sqlite:///univdb-sqlite.db\nDone.\n\n\n\n\n\ndept_name\nbuilding\nbudget\n\n\n\n\nBiology\nWatson\n90000\n\n\nComp. Sci.\nTaylor\n100000\n\n\nElec. Eng.\nTaylor\n85000\n\n\nFinance\nPainter\n120000\n\n\nHistory\nPainter\n50000\n\n\nMusic\nPackard\n80000\n\n\nPhysics\nWatson\n70000\n\n\n\n\n\nQuery:\n\n\n * sqlite:///univdb-sqlite.db\nDone.\n\n\n\n\n\nname\n\n\n\n\nSrinivasan\n\n\nWu\n\n\nEinstein\n\n\nGold\n\n\nKatz\n\n\nSingh\n\n\nCrick\n\n\nBrandt\n\n\nKim"
  },
  {
    "objectID": "week-3/w3.html#string-operations",
    "href": "week-3/w3.html#string-operations",
    "title": "DBMS - Week 3",
    "section": "String Operations",
    "text": "String Operations\n\n\n * sqlite:///univdb-sqlite.db\nDone.\n\n\n\n\n\ncourse_id\ntitle\ndept_name\ncredits\n\n\n\n\nBIO-101\nIntro. to Biology\nBiology\n4\n\n\nBIO-301\nGenetics\nBiology\n4\n\n\nBIO-399\nComputational Biology\nBiology\n3\n\n\nCS-101\nIntro. to Computer Science\nComp. Sci.\n4\n\n\nCS-190\nGame Design\nComp. Sci.\n4\n\n\nCS-315\nRobotics\nComp. Sci.\n3\n\n\nCS-319\nImage Processing\nComp. Sci.\n3\n\n\nCS-347\nDatabase System Concepts\nComp. Sci.\n3\n\n\nEE-181\nIntro. to Digital Systems\nElec. Eng.\n3\n\n\nFIN-201\nInvestment Banking\nFinance\n3\n\n\nHIS-351\nWorld History\nHistory\n3\n\n\nMU-199\nMusic Video Production\nMusic\n3\n\n\nPHY-101\nPhysical Principles\nPhysics\n4\n\n\n\n\n\n\nFrom the course relation, find the titles of all courses whose course_id has three alphabets indicating the department.\n\n\n\n * sqlite:///univdb-sqlite.db\nDone.\n\n\n\n\n\ntitle\n\n\n\n\nIntro. to Biology\n\n\nGenetics\n\n\nComputational Biology\n\n\nInvestment Banking\n\n\nWorld History\n\n\nPhysical Principles\n\n\n\n\n\n\nThe course_id of each department either has 2 or 3 alphabets in the beginning, followed by a hypher and then followed by 3 digits. The above query returns the names of all courses whose course_id has 3 alphabets in the beginning."
  },
  {
    "objectID": "week-3/w3.html#order-by",
    "href": "week-3/w3.html#order-by",
    "title": "DBMS - Week 3",
    "section": "Order By",
    "text": "Order By\n\n\n * sqlite:///univdb-sqlite.db\nDone.\n\n\n\n\n\nID\nname\ndept_name\ntot_cred\n\n\n\n\n00128\nZhang\nComp. Sci.\n102\n\n\n12345\nShankar\nComp. Sci.\n32\n\n\n19991\nBrandt\nHistory\n80\n\n\n23121\nChavez\nFinance\n110\n\n\n44553\nPeltier\nPhysics\n56\n\n\n45678\nLevy\nPhysics\n46\n\n\n54321\nWilliams\nComp. Sci.\n54\n\n\n55739\nSanchez\nMusic\n38\n\n\n70557\nSnow\nPhysics\n0\n\n\n76543\nBrown\nComp. Sci.\n58\n\n\n76653\nAoi\nElec. Eng.\n60\n\n\n98765\nBourikas\nElec. Eng.\n98\n\n\n98988\nTanaka\nBiology\n120\n\n\n\n\n\n\nFrom the student relation in the figure, obtain the list of all students in alphabetic order of departments and within each department, in decreasing order of total credits.\n\n\n\n * sqlite:///univdb-sqlite.db\nDone.\n\n\n\n\n\nname\ndept_name\ntot_cred\n\n\n\n\nTanaka\nBiology\n120\n\n\nZhang\nComp. Sci.\n102\n\n\nBrown\nComp. Sci.\n58\n\n\nWilliams\nComp. Sci.\n54\n\n\nShankar\nComp. Sci.\n32\n\n\nBourikas\nElec. Eng.\n98\n\n\nAoi\nElec. Eng.\n60\n\n\nChavez\nFinance\n110\n\n\nBrandt\nHistory\n80\n\n\nSanchez\nMusic\n38\n\n\nPeltier\nPhysics\n56\n\n\nLevy\nPhysics\n46\n\n\nSnow\nPhysics\n0\n\n\n\n\n\n\nThe list is first sorted in alphabetic order of dept name.\nWithin each dept, it is sorted in decreasing order of total credits."
  },
  {
    "objectID": "week-3/w3.html#in-operator",
    "href": "week-3/w3.html#in-operator",
    "title": "DBMS - Week 3",
    "section": "In Operator",
    "text": "In Operator\n\n\n * sqlite:///univdb-sqlite.db\nDone.\n\n\n\n\n\nID\ncourse_id\nsec_id\nsemester\nyear\n\n\n\n\n10101\nCS-101\n1\nFall\n2017\n\n\n10101\nCS-315\n1\nSpring\n2018\n\n\n10101\nCS-347\n1\nFall\n2017\n\n\n12121\nFIN-201\n1\nSpring\n2018\n\n\n15151\nMU-199\n1\nSpring\n2018\n\n\n22222\nPHY-101\n1\nFall\n2017\n\n\n32343\nHIS-351\n1\nSpring\n2018\n\n\n45565\nCS-101\n1\nSpring\n2018\n\n\n45565\nCS-319\n1\nSpring\n2018\n\n\n76766\nBIO-101\n1\nSummer\n2017\n\n\n76766\nBIO-301\n1\nSummer\n2018\n\n\n83821\nCS-190\n1\nSpring\n2017\n\n\n83821\nCS-190\n2\nSpring\n2017\n\n\n83821\nCS-319\n2\nSpring\n2018\n\n\n98345\nEE-181\n1\nSpring\n2017\n\n\n\n\n\n\nFrom the teaches relation, find the IDs of all courses taught in the Fall or Spring of 2018.\n\n\n\n * sqlite:///univdb-sqlite.db\nDone.\n\n\n\n\n\ncourse_id\n\n\n\n\nCS-315\n\n\nFIN-201\n\n\nMU-199\n\n\nHIS-351\n\n\nCS-101\n\n\nCS-319\n\n\nCS-319\n\n\n\n\n\n\nNote: We can use distinct to remove duplicates.\n\n\n\n * sqlite:///univdb-sqlite.db\nDone.\n\n\n\n\n\ncourse_id\n\n\n\n\nCS-315\n\n\nFIN-201\n\n\nMU-199\n\n\nHIS-351\n\n\nCS-101\n\n\nCS-319"
  },
  {
    "objectID": "week-3/w3.html#set-operations-2-intersect",
    "href": "week-3/w3.html#set-operations-2-intersect",
    "title": "DBMS - Week 3",
    "section": "Set Operations (2): intersect",
    "text": "Set Operations (2): intersect\n\n\n * sqlite:///univdb-sqlite.db\nDone.\n\n\n\n\n\nID\nname\ndept_name\nsalary\n\n\n\n\n10101\nSrinivasan\nComp. Sci.\n65000\n\n\n12121\nWu\nFinance\n90000\n\n\n15151\nMozart\nMusic\n40000\n\n\n22222\nEinstein\nPhysics\n95000\n\n\n32343\nEl Said\nHistory\n60000\n\n\n33456\nGold\nPhysics\n87000\n\n\n45565\nKatz\nComp. Sci.\n75000\n\n\n58583\nCalifieri\nHistory\n62000\n\n\n76543\nSingh\nFinance\n80000\n\n\n76766\nCrick\nBiology\n72000\n\n\n83821\nBrandt\nComp. Sci.\n92000\n\n\n98345\nKim\nElec. Eng.\n80000\n\n\n\n\n\n\nFrom the instructor relation, find the names of all instructors who taught in either the Computer Science department or the Finance department and whose salary is &lt; 80000.\n\n\n\n * sqlite:///univdb-sqlite.db\nDone.\n\n\n\n\n\nname\n\n\n\n\nKatz\n\n\nSrinivasan\n\n\n\n\n\n\n\n * sqlite:///univdb-sqlite.db\nDone.\n\n\n\n\n\nname\n\n\n\n\nSrinivasan\n\n\nKatz"
  },
  {
    "objectID": "week-3/w3.html#set-operations-3-except",
    "href": "week-3/w3.html#set-operations-3-except",
    "title": "DBMS - Week 3",
    "section": "Set Operations (3): except",
    "text": "Set Operations (3): except\n\nFrom the instructor relation, find the names of all instructors who taught in the Computer Science department or the Finance department and whose salary is either &gt;= 90000 or &lt;= 70000.\n\n\n\n * sqlite:///univdb-sqlite.db\nDone.\n\n\n\n\n\nname\n\n\n\n\nBrandt\n\n\nSrinivasan\n\n\nWu\n\n\n\n\n\n\n\n * sqlite:///univdb-sqlite.db\nDone.\n\n\n\n\n\nname\n\n\n\n\nSrinivasan\n\n\nWu\n\n\nBrandt"
  },
  {
    "objectID": "week-3/w3.html#aggregate-functions-avg",
    "href": "week-3/w3.html#aggregate-functions-avg",
    "title": "DBMS - Week 3",
    "section": "Aggregate functions: avg",
    "text": "Aggregate functions: avg\n\n\n * sqlite:///univdb-sqlite.db\nDone.\n\n\n\n\n\nbuilding\nroom_number\ncapacity\n\n\n\n\nPackard\n101\n500\n\n\nPainter\n514\n10\n\n\nTaylor\n3128\n70\n\n\nWatson\n100\n30\n\n\nWatson\n120\n50\n\n\n\n\n\n\nFrom the classroom relation, find the names and the average capacity of each building whose average capacity is greater than 25.\n\n\n\n * sqlite:///univdb-sqlite.db\nDone.\n\n\n\n\n\nbuilding\nAVG(capacity)\n\n\n\n\nPackard\n500.0\n\n\nTaylor\n70.0\n\n\nWatson\n40.0"
  },
  {
    "objectID": "week-3/w3.html#aggregate-functions-2-min",
    "href": "week-3/w3.html#aggregate-functions-2-min",
    "title": "DBMS - Week 3",
    "section": "Aggregate functions (2): min",
    "text": "Aggregate functions (2): min\n\n\n * sqlite:///univdb-sqlite.db\nDone.\n\n\n\n\n\nID\nname\ndept_name\nsalary\n\n\n\n\n10101\nSrinivasan\nComp. Sci.\n65000\n\n\n12121\nWu\nFinance\n90000\n\n\n15151\nMozart\nMusic\n40000\n\n\n22222\nEinstein\nPhysics\n95000\n\n\n32343\nEl Said\nHistory\n60000\n\n\n33456\nGold\nPhysics\n87000\n\n\n45565\nKatz\nComp. Sci.\n75000\n\n\n58583\nCalifieri\nHistory\n62000\n\n\n76543\nSingh\nFinance\n80000\n\n\n76766\nCrick\nBiology\n72000\n\n\n83821\nBrandt\nComp. Sci.\n92000\n\n\n98345\nKim\nElec. Eng.\n80000\n\n\n\n\n\n\nFrom the instructor relation, find the least salary drawn by any instructor among all the instructors.\n\n\n\n * sqlite:///univdb-sqlite.db\nDone.\n\n\n\n\n\nleast_salary\n\n\n\n\n40000"
  },
  {
    "objectID": "week-3/w3.html#aggregate-functions-3-max",
    "href": "week-3/w3.html#aggregate-functions-3-max",
    "title": "DBMS - Week 3",
    "section": "Aggregate functions (3): max",
    "text": "Aggregate functions (3): max\n\n\n * sqlite:///univdb-sqlite.db\nDone.\n\n\n\n\n\nID\nname\ndept_name\ntot_cred\n\n\n\n\n00128\nZhang\nComp. Sci.\n102\n\n\n12345\nShankar\nComp. Sci.\n32\n\n\n19991\nBrandt\nHistory\n80\n\n\n23121\nChavez\nFinance\n110\n\n\n44553\nPeltier\nPhysics\n56\n\n\n45678\nLevy\nPhysics\n46\n\n\n54321\nWilliams\nComp. Sci.\n54\n\n\n55739\nSanchez\nMusic\n38\n\n\n70557\nSnow\nPhysics\n0\n\n\n76543\nBrown\nComp. Sci.\n58\n\n\n76653\nAoi\nElec. Eng.\n60\n\n\n98765\nBourikas\nElec. Eng.\n98\n\n\n98988\nTanaka\nBiology\n120\n\n\n\n\n\n\nFrom the student relation, find the maximum credits obtained by any student among all the students.\n\n\n\n * sqlite:///univdb-sqlite.db\nDone.\n\n\n\n\n\nmax_credits\n\n\n\n\n120"
  },
  {
    "objectID": "week-3/w3.html#aggregate-functions-4-count",
    "href": "week-3/w3.html#aggregate-functions-4-count",
    "title": "DBMS - Week 3",
    "section": "Aggregate functions (4): count",
    "text": "Aggregate functions (4): count\n\n\n * sqlite:///univdb-sqlite.db\nDone.\n\n\n\n\n\ncourse_id\nsec_id\nsemester\nyear\nbuilding\nroom_number\ntime_slot_id\n\n\n\n\nBIO-101\n1\nSummer\n2017\nPainter\n514\nB\n\n\nBIO-301\n1\nSummer\n2018\nPainter\n514\nA\n\n\nCS-101\n1\nFall\n2017\nPackard\n101\nH\n\n\nCS-101\n1\nSpring\n2018\nPackard\n101\nF\n\n\nCS-190\n1\nSpring\n2017\nTaylor\n3128\nE\n\n\nCS-190\n2\nSpring\n2017\nTaylor\n3128\nA\n\n\nCS-315\n1\nSpring\n2018\nWatson\n120\nD\n\n\nCS-319\n1\nSpring\n2018\nWatson\n100\nB\n\n\nCS-319\n2\nSpring\n2018\nTaylor\n3128\nC\n\n\nCS-347\n1\nFall\n2017\nTaylor\n3128\nA\n\n\nEE-181\n1\nSpring\n2017\nTaylor\n3128\nC\n\n\nFIN-201\n1\nSpring\n2018\nPackard\n101\nB\n\n\nHIS-351\n1\nSpring\n2018\nPainter\n514\nC\n\n\nMU-199\n1\nSpring\n2018\nPackard\n101\nD\n\n\nPHY-101\n1\nFall\n2017\nWatson\n100\nA\n\n\n\n\n\n\nFrom the section relation, find the number of courses run in each building.\n\n\n\n * sqlite:///univdb-sqlite.db\nDone.\n\n\n\n\n\nbuilding\ncourse_count\n\n\n\n\nPackard\n4\n\n\nPainter\n3\n\n\nTaylor\n5\n\n\nWatson\n3"
  },
  {
    "objectID": "week-3/w3.html#aggregate-functions-5-sum",
    "href": "week-3/w3.html#aggregate-functions-5-sum",
    "title": "DBMS - Week 3",
    "section": "Aggregate functions (5): sum",
    "text": "Aggregate functions (5): sum\n\n\n * sqlite:///univdb-sqlite.db\nDone.\n\n\n\n\n\ncourse_id\ntitle\ndept_name\ncredits\n\n\n\n\nBIO-101\nIntro. to Biology\nBiology\n4\n\n\nBIO-301\nGenetics\nBiology\n4\n\n\nBIO-399\nComputational Biology\nBiology\n3\n\n\nCS-101\nIntro. to Computer Science\nComp. Sci.\n4\n\n\nCS-190\nGame Design\nComp. Sci.\n4\n\n\nCS-315\nRobotics\nComp. Sci.\n3\n\n\nCS-319\nImage Processing\nComp. Sci.\n3\n\n\nCS-347\nDatabase System Concepts\nComp. Sci.\n3\n\n\nEE-181\nIntro. to Digital Systems\nElec. Eng.\n3\n\n\nFIN-201\nInvestment Banking\nFinance\n3\n\n\nHIS-351\nWorld History\nHistory\n3\n\n\nMU-199\nMusic Video Production\nMusic\n3\n\n\nPHY-101\nPhysical Principles\nPhysics\n4\n\n\n\n\n\n\nFrom the course relation, find the total credits offered by each department.\n\n\n\n * sqlite:///univdb-sqlite.db\nDone.\n\n\n\n\n\ndept_name\nsum_credits\n\n\n\n\nBiology\n11\n\n\nComp. Sci.\n17\n\n\nElec. Eng.\n3\n\n\nFinance\n3\n\n\nHistory\n3\n\n\nMusic\n3\n\n\nPhysics\n4"
  },
  {
    "objectID": "week-3/w3.html#nested-subqueries",
    "href": "week-3/w3.html#nested-subqueries",
    "title": "DBMS - Week 3",
    "section": "Nested Subqueries",
    "text": "Nested Subqueries\n\nSQL provides a mechanism for nesting of subqueries\nA subquery is a select-from-where expression that is nested within another query\nThe nesting can be done in the following SQL query \\[ \\text{select } A_1, A_2, ..., A_n \\] \\[ \\text{from } r_1, r_2, ..., r_m \\] \\[ \\text{where } P \\] as follows:\n\n\\(A_i\\) can be a subquery that generates a single value\n\\(r_i\\) can be replaced by any valid subquery\n\\(P\\) can be replaced with an expressionm of the form:\n\\(B \\text{ &lt;operation&gt;}\\) (subquery)\nwhere \\(B\\) is an attribute and \\(\\text{&lt;operation&gt;}\\) to be defined later."
  },
  {
    "objectID": "week-3/w3.html#subqueries-in-the-where-clause",
    "href": "week-3/w3.html#subqueries-in-the-where-clause",
    "title": "DBMS - Week 3",
    "section": "Subqueries in the Where Clause",
    "text": "Subqueries in the Where Clause\n\nTypical use of subqueries is to perform tests:\n\nFor set membership\nFor set comparisons\nFor set cardinality"
  },
  {
    "objectID": "week-3/w3.html#set-membership",
    "href": "week-3/w3.html#set-membership",
    "title": "DBMS - Week 3",
    "section": "Set Membership",
    "text": "Set Membership\n\nFind courses offered in Fall 2009 and in Spring 2010 (intersect example)\n\nselect distinct course_id\nfrom section\nwhere semester = 'Fall' and year = 2017 and\ncourse_id in (select course_id\n              from section\n              where semester = 'Spring' and year = 2018);\n\n\nCS-101\n\n\n\nFind courses offered in Fall 2009 but not in Spring 2010 (except example)\n\nselect distinct course_id\nfrom section\nwhere semester = 'Fall' and year = 2017 and\ncourse_id not in (select course_id\n              from section\n              where semester = 'Spring' and year = 2018);\n\n\nCS-347\nPHY-101\n\n\n\n\n * sqlite:///univdb-sqlite.db\nDone.\n\n\n\n\n\ncourse_id\n\n\n\n\nCS-347\n\n\nPHY-101"
  },
  {
    "objectID": "week-3/w3.html#set-membership-2",
    "href": "week-3/w3.html#set-membership-2",
    "title": "DBMS - Week 3",
    "section": "Set Membership (2)",
    "text": "Set Membership (2)\n\nFind the total number of (distinct) students who have taken course sections taught by instructor with ID ‘10101’\n\nselect count(distinct ID)\nfrom takes\nwhere (course_id, sec_id, semester, year) in\n    (select course_id, sec_id, semester, year\n    from teaches\n    where teaches.ID = '10101');\n\n\n6\n\n\n\n\n * sqlite:///univdb-sqlite.db\nDone.\n\n\n\n\n\ncount(distinct ID)\n\n\n\n\n6\n\n\n\n\n\n\n\n * sqlite:///univdb-sqlite.db\nDone.\n\n\n\n\n\n\n\ncount(distinct ID)\n\n\n\n\n6"
  },
  {
    "objectID": "week-3/w3.html#set-comparison---some-clause",
    "href": "week-3/w3.html#set-comparison---some-clause",
    "title": "DBMS - Week 3",
    "section": "Set Comparison - “some” Clause",
    "text": "Set Comparison - “some” Clause\n\nFind the names of instructors with salary greater than that of some (at least one) instructor in the Biology department\n\nselect distinct T.name\nfrom instructor T, instructor S\nwhere T.salary &gt; S.salary and S.dept_name = 'Biology';\n\nSame query using some clause\n\nselect name\nfrom instructor\nwhere salary &gt; some (select salary\n                    from instructor\n                    where dept_name = 'Biology');"
  },
  {
    "objectID": "week-3/w3.html#definition-of-some-clause",
    "href": "week-3/w3.html#definition-of-some-clause",
    "title": "DBMS - Week 3",
    "section": "Definition of “some” Clause",
    "text": "Definition of “some” Clause\n\nF \\(\\text{&lt;comp&gt;}\\) some \\(r \\Leftrightarrow \\exists t \\in r\\) such that (F \\(\\text{&lt;comp&gt;}\\) t) where \\(\\text{&lt;comp&gt;}\\) can be: \\(&lt;\\), \\(\\leq\\), \\(&gt;\\), \\(\\geq\\), \\(=\\), \\(\\neq\\)\nsome represents existential quantification\n\n(5 &lt; some {0, 5, 6}) = True\n(5 &lt; some {0, 5}) = False\n(5 = some {0, 5}) = True\n(5 \\(\\neq\\) some {0, 5}) = False\n(= some) \\(\\equiv\\) in\nHowever, (\\(\\neq\\) some) \\(\\equiv\\) not in"
  },
  {
    "objectID": "week-3/w3.html#set-comparison---all-clause",
    "href": "week-3/w3.html#set-comparison---all-clause",
    "title": "DBMS - Week 3",
    "section": "Set Comparison - “all” Clause",
    "text": "Set Comparison - “all” Clause\n\nFind the names of all instructors with salary greater than that of all instructors in the Biology department\n\nselect name\nfrom instructor\nwhere salary &gt; all (select salary\n                    from instructor\n                    where dept_name = 'Biology');"
  },
  {
    "objectID": "week-3/w3.html#definition-of-all-clause",
    "href": "week-3/w3.html#definition-of-all-clause",
    "title": "DBMS - Week 3",
    "section": "Definition of “all” Clause",
    "text": "Definition of “all” Clause\n\nF \\(\\text{&lt;comp&gt;}\\) all \\(r \\Leftrightarrow \\forall t \\in r\\) such that (F \\(\\text{&lt;comp&gt;}\\) t) where \\(\\text{&lt;comp&gt;}\\) can be: \\(&lt;\\), \\(\\leq\\), \\(&gt;\\), \\(\\geq\\), \\(=\\), \\(\\neq\\)\nall represents universal quantification\n\n(5 &lt; all {0, 5, 6}) = False\n(5 &lt; all {6, 10}) = True\n(5 = all {0, 5}) = False\n(5 \\(\\neq\\) all {4, 6}) = True\n(\\(\\neq\\) all) \\(\\equiv\\) not in\nHowever, (\\(=\\) all) !\\(\\equiv\\) in"
  },
  {
    "objectID": "week-3/w3.html#test-for-empty-relations-exists",
    "href": "week-3/w3.html#test-for-empty-relations-exists",
    "title": "DBMS - Week 3",
    "section": "Test for Empty Relations: “exists”",
    "text": "Test for Empty Relations: “exists”\n\nThe exists constucrt returns the value true if the argument subquery is non-empty\n\nexists $r r $\nnot exists $r r = $"
  },
  {
    "objectID": "week-3/w3.html#use-of-exists-clause",
    "href": "week-3/w3.html#use-of-exists-clause",
    "title": "DBMS - Week 3",
    "section": "Use of “exists” clause",
    "text": "Use of “exists” clause\n\nYet another way of specifying the query “Find all courses taught in both the Fall 2009 semester and in the Spring 2010 semester”\n\nselect course_id\nfrom section as S\nwhere semester = 'Fall' and year = 2009 and\nexists (select *\n        from section as T\n        where semester = 'Spring' and year = 2010 and\n        S.course_id = T.course_id);\n\nCorrelation name - variable S in the outer query\nCorrelated subquery - subquery that references the correlation name (the inner query)"
  },
  {
    "objectID": "week-3/w3.html#use-of-not-exists-clause",
    "href": "week-3/w3.html#use-of-not-exists-clause",
    "title": "DBMS - Week 3",
    "section": "Use of “not exists” clause",
    "text": "Use of “not exists” clause\n\nFind all students who have taken all courses offered in the Biology department.\n\nselect distinct S.ID, S.name\nfrom student as S\nwhere not exists ((select course_id\n                    from course\n                    where dept_name = 'Biology')\n                    except\n                    (select T.course_id\n                    from takes as T\n                    where S.ID = T.ID));\n\nFirst nested query lists all courses offered in Biology\nSecond nested query lists all courses a particular student took\nNote: \\(X-Y = \\emptyset \\Leftrightarrow X \\subseteq Y\\)\nNote: Cannot write this query using \\(=\\) all and its variants"
  },
  {
    "objectID": "week-3/w3.html#test-for-absence-of-duplicate-tuples-unique",
    "href": "week-3/w3.html#test-for-absence-of-duplicate-tuples-unique",
    "title": "DBMS - Week 3",
    "section": "Test for Absence of Duplicate Tuples: “unique”",
    "text": "Test for Absence of Duplicate Tuples: “unique”\n\nThe unique construct tests whether a subquery has any duplicate tuples in its result\nThe unique construct evaluates to true if the subquery result has no duplicate tuples\nFind all courses that were offered at most once in 2009\n\nselect T.course_id\nfrom course as T\nwhere unique (select R.course_id\n              from section as R\n              where R.course_id = T.course_id\n              and R.year = 2009);"
  },
  {
    "objectID": "week-3/w3.html#subqueries-in-the-from-clause",
    "href": "week-3/w3.html#subqueries-in-the-from-clause",
    "title": "DBMS - Week 3",
    "section": "Subqueries in the From Clause",
    "text": "Subqueries in the From Clause\n\nSQL allows a subquery expression to be used in the from clause\nFind the average instructors’ salaries of those departments where the average salary is greater than $42,000\n\nselect dept_name, avg_salary\nfrom (select dept_name, avg(salary) as avg_salary\n      from instructor\n      group by dept_name)\nwhere avg_salary &gt; 42000;\n\nNote that we do not need to use the having clause\nAnother way to write the same query is:\n\nselect dept_name, avg_salary\nfrom (select dept_name, avg(salary)\n      from instructor\n      group by dept_name) as dept_avg (dept_name, avg_salary)\nwhere avg_salary &gt; 42000;"
  },
  {
    "objectID": "week-3/w3.html#with-clause",
    "href": "week-3/w3.html#with-clause",
    "title": "DBMS - Week 3",
    "section": "With Clause",
    "text": "With Clause\n\nThe with clause provides a way of defining a temporary relation whose definition is available only to the query in which the with clause occurs\nFind all departments with the maximum budget\n\nwith max_budget(value) as\n    (select max(budget)\n    from department)\nselect department.dept_name\nfrom department, max_budget\nwhere department.budget = max_budget.value;"
  },
  {
    "objectID": "week-3/w3.html#complex-queries-using-with-clause",
    "href": "week-3/w3.html#complex-queries-using-with-clause",
    "title": "DBMS - Week 3",
    "section": "Complex Queries using With Clause",
    "text": "Complex Queries using With Clause\n\nFind all departments where the total salary is greater than the average of the total salary at all departments\n\nwith dept_total(dept_name, value) as\n    select dept_name, sum(salary)\n    from instructor\n    group by dept_name,\ndept_total_avg(value) as\n    (select avg(value)\n    from dept_total)\nselect dept_name\nfrom dept_total, dept_total_avg\nwhere dept_total.value &gt; dept_total_avg.value;"
  },
  {
    "objectID": "week-3/w3.html#scalar-subquery",
    "href": "week-3/w3.html#scalar-subquery",
    "title": "DBMS - Week 3",
    "section": "Scalar Subquery",
    "text": "Scalar Subquery\n\nA scalar subquery is a subquery that returns a single value\nList all departments along with the number of instructors in each department\n\nselect dept_name,\n    (select count(*)\n    from instructor\n    where instructor.dept_name = department.dept_name)\n    as num_instructors\n    from department;\n\nRuntime error if the subquery returns more than one result tuple"
  },
  {
    "objectID": "week-3/w3.html#modification-of-the-database",
    "href": "week-3/w3.html#modification-of-the-database",
    "title": "DBMS - Week 3",
    "section": "Modification of the Database",
    "text": "Modification of the Database\n\nDeletion of tuples from a given relation\nInsertion of new tuples into a given relation\nUpdating of values in some tuples in a given relation"
  },
  {
    "objectID": "week-3/w3.html#deletion",
    "href": "week-3/w3.html#deletion",
    "title": "DBMS - Week 3",
    "section": "Deletion",
    "text": "Deletion\n\nDelete all instructors\ndelete from instructor;\nDelete all instructors from the Finance department\ndelete from instructor\nwhere dept_name = 'Finance';\nDelete all tuples in the instructor relation for those instructors associated with a department located in the Watson building\ndelete from instructor\nwhere dept_name in (select dept_name\n                    from department\n                    where building = 'Watson');\nDelete all instructors whose salary is less than the average of all instructors’ salaries\ndelete from instructor\nwhere salary &lt; (select avg(salary)\n                from instructor);\nProblem: as we delete tuples, the average salary changes\nSolution used in SQL:\n\nFirst compute avg(salary) and find all tuples to be deleted\nNext, delete all tuples found above (without recomputing avg or retesting the tuples)"
  },
  {
    "objectID": "week-3/w3.html#insertion",
    "href": "week-3/w3.html#insertion",
    "title": "DBMS - Week 3",
    "section": "Insertion",
    "text": "Insertion\n\nAdd a new typle to course\ninsert into course\nvalues ('CS-437', 'Database Systems', 'Comp. Sci.', 4);\nor equivalently\ninsert into course (course_id, title, dept_name, credits)\nvalues ('CS-437', 'Database Systems', 'Comp. Sci.', 4);\nAdd a new tuple to student with tot_creds set to null\ninsert into student\nvalues ('3003', 'Green', 'Finance', null);\nAdd all instructors to the student relation with tot_creds set to 0\ninsert into student\nselect ID, name, dept_name, 0\nfrom instructor;\nThe select-from-where statement is evaluated fully before any of its results are inserted into the relation\nOtherwise queries like\ninsert into table1 select * from table1;\nwould result in an infinite loop"
  },
  {
    "objectID": "week-3/w3.html#updates",
    "href": "week-3/w3.html#updates",
    "title": "DBMS - Week 3",
    "section": "Updates",
    "text": "Updates\n\nIncrease the salary of all instructors whose salary is over $100,00 by 3% and all others by 5%\n\nWith two update statements\nupdate instructor\n    set salary = salary * 1.03\n    where salary &gt; 100000;\nupdate instructor\n    set salary = salary * 1.05\n    where salary &lt;= 100000;\n\nThe order is important\nCan be done better using the case statement"
  },
  {
    "objectID": "week-3/w3.html#case-statement-for-conditional-updates",
    "href": "week-3/w3.html#case-statement-for-conditional-updates",
    "title": "DBMS - Week 3",
    "section": "Case Statement for Conditional Updates",
    "text": "Case Statement for Conditional Updates\n\nSame query as above using the case statement\nupdate instructor\n    set salary = case\n                when salary &lt;= 100000\n                then salary * 1.05\n                else salary * 1.03\n                end;"
  },
  {
    "objectID": "week-3/w3.html#updates-with-scalar-subqueries",
    "href": "week-3/w3.html#updates-with-scalar-subqueries",
    "title": "DBMS - Week 3",
    "section": "Updates with Scalar Subqueries",
    "text": "Updates with Scalar Subqueries\n\nRecompute and update tot_creds value for all students\nupdate student\nset tot_creds = (select sum(credits)\n                from takes, course\n                where takes.course_id = course.course_id and\n                S.ID = takes.ID and\n                takes.grade &lt;&gt; 'F' and\n                takes.grade is not null);\nSet tot_creds to null for all students who have not taken any courses\nInstead of sum(credits), use:\n    case\n    when sum(credits) is not null then sum(credits)\n    else 0\nend;"
  },
  {
    "objectID": "week-3/w3.html#join-relations",
    "href": "week-3/w3.html#join-relations",
    "title": "DBMS - Week 3",
    "section": "Join Relations",
    "text": "Join Relations\n\nJoin operations take two relations and return as result another relation\nA join operation is a Cartesian product which requires that tuples in the two relations match (under some condition)\nIt also specifies the attributes that are present in the result of the join\nThe join operations are typically used as subquery expressions in the from clause"
  },
  {
    "objectID": "week-3/w3.html#types-of-joins-between-relations",
    "href": "week-3/w3.html#types-of-joins-between-relations",
    "title": "DBMS - Week 3",
    "section": "Types of Joins between Relations",
    "text": "Types of Joins between Relations\n\nCross join\nInner join\n\nEqui-join\n\nNatural join\n\n\nOuter join\n\nLeft outer join\nRight outer join\nFull outer join\n\nSelf-join"
  },
  {
    "objectID": "week-3/w3.html#cross-join",
    "href": "week-3/w3.html#cross-join",
    "title": "DBMS - Week 3",
    "section": "Cross Join",
    "text": "Cross Join\n\nCROSS JOIN returns the Cartesian product of rows from tables in the join\n\nExplicit\nselect *\nfrom employee cross join department;\nImplicit\nselect *\nfrom employee, department;"
  },
  {
    "objectID": "week-3/w3.html#join-operations---example",
    "href": "week-3/w3.html#join-operations---example",
    "title": "DBMS - Week 3",
    "section": "Join Operations - Example",
    "text": "Join Operations - Example\n\nRelation course\n\n\n\n * sqlite:///univdb-sqlite.db\nDone.\n\n\n\n\n\n\n\ncourse_id\ntitle\ndept_name\ncredits\n\n\n\n\nBIO-301\nGenetics\nBiology\n4\n\n\nCS-190\nGame Design\nComp. Sci.\n4\n\n\nCS-315\nRobotics\nComp. Sci.\n3\n\n\n\n\n\n\n\n * sqlite:///univdb-sqlite.db\nDone.\n\n\n\nRelation prereq\n\n\n\n\n\n\ncourse_id\nprereq_id\n\n\n\n\nBIO-301\nBIO-101\n\n\nCS-190\nCS-101\n\n\nCS-347\nCS-101\n\n\n\n\n\n\nObserve that\n\nprereq information is missing for course CS-315, and\ncourse information is missing for CS-347"
  },
  {
    "objectID": "week-3/w3.html#inner-join",
    "href": "week-3/w3.html#inner-join",
    "title": "DBMS - Week 3",
    "section": "Inner Join",
    "text": "Inner Join\n\ncourse inner join prereq\n\n\n\n\n\n\ncourse_id\ntitle\ndept_name\ncredits\ncourse_id_1\nprereq_id\n\n\n\n\nBIO-301\nGenetics\nBiology\n4\nBIO-301\nBIO-101\n\n\nCS-190\nGame Design\nComp. Sci.\n4\nCS-190\nCS-101\n\n\n\n\n\n\nIf specified as natural, the join is on all attributes with the same name\n\n\n\n\n\n\ncourse_id\ntitle\ndept_name\ncredits\nprereq_id\n\n\n\n\nBIO-301\nGenetics\nBiology\n4\nBIO-101\n\n\nCS-190\nGame Design\nComp. Sci.\n4\nCS-101"
  },
  {
    "objectID": "week-3/w3.html#outer-join",
    "href": "week-3/w3.html#outer-join",
    "title": "DBMS - Week 3",
    "section": "Outer Join",
    "text": "Outer Join\n\nAn extension of the join operation that avoids loss of information\nComputes the join and then adds tuples from one relation that does not match tuples in the other relation to the result of the join\nUses null values, which is None in Python"
  },
  {
    "objectID": "week-3/w3.html#left-outer-join",
    "href": "week-3/w3.html#left-outer-join",
    "title": "DBMS - Week 3",
    "section": "Left Outer Join",
    "text": "Left Outer Join\n\ncourse left outer join prereq\n\n\n\n\n\n\ncourse_id\ntitle\ndept_name\ncredits\ncourse_id_1\nprereq_id\n\n\n\n\nBIO-301\nGenetics\nBiology\n4\nBIO-301\nBIO-101\n\n\nCS-190\nGame Design\nComp. Sci.\n4\nCS-190\nCS-101\n\n\nCS-315\nRobotics\nComp. Sci.\n3\nNone\nNone"
  },
  {
    "objectID": "week-3/w3.html#right-outer-join",
    "href": "week-3/w3.html#right-outer-join",
    "title": "DBMS - Week 3",
    "section": "Right Outer Join",
    "text": "Right Outer Join\n\ncourse right outer join prereq\n\n\n\n\n\n\ncourse_id\ntitle\ndept_name\ncredits\ncourse_id_1\nprereq_id\n\n\n\n\nBIO-301\nGenetics\nBiology\n4\nBIO-301\nBIO-101\n\n\nCS-190\nGame Design\nComp. Sci.\n4\nCS-190\nCS-101\n\n\nNone\nNone\nNone\nNone\nCS-347\nCS-101"
  },
  {
    "objectID": "week-3/w3.html#joined-relations",
    "href": "week-3/w3.html#joined-relations",
    "title": "DBMS - Week 3",
    "section": "Joined Relations",
    "text": "Joined Relations\n\nJoin operations take two relations and return as a result another relation\nThese additional operations are typically used as subquery expressions in the from clause\nJoin condition – defines which tuples in the two relations match, and what attributes are present in the result of the join\n  natural\n  on &lt;predicate&gt;\n  using (attr1, attr2, ...)\nJoin type – defines how tuples in each relation that do not match any tuple in the other relation (based on the join condition) are treated\n  inner join\n  left outer join\n  right outer join\n  full outer join"
  },
  {
    "objectID": "week-3/w3.html#full-outer-join",
    "href": "week-3/w3.html#full-outer-join",
    "title": "DBMS - Week 3",
    "section": "Full Outer Join",
    "text": "Full Outer Join\n\ncourse full outer join prereq\n\n\n\n\n\n\ncourse_id\ntitle\ndept_name\ncredits\ncourse_id_1\nprereq_id\n\n\n\n\nBIO-301\nGenetics\nBiology\n4\nBIO-301\nBIO-101\n\n\nCS-190\nGame Design\nComp. Sci.\n4\nCS-190\nCS-101\n\n\nCS-315\nRobotics\nComp. Sci.\n3\nNone\nNone\n\n\nNone\nNone\nNone\nNone\nCS-347\nCS-101"
  },
  {
    "objectID": "week-3/w3.html#joining-relations---examples",
    "href": "week-3/w3.html#joining-relations---examples",
    "title": "DBMS - Week 3",
    "section": "Joining Relations - Examples",
    "text": "Joining Relations - Examples\n\ncourse inner join prereq on\ncourse.course_id = prereq.course_id\n\n\n\n\n\n\ncourse_id\ntitle\ndept_name\ncredits\ncourse_id_1\nprereq_id\n\n\n\n\nBIO-301\nGenetics\nBiology\n4\nBIO-301\nBIO-101\n\n\nCS-190\nGame Design\nComp. Sci.\n4\nCS-190\nCS-101\n\n\n\n\n\n\nWhat is the difference between the above (equi-join) and the natural join?\ncourse left outer join prereq on\ncourse.course_id = prereq.course_id\n\n\n\n\n\n\ncourse_id\ntitle\ndept_name\ncredits\ncourse_id_1\nprereq_id\n\n\n\n\nBIO-301\nGenetics\nBiology\n4\nBIO-301\nBIO-101\n\n\nCS-190\nGame Design\nComp. Sci.\n4\nCS-190\nCS-101\n\n\nCS-315\nRobotics\nComp. Sci.\n3\nNone\nNone\n\n\n\n\n\n\ncourse natural right outer join prereq\n\n\n\n\n\n\ncourse_id\ntitle\ndept_name\ncredits\nprereq_id\n\n\n\n\nBIO-301\nGenetics\nBiology\n4\nBIO-101\n\n\nCS-190\nGame Design\nComp. Sci.\n4\nCS-101\n\n\nCS-347\nNone\nNone\nNone\nCS-101\n\n\n\n\n\n\ncourse full outer join prereq using (course_id)\n\n\n\n\n\n\ncourse_id\ntitle\ndept_name\ncredits\nprereq_id\n\n\n\n\nBIO-301\nGenetics\nBiology\n4\nBIO-101\n\n\nCS-190\nGame Design\nComp. Sci.\n4\nCS-101\n\n\nCS-315\nRobotics\nComp. Sci.\n3\nNone\n\n\nCS-347\nNone\nNone\nNone\nCS-101"
  },
  {
    "objectID": "week-3/w3.html#views",
    "href": "week-3/w3.html#views",
    "title": "DBMS - Week 3",
    "section": "Views",
    "text": "Views\n\nIn some cases, it is not desirable for all users to see the entire logical model (that is, all the actual relations stored in the database.)\nConsider a person who needs to know an instructors name and department, but not the salary. This person should see a relation described, in SQL, by:\nselect ID, name, dept_name\nfrom instructor;\nA view provides a mechanism to hide certain data from the view of certain users\nAny relation that is not of the conceptual model but is made visible to a user as a “virtual relation” is called a view."
  },
  {
    "objectID": "week-3/w3.html#view-definition",
    "href": "week-3/w3.html#view-definition",
    "title": "DBMS - Week 3",
    "section": "View Definition",
    "text": "View Definition\n\nA view is defined using the create view statement which has the form\ncreate view v as &lt; query expression &gt;\nwhere &lt; query expression &gt; is any legal SQL expression\nThe view name is represented by v\nOnce a view is defined, the view name can be used to refer to the virtual relation that the view generates\nView definition is not the same as creating a new relation by evaluating the query expression\n\nRather, a view definition causes the saving of an expression; the expression is substituted into queries using the view"
  },
  {
    "objectID": "week-3/w3.html#example-views",
    "href": "week-3/w3.html#example-views",
    "title": "DBMS - Week 3",
    "section": "Example Views",
    "text": "Example Views\n\nA view of instructors without their salary\ncreate view faculty as\nselect ID, name, dept_name\nfrom instructor;\nA view of all instructors in the Biology department\nselect name\n    from faculty\n    where dept_name = 'Biology';\nCreate a view of department salary totals\ncreate view departments_total_salary(dept_name, total_salary) as\n    select dept_name, sum(salary)\n    from instructor\n    group by dept_name;"
  },
  {
    "objectID": "week-3/w3.html#views-defined-using-other-views",
    "href": "week-3/w3.html#views-defined-using-other-views",
    "title": "DBMS - Week 3",
    "section": "Views Defined Using Other Views",
    "text": "Views Defined Using Other Views\n    create view physics_fall_2009 as\n        select course.course_id, sec_id, building, room_number\n        from course, section\n        where course.course_id = section.course_id\n            and course.dept_name = 'Physics'\n            and section.semester = 'Fall'\n            and section.year = 2009;\n    create view physics_fall_2009_watson as\n        select course_id, room_number\n        from physics_fall_2009\n        where building = 'Watson';"
  },
  {
    "objectID": "week-3/w3.html#view-expansion",
    "href": "week-3/w3.html#view-expansion",
    "title": "DBMS - Week 3",
    "section": "View Expansion",
    "text": "View Expansion\n\nExpand use of a view in a query/another view\n\n    create view physics_fall_2009_watson as\n        (select course_id, room_number\n        from (select course.course_id, building, room_number\n            from course, section\n            where course.course_id = section.course_id\n                and course.dept_name = 'Physics'\n                and section.semester = 'Fall'\n                and section.year = 2009)\n        where building = 'Watson');"
  },
  {
    "objectID": "week-3/w3.html#view-defined-using-other-views",
    "href": "week-3/w3.html#view-defined-using-other-views",
    "title": "DBMS - Week 3",
    "section": "View Defined Using Other Views",
    "text": "View Defined Using Other Views\n\nOne view may be used in the expression defining another view\nA view relation \\(v_1\\) is said to depend directly on a view relation \\(v_2\\) if \\(v_2\\) is used in the expression defining \\(v_1\\)\nA view relation \\(v_1\\) is said to depend on view relation \\(v_2\\) if either \\(v_1\\) depends directly on \\(v_2\\) or there is a path of dependencies from \\(v_1\\) to \\(v_2\\)\nA view relation v is said to be recursive if it depends on itself"
  },
  {
    "objectID": "week-3/w3.html#view-expansion-1",
    "href": "week-3/w3.html#view-expansion-1",
    "title": "DBMS - Week 3",
    "section": "View Expansion*",
    "text": "View Expansion*\n\nA way to define the meaning of views defined in terms of other views\nLet view \\(v_1\\) be defined by an expression \\(e_1\\) that may itself contain uses of view relations\nView expansion of an expression repeats the following replacement step:\nrepeat\n\nFind any view relation \\(v_i\\) in \\(e_1\\)\nReplace the view relation \\(v_i\\) by the expression defining \\(v_i\\)\n\nuntil no more view relations are present in \\(e_1\\)\nAs long as the view definitions are not recursive, this loop will terminate"
  },
  {
    "objectID": "week-3/w3.html#update-of-a-view",
    "href": "week-3/w3.html#update-of-a-view",
    "title": "DBMS - Week 3",
    "section": "Update of a View",
    "text": "Update of a View\n\nAdd a new tuple to faculty view which we defined earlier\n    insert into faculty values (’30765’, ’Green’, ’Music’);\nThis insertion must be represented by the insertion of the tuple\n  (’30765’, ’Green’, ’Music’, null)\ninto the instructor relation"
  },
  {
    "objectID": "week-3/w3.html#some-updates-cannot-be-translated-uniquely",
    "href": "week-3/w3.html#some-updates-cannot-be-translated-uniquely",
    "title": "DBMS - Week 3",
    "section": "Some Updates cannot be Translated Uniquely",
    "text": "Some Updates cannot be Translated Uniquely\n\n    create view instructor_info as\n        select ID, name, building\n        from instructor, department\n        where instructor.dept_name = department.dept_name;\n    insert into instructor info values ('69987', 'White', 'Taylor');\n\nwhich department, if multiple departments in Taylor?\nwhat if no department is in Taylor?\n\nMost SQL implementations allow updates only on simple views\n\nThe from clause has only one database relation\nThe select clause contains only attribute names of the relation, and does not have any expressions aggregates, or distinct specification\nAny attribute not listed in the select clause can be set to null\nThe query does not have a group by or having clause"
  },
  {
    "objectID": "week-3/w3.html#and-some-not-at-all",
    "href": "week-3/w3.html#and-some-not-at-all",
    "title": "DBMS - Week 3",
    "section": "And Some Not at All",
    "text": "And Some Not at All\n\n    create view history_instructors as\n        select *\n        from instructor\n        where dept_name = 'History';\nWhat happens if we insert (’25566’, ’Brown’, ’Biology’, 100000) into history_instructors?"
  },
  {
    "objectID": "week-3/w3.html#materialized-views",
    "href": "week-3/w3.html#materialized-views",
    "title": "DBMS - Week 3",
    "section": "Materialized Views",
    "text": "Materialized Views\n\nMaterializing a view: create a physical table containing all the tuples in the result of the query defining the view\nIf relations used in the query are updated, the materialized view result becomes out of date\n\nNeed to maintain the view, by updating the view whenever the underlying relations are updated"
  },
  {
    "objectID": "week-3/w3.html#transactions",
    "href": "week-3/w3.html#transactions",
    "title": "DBMS - Week 3",
    "section": "Transactions",
    "text": "Transactions\n\nUnit of work\nAtomic transaction\n\neither fully executed or rolled back as if it never happened\n\nIsolation from concurrent transactions\nTransactions begin implicitly\n\nEnd by commit work or rollback work\n\nBut default on most databases: each SQL statement commits automatically\n\nCan turn off auto-commit for a session (for example, using API)\nIn SQL:1999, can use: begin atomic … end\n\nNot supported on most databases"
  },
  {
    "objectID": "week-3/w3.html#integrity-constraints",
    "href": "week-3/w3.html#integrity-constraints",
    "title": "DBMS - Week 3",
    "section": "Integrity Constraints",
    "text": "Integrity Constraints\n\nIntegrity constraints guard against accidental damage to the database, by ensuring that authorized changes to the database do not result in a loss of data consistency\n\nA checking account must have a balance greater than Rs. 10,000.00\nA salary of a bank employee must be at least Rs. 250.00 an hour\nA customer must have a (non-null) phone number"
  },
  {
    "objectID": "week-3/w3.html#integrity-constraints-on-a-single-relation",
    "href": "week-3/w3.html#integrity-constraints-on-a-single-relation",
    "title": "DBMS - Week 3",
    "section": "Integrity Constraints on a Single Relation",
    "text": "Integrity Constraints on a Single Relation\n\nnot null\nprimary key\nunique\ncheck(P), where P is a predicate"
  },
  {
    "objectID": "week-3/w3.html#not-null-and-unique-constraints",
    "href": "week-3/w3.html#not-null-and-unique-constraints",
    "title": "DBMS - Week 3",
    "section": "Not Null and Unique Constraints",
    "text": "Not Null and Unique Constraints\n\nnot null\n\nDeclare name and budget to be not null\nname varchar(20) not null,\nbudget numeric(12, 2) not null\n\nunique \\((A_1, A_2, ..., A_m)\\)\n\nThe unique specification states that the attributes \\(A_1, A_2, ..., A_m\\) form a candidate key\nCandidate keys are permeitted to be null (unlike primary keys)"
  },
  {
    "objectID": "week-3/w3.html#the-check-clause",
    "href": "week-3/w3.html#the-check-clause",
    "title": "DBMS - Week 3",
    "section": "The check clause",
    "text": "The check clause\n\ncheck(P), where P is a predicate\nEnsure that semester is one of fall, winter, spring, or summer:\ncreate table section (\n  course_id varchar(8),\n  sec_id varchar(8),\n  semester varchar(6),\n  year numeric(4, 0),\n  building varchar(15),\n  room_number varchar(7),\n  time_slot_id varchar(4),\n  primary key (course_id, sec_id, semester, year),\n  check (semester in ('fall', 'winter', 'spring', 'summer'))\n);"
  },
  {
    "objectID": "week-3/w3.html#referential-integrity",
    "href": "week-3/w3.html#referential-integrity",
    "title": "DBMS - Week 3",
    "section": "Referential Integrity",
    "text": "Referential Integrity\n\nEnsures that a value that appears in one relation for a given set of attributes also appears for a certain set of attributes in another relation\nExample: If “Biology” is a department name appearing in one of the tuples in the instructor relation, then there exists a tuple in the department relation for “Biology”\nLet A be a set of attributes. Let R and S be two relations that contain attributes A and where A is the primary key of S. A is said to be a foreign key of R if for any values of A appearing in R these values also appear in S"
  },
  {
    "objectID": "week-3/w3.html#cascading-actions-in-referential-integrity",
    "href": "week-3/w3.html#cascading-actions-in-referential-integrity",
    "title": "DBMS - Week 3",
    "section": "Cascading Actions in Referential Integrity",
    "text": "Cascading Actions in Referential Integrity\n\nWith cascading, you can define the actions that the Database Engine takes when a user tries to delete or update a key to which existing foreign keys point\n    create table course (\n        course_id char(5) primary key,\n        title varchar(20),\n        dept_name varchar(20) references department\n    );\n    create table course (\n        ...\n        dept_name varchar(20),\n        foreign key (dept_name) references department\n            on delete cascade\n            on update cascade,\n        ...\n    );\nAlternative actions to cascade: no action, set null, set default"
  },
  {
    "objectID": "week-3/w3.html#integrity-constraint-violation-during-transactions",
    "href": "week-3/w3.html#integrity-constraint-violation-during-transactions",
    "title": "DBMS - Week 3",
    "section": "Integrity Constraint Violation During Transactions",
    "text": "Integrity Constraint Violation During Transactions\n\n    create table person (\n        ID char(10),\n        name char(40),\n        mother char(10),\n        father char(10),\n        primary key ID,\n        foreign key father references person,\n        foreign key mother references person)\nHow to insert a tuple without causing constraint violation?\n\nInsert father and mother of a person before inserting person\nOR, Set father and mother to null initially, update after inserting all persons (not possible if father and mother attributes declared to be not null)\nOR Defer constraint checking (will discuss later)"
  },
  {
    "objectID": "week-3/w3.html#built-in-data-types-in-sql",
    "href": "week-3/w3.html#built-in-data-types-in-sql",
    "title": "DBMS - Week 3",
    "section": "Built-in Data Types in SQL",
    "text": "Built-in Data Types in SQL\n\ndate: Dates, containing a (4 digit) year, month and date\n\nExample: date ‘2005-7-27’\n\ntime: Time of day, in hours, minutes and seconds.\n\nExample: time ‘09:00:30’ time ‘09:00:30.75’\n\ntimestamp: date plus time of day\n\nExample: timestamp ‘2005-7-27 09:00:30.75’\n\ninterval: period of time\n\nExample: interval ‘1’ day\nSubtracting a date/time/timestamp value from another gives an interval value\nInterval values can be added to date/time/timestamp values"
  },
  {
    "objectID": "week-3/w3.html#index-creation",
    "href": "week-3/w3.html#index-creation",
    "title": "DBMS - Week 3",
    "section": "Index Creation",
    "text": "Index Creation\n\n    create table student(ID varchar(5),\n    name varchar(20) not null,\n    dept_name varchar(20),\n    tot cred numeric (3,0) default 0,\n    primary key (ID))\ncreate index studentID index on student(ID)\nIndices are data structures used to speed up access to records with specified values for index attributes\n  select *\n  from student\n  where ID = '12345'\n\nCan be executed by using the index to find the required record, without looking at all records of student"
  },
  {
    "objectID": "week-3/w3.html#user-defined-types",
    "href": "week-3/w3.html#user-defined-types",
    "title": "DBMS - Week 3",
    "section": "User Defined Types",
    "text": "User Defined Types\n\ncreate type construct in SQL creates user-defined type (alias, like typedef in C)\n  create type Dollars as numeric (12,2) final\n    create table department (\n        dept_name varchar (20),\n        building varchar (15),\n        budget Dollars\n    );"
  },
  {
    "objectID": "week-3/w3.html#domains",
    "href": "week-3/w3.html#domains",
    "title": "DBMS - Week 3",
    "section": "Domains",
    "text": "Domains\n\ncreate domain construct in SQL-92 creates user-defined domain types\n  create domain person_name char(20) not null\nTypes and domains are similar\nDomains can have constraints, such as not null specified on them\n  create domain degree_level varchar(10)\n  constraint degree_level_test\n  check (value in ('Bachelors', 'Masters', 'Doctorate'));"
  },
  {
    "objectID": "week-3/w3.html#large-object-types",
    "href": "week-3/w3.html#large-object-types",
    "title": "DBMS - Week 3",
    "section": "Large-Object Types",
    "text": "Large-Object Types\n\nLarge objects (photos, videos, CAD files, etc.) are stored as a large object:\n\nblob: binary large object – object is a large collection of uninterpreted binary data (whose interpretation is left to an application outside of the database system)\nclob: character large object – object is a large collection of character data\nWhen a query returns a large object, a pointer is returned rather than the large object itself"
  },
  {
    "objectID": "week-3/w3.html#authorization",
    "href": "week-3/w3.html#authorization",
    "title": "DBMS - Week 3",
    "section": "Authorization",
    "text": "Authorization\n\nForms of authorization on parts of the database:\n\nRead - allows reading, but not modification of data\nInsert - allows insertion of new data, but not modification of existing data\nUpdate - allows modification, but not deletion of data\nDelete - allows deletion of data\n\nForms of authorization to modify the database schema\n\nIndex - allows creation and deletion of indices\nResources - allows creation of new relations\nAlteration - allows addition or deletion of attributes in a relation\nDrop - allows deletion of relations"
  },
  {
    "objectID": "week-3/w3.html#authorization-specification-in-sql",
    "href": "week-3/w3.html#authorization-specification-in-sql",
    "title": "DBMS - Week 3",
    "section": "Authorization Specification in SQL",
    "text": "Authorization Specification in SQL\n\nThe grant statement is used to confer authorization\n  grant &lt;privilege list&gt;\n  on &lt;relation name or view name&gt; to &lt;user list&gt;\n\\(\\text{&lt;user list&gt;}\\) is:\n\na user-id\npublic, which allows all valid users the privilege granted\nA role (more on this later)\n\nGranting a privilege on a view does not imply granting any privileges on the underlying relations\nThe grantor of the privilege must already hold the privilege on the specified item (or be the database administrator)"
  },
  {
    "objectID": "week-3/w3.html#privileges-in-sql",
    "href": "week-3/w3.html#privileges-in-sql",
    "title": "DBMS - Week 3",
    "section": "Privileges in SQL",
    "text": "Privileges in SQL\n\nselect: allows read access to relation, or the ability to query using the view\n\nExample: grant users \\(U_1\\), \\(U_2\\), and \\(U_3\\) select authorization on the instructor relation:\n  grant select on instructor to U1, U2, U3\n\ninsert: the ability to insert tuples\nupdate: the ability to update tuples\ndelete: the ability to delete tuples\nall privileges: used as a short form for all the allowable privileges"
  },
  {
    "objectID": "week-3/w3.html#revoking-authorization-in-sql",
    "href": "week-3/w3.html#revoking-authorization-in-sql",
    "title": "DBMS - Week 3",
    "section": "Revoking Authorization in SQL",
    "text": "Revoking Authorization in SQL\n\nThe revoke statement is used to revoke authorization\n  revoke &lt;privilege list&gt;\n  on &lt;relation name or view name&gt; from &lt;user list&gt;\nExample:\n  revoke select on branch from U1, U2, U3\n\\(\\text{&lt;privilege-list&gt;}\\) may be all to revoke all privileges the revokee may hold\nIf \\(\\text{&lt;revokee-list&gt;}\\) includes public, all users lose the privilege except those granted it explicitly\nIf the same privilege was granted twice to the same user by different grantees, the user may retain the privilege after the revocation\nAll privileges that depend on the privilege being revoked are also revoked"
  },
  {
    "objectID": "week-3/w3.html#roles",
    "href": "week-3/w3.html#roles",
    "title": "DBMS - Week 3",
    "section": "Roles",
    "text": "Roles\n\n    create role instructor;\n    grant instructor to Amit;\nPrivileges can be granted to roles:\n  grant select on takes to instructor;\nRoles can be granted to users, as well as to other roles\n  create role teaching_assistant;\n  grant teaching_assistant to instructor;\n\nInstructor inherits all privileges of teaching_assistant\n\nChain of roles\n\ncreate role dean;\ngrant instructor to dean;\ngrant dean to Satoshi;"
  },
  {
    "objectID": "week-3/w3.html#authorization-on-views",
    "href": "week-3/w3.html#authorization-on-views",
    "title": "DBMS - Week 3",
    "section": "Authorization on Views",
    "text": "Authorization on Views\n\n    create view geo_instructor as\n    (select *\n    from instructor\n    where dept_name = ’Geology’);\n    grant select on geo_instructor to geo_staff\nSuppose that a geo_staff member issues\n  select *\n  from geo_instructor;\nWhat if\n\ngeo_staff does not have permissions on instructor?\ncreator of view did not have some permissions on instructor?"
  },
  {
    "objectID": "week-3/w3.html#other-authorization-features",
    "href": "week-3/w3.html#other-authorization-features",
    "title": "DBMS - Week 3",
    "section": "Other Authorization Features",
    "text": "Other Authorization Features\n\nreferences privilege to create foreign key\n  grant reference (dept_name) on department to Mariano;\n\nwhy is this required?\n\nTransfer of privileges\n\ngrant select on department to Amit with grant option;\nrevoke select on department from Amit, Satoshi cascade;\nrevoke select on department from Amit, Satoshi restrict;"
  },
  {
    "objectID": "week-3/w3.html#native-language-query-language",
    "href": "week-3/w3.html#native-language-query-language",
    "title": "DBMS - Week 3",
    "section": "Native Language ← → Query Language",
    "text": "Native Language ← → Query Language"
  },
  {
    "objectID": "week-3/w3.html#functions-and-procedures",
    "href": "week-3/w3.html#functions-and-procedures",
    "title": "DBMS - Week 3",
    "section": "Functions and Procedures",
    "text": "Functions and Procedures\n\nFunctions / Procedures and Control Flow Statements were added in SQL:1999\n\nFunctions/Procedures can be written in SQL itself, or in an external programming language (like C, Java)\nFunctions written in an external languages are particularly useful with specialized data types such as images and geometric objects\n\nExample: Functions to check if polygons overlap, or to compare images for similarity\n\nSome database systems support table-valued functions, which can return a relation as a result\n\nSQL:1999 also supports a rich set of imperative constructs, including loops, if-then-else, and assignment\nMany databases have proprietary procedural extensions to SQL that differ from SQL:1999"
  },
  {
    "objectID": "week-3/w3.html#sql-functions",
    "href": "week-3/w3.html#sql-functions",
    "title": "DBMS - Week 3",
    "section": "SQL Functions",
    "text": "SQL Functions\n\nDefine a function that, given the name of a department, returns the count of the number of instructors in that department:\n    create function dept_count (dept name varchar(20))\n        returns integer\n        begin\n        declare d_count integer;\n            select count (*) into d_count\n            from instructor\n            where instructor.dept_name = dept_name\n        return d_cont;\n        end\nThe function dept count can be used to find the department names and budget of all departments with more that 12 instructors:\n    select dept_name, budget\n    from department\n    where dept_count (dept_name ) &gt; 12"
  },
  {
    "objectID": "week-3/w3.html#sql-functions-2",
    "href": "week-3/w3.html#sql-functions-2",
    "title": "DBMS - Week 3",
    "section": "SQL Functions (2)",
    "text": "SQL Functions (2)\n\nCompound statement: begin . . . end May contain multiple SQL statements between begin and end.\nreturns – indicates the variable-type that is returned (for example, integer)\nreturn – specifies the values that are to be returned as result of invoking the function\nSQL function are in fact parameterized views that generalize the regular notion of views by allowing parameters"
  },
  {
    "objectID": "week-3/w3.html#table-functions",
    "href": "week-3/w3.html#table-functions",
    "title": "DBMS - Week 3",
    "section": "Table Functions",
    "text": "Table Functions\n\nFunctions that return a relation as a result added in SQL:2003\nReturn all instructors in a given department:\n  create function instructor_of (dept_name char(20))\n    returns table (\n      ID varchar(5),\n      name varchar(20),\n      dept_name varchar(20)\n      salary numeric(8, 2) )\n    returns table\n      (select ID, name, dept_name, salary\n      from instructor\n      where instructor.dept_name = instructor_of.dept_name)\nUsage\n  select *\n  from table (instructor_of (‘Music’))"
  },
  {
    "objectID": "week-3/w3.html#sql-procedures",
    "href": "week-3/w3.html#sql-procedures",
    "title": "DBMS - Week 3",
    "section": "SQL Procedures",
    "text": "SQL Procedures\n\nThe dept count function could instead be written as procedure:\n      create procedure dept_count_proc (\n          in dept_name varchar (20), out d_count integer)\n          begin\n              select count(*) into d_count\n              from instructor\n              where instructor.dept_name = dept_count_proc.dept_name\n          end\nProcedures can be invoked either from an SQL procedure or from embedded SQL, using the call statement.\ndeclare d_count integer;\ncall dept_count_proc(‘Physics’, d_count);\nProcedures and functions can be invoked also from dynamic SQL\nSQL:1999 allows overloading - more than one function/procedure of the same name as long as the number of arguments and/or the types of the arguments differ"
  },
  {
    "objectID": "week-3/w3.html#language-constructs-for-procedures-and-functions",
    "href": "week-3/w3.html#language-constructs-for-procedures-and-functions",
    "title": "DBMS - Week 3",
    "section": "Language Constructs for Procedures and Functions",
    "text": "Language Constructs for Procedures and Functions\n\nSQL supports constructs that gives it almost all the power of a general-purpose programming language.\n\nWarning: Most database systems implement their own variant of the standard syntax\n\nCompound statements: begin . . . end\n\nMay contain multiple SQL statements between begin and end\nLocal variables can be declared within a compound statement"
  },
  {
    "objectID": "week-3/w3.html#language-constructs-2-while-and-repeat",
    "href": "week-3/w3.html#language-constructs-2-while-and-repeat",
    "title": "DBMS - Week 3",
    "section": "Language Constructs (2): while and repeat",
    "text": "Language Constructs (2): while and repeat\n\nwhile loop\n     while boolean_expression do\n         sequence_of_statements;\n     end while;\nrepeat loop\n    repeat\n        sequence_of_statements;\n    until boolean_expression;\n    end repeat;"
  },
  {
    "objectID": "week-3/w3.html#language-constructs-3-for",
    "href": "week-3/w3.html#language-constructs-3-for",
    "title": "DBMS - Week 3",
    "section": "Language Constructs (3): for",
    "text": "Language Constructs (3): for\n\nfor loop\n\nPermits iteration over all results of a query\n\nFind the budget if all departments:\n    declare n integer default 0;\n    for r as\n      select budget from department\n    do\n      set n = n + r.budget\n    end for;"
  },
  {
    "objectID": "week-3/w3.html#language-constructs-4-if-then-else",
    "href": "week-3/w3.html#language-constructs-4-if-then-else",
    "title": "DBMS - Week 3",
    "section": "Language Constructs (4): if-then-else",
    "text": "Language Constructs (4): if-then-else\n\nConditional statements\n\nif-then-else\ncase\n\nif-then-else statement\n    if boolean_expression then\n        sequence_of_statements;\n    elseif boolean_expression then\n        sequence_of_statements;\n    ...\n    else\n        sequence_of_statements;\n    end if;\nThe if statement supports the use of optional elseif clauses and a default else clause\nExample procedure: registers student after ensuring that classroom capacity is not exceeded\n\nReturns 0 on success and -1 if capacity is exceeded"
  },
  {
    "objectID": "week-3/w3.html#language-constructs-5-simple-case",
    "href": "week-3/w3.html#language-constructs-5-simple-case",
    "title": "DBMS - Week 3",
    "section": "Language Constructs (5): Simple case",
    "text": "Language Constructs (5): Simple case\n\nSimple case statement\n    case variable\n        when value1 then\n            sequence_of_statements;\n        when value2 then\n            sequence_of_statements;\n        ...\n        else\n            sequence_of_statements;\n    end case;\nThe when clause of the case statement defines the value that when satisfied determines the flow of control"
  },
  {
    "objectID": "week-3/w3.html#language-constructs-6-searched-case",
    "href": "week-3/w3.html#language-constructs-6-searched-case",
    "title": "DBMS - Week 3",
    "section": "Language Constructs (6): Searched case",
    "text": "Language Constructs (6): Searched case\n\nSearched case statements\n    case\n        when sql_expression = value1 then\n            sequence_of_statements;\n        when sql_expression = value2 then\n            sequence_of_statements;\n        ...\n        else\n            sequence_of_statements;\n    end case;\nAny supported SQL expression can be used here. These expressions can contain references to variables, parameters, special registers, and more."
  },
  {
    "objectID": "week-3/w3.html#language-constructs-7-exception",
    "href": "week-3/w3.html#language-constructs-7-exception",
    "title": "DBMS - Week 3",
    "section": "Language Constructs (7): Exception",
    "text": "Language Constructs (7): Exception\n\nSignaling of exception conditions, and declaring handlers for exceptions\n    declare out_of_classroom_seats condition\n    declare exit handler for out_of_classroom_seats\n    begin\n        ...\n        signal out_of_classroom_seats\n        ...\n    end\n\nThe handler here is exit – causes enclosing begin . . . end to be terminate and exit\nOther actions possible on exception"
  },
  {
    "objectID": "week-3/w3.html#external-language-routines",
    "href": "week-3/w3.html#external-language-routines",
    "title": "DBMS - Week 3",
    "section": "External Language Routines*",
    "text": "External Language Routines*\n\nSQL:1999 allows the definition of functions and procedures in an external / imperative programming language, (Java, C#, C, or C++) which can be invoked from SQL queries\nSuch functions can be more efficient than functions defined in SQL, and computations that cannot be carried out in SQL can be executed by these functions\nDeclaring external language procedures and functions\n    create procedure dept_count_proc(\n            in dept_name varchar(20),\n            out count integer)\n        language C\n        external name ’/usr/avi/bin/dept_count_proc’\n\n    create function dept_count(dept_name varchar(20))\n    returns integer\n        language C\n        external name ‘/usr/avi/bin/dept_count’"
  },
  {
    "objectID": "week-3/w3.html#external-language-routines-2",
    "href": "week-3/w3.html#external-language-routines-2",
    "title": "DBMS - Week 3",
    "section": "External Language Routines (2)*",
    "text": "External Language Routines (2)*\n\nBenefits of external language functions/procedures:\n\nMore efficient for many operations, and more expressive power\n\nDrawbacks\n\nCode to implement function may need to be loaded into database system and executed in the database system’s address space\n\nRisk of accidental corruption of database structures\nSecurity risk, allowing users access to unauthorized data\n\nThere are alternatives, which give good security at the cost of performance\nDirect execution in the database system’s space is used when efficiency is more important than security"
  },
  {
    "objectID": "week-3/w3.html#external-language-routines-3-security",
    "href": "week-3/w3.html#external-language-routines-3-security",
    "title": "DBMS - Week 3",
    "section": "External Language Routines (3)*: Security",
    "text": "External Language Routines (3)*: Security\n\nTo deal with security problems, we can do one of the following:\n\nUse sandbox techniques\n\nThat is, use a safe language like Java, which cannot be used to access/damage other parts of the database code\n\nRun external language functions/procedures in a separate process, with no access to the database process’ memory\n\nParameters and results communicated via inter-process communication\n\n\nBoth have performance overheads\nMany database systems support both above approaches as well as direct executing in database system address space"
  },
  {
    "objectID": "week-3/w3.html#trigger",
    "href": "week-3/w3.html#trigger",
    "title": "DBMS - Week 3",
    "section": "Trigger",
    "text": "Trigger\n\nA trigger defines a set of actions that are performed in response to an insert, update, or delete operation on a specified table\n\nWhen such an SQL operation is executed, the trigger is said to have been activated\nTriggers are optional\nTriggers are defined using the create trigger statement\n\nTriggers can be used\n\nTo enforce data integrity rules via referential constraints and check constraints\nTo cause updates to other tables, automatically generate or transform values for inserted or updated rows, or invoke functions to perform tasks such as issuing alerts\n\nTo design a trigger mechanism, we must:\n\nSpecify the events / (like update, insert, or delete) for the trigger to executed\nSpecify the time (BEFORE or AFTER) of execution\nSpecify the actions to be taken when the trigger executes\n\nSyntax of triggers may vary across systems"
  },
  {
    "objectID": "week-3/w3.html#types-of-triggers-before",
    "href": "week-3/w3.html#types-of-triggers-before",
    "title": "DBMS - Week 3",
    "section": "Types of Triggers: BEFORE",
    "text": "Types of Triggers: BEFORE\n\nBEFORE triggers\n\nRun before an update, or insert\nValues that are being updated or inserted can be modified before the database is actually modified. You can use triggers that run before an update or insert to:\n\nCheck or modify values before they are actually updated or inserted in the database\n\nUseful if user-view and internal database format differs\n\nRun other non-database operations coded in user-defined functions\n\n\nBEFORE DELETE triggers\n\nRun before a delete\n\nChecks values (a raises an error, if necessary)"
  },
  {
    "objectID": "week-3/w3.html#types-of-triggers-2-after",
    "href": "week-3/w3.html#types-of-triggers-2-after",
    "title": "DBMS - Week 3",
    "section": "Types of Triggers (2): AFTER",
    "text": "Types of Triggers (2): AFTER\n\nAFTER triggers\n\nRun before an update, insert, or delete\nYou can use triggers that run after an update or insert to:\n\nUpdate data in other tables\n\nUseful for maintain relationships between data or keep audit trail\n\nCheck against other data in the table or in other tables\n\nUseful to ensure data integrity when referential integrity constraints aren’t appropriate, or\nwhen table check constraints limit checking to the current table only\n\nRun non-database operations coded in user-defined functions\n\nUseful when issuing alerts or to update information outside the database"
  },
  {
    "objectID": "week-3/w3.html#row-level-and-statement-level-triggers",
    "href": "week-3/w3.html#row-level-and-statement-level-triggers",
    "title": "DBMS - Week 3",
    "section": "Row Level and Statement Level Triggers",
    "text": "Row Level and Statement Level Triggers\nThere are two types of triggers based on the level at which the triggers are applied:\n\nRow level triggers are executed whenever a row is affected by the event on which the trigger is defined.\n\nLet Employee be a table with 100 rows. Suppose an update statement is executed to increase the salary of each employee by 10%. Any row level update trigger configured on the table Employee will affect all the 100 rows in the table during this update.\n\nStatement level triggers perform a single action for all rows affected by a statement, instead of executing a separate action for each affected row.\n\nUsed for each statement instead of for each row\nUses referencing old table or referencing new table to refer to temporary tables called transition tables containing the affected rows\nCan be more efficient when dealing with SQL statements that update a large number of rows"
  },
  {
    "objectID": "week-3/w3.html#triggering-events-and-actions-in-sql",
    "href": "week-3/w3.html#triggering-events-and-actions-in-sql",
    "title": "DBMS - Week 3",
    "section": "Triggering Events and Actions in SQL",
    "text": "Triggering Events and Actions in SQL\n\nTriggering event can be an insert, delete or update\nTriggers on update can be restricted to specific attributes\n\nFor example, after update of grade on takes\n\nValues of attributes before and after an update can be referenced\n\nreferencing old row as : for deletes and updates\nreferencing new row as : for inserts and updates\n\nTriggers can be activated before an event, which can serve as extra constraints. For example, convert blank grades to null.\n  create trigger setnull_trigger before update of takes\n  referencing new row as nrow\n  for each row\n  when (nrow.grade = ‘ ‘)\n    begin atomic\n      set nrow.grade = null;\n    end;"
  },
  {
    "objectID": "week-3/w3.html#triggering-to-maintain-credits_earned-value",
    "href": "week-3/w3.html#triggering-to-maintain-credits_earned-value",
    "title": "DBMS - Week 3",
    "section": "Triggering to Maintain credits_earned value",
    "text": "Triggering to Maintain credits_earned value\n  create trigger credits_earned after update of grade on takes\n  referencing new row as nrow\n  referencing old row as orow\n  for each row\n  when nrow.grade &lt;&gt; 'F' and nrow.grade is not null and\n       (orow.grade = 'F' or orow.grade is null)\n    begin atomic\n      update student\n      set tot_cred = tot_cred + \n          (select credits\n          from course\n          where course.course_id = nrow.course_id)\n      where student.ID = nrow.ID;\n    end;"
  },
  {
    "objectID": "week-3/w3.html#how-to-use-triggers",
    "href": "week-3/w3.html#how-to-use-triggers",
    "title": "DBMS - Week 3",
    "section": "How to use triggers?",
    "text": "How to use triggers?\n\nThe optimal use of DML triggers is for short, simple, and easy to maintain write operations that act largely independent of an applications business logic.\nTypical and recommended uses of triggers include:\n\nLogging changes to a history table\nAuditing users and their actions against sensitive tables\nAdding additional values to a table that may not be available to an application (due to security restrictions or other limitations), such as:\n\nLogin/user name\nTime an operation occurs\nServer/database name\n\nSimple validation"
  },
  {
    "objectID": "week-3/w3.html#how-not-to-use-triggers",
    "href": "week-3/w3.html#how-not-to-use-triggers",
    "title": "DBMS - Week 3",
    "section": "How not to use triggers?",
    "text": "How not to use triggers?\n\nTriggers are like Lays: Once you pop, you can’t stop\nOne of the greatest challenges for architects and developers is to ensure that\n\ntriggers are used only as needed, and\nto not allow them to become a one-size-fits-all solution for any data needs that happen to come along\n\nAdding triggers is often seen as faster and easier than adding code to an application, but the cost of doing so is compounded over time with each added line of code"
  },
  {
    "objectID": "week-3/w3.html#how-to-use-triggers-2",
    "href": "week-3/w3.html#how-to-use-triggers-2",
    "title": "DBMS - Week 3",
    "section": "How to use triggers? (2)",
    "text": "How to use triggers? (2)\n\nTriggers can become dangerous when:\n\nThere are too many\nTrigger code becomes complex\nTriggers go cross-server - across databases over network\nTriggers call triggers\nRecursive triggers are set to ON. This database-level setting is set to off by default\nFunctions, stored procedures, or views are in triggers\nIteration occurs"
  },
  {
    "objectID": "week-2/2.4.html",
    "href": "week-2/2.4.html",
    "title": "AQ2.4",
    "section": "",
    "text": "import pandas as pd\nfrom IPython.display import HTML"
  },
  {
    "objectID": "week-2/2.4.html#question-1",
    "href": "week-2/2.4.html#question-1",
    "title": "AQ2.4",
    "section": "Question 1",
    "text": "Question 1\nWhat will be the value of the ’Count’ returned by the following query?\nSELECT COUNT(*)\nFROM Shop, Item;\n\n# Shop, Item == cartesian product\ncp_df = pd.merge(df1.assign(key=1), df2.assign(key=1), on='key').drop('key', axis=1)\n\ncp_df\n\n\n\n\n\n\n\n\nshop_num\nitem_num_x\nquantity\nitem_num_y\nitem_name\nprice\n\n\n\n\n0\n10\n1002\n100\n1001\npen\n10\n\n\n1\n10\n1002\n100\n1002\nnotebook\n30\n\n\n2\n10\n1002\n100\n1003\npencil\n7\n\n\n3\n10\n1002\n100\n1004\neraser\n15\n\n\n4\n10\n1003\n50\n1001\npen\n10\n\n\n5\n10\n1003\n50\n1002\nnotebook\n30\n\n\n6\n10\n1003\n50\n1003\npencil\n7\n\n\n7\n10\n1003\n50\n1004\neraser\n15\n\n\n8\n10\n1004\n80\n1001\npen\n10\n\n\n9\n10\n1004\n80\n1002\nnotebook\n30\n\n\n10\n10\n1004\n80\n1003\npencil\n7\n\n\n11\n10\n1004\n80\n1004\neraser\n15\n\n\n12\n11\n1001\n110\n1001\npen\n10\n\n\n13\n11\n1001\n110\n1002\nnotebook\n30\n\n\n14\n11\n1001\n110\n1003\npencil\n7\n\n\n15\n11\n1001\n110\n1004\neraser\n15\n\n\n16\n12\n1001\n100\n1001\npen\n10\n\n\n17\n12\n1001\n100\n1002\nnotebook\n30\n\n\n18\n12\n1001\n100\n1003\npencil\n7\n\n\n19\n12\n1001\n100\n1004\neraser\n15\n\n\n20\n11\n1002\n80\n1001\npen\n10\n\n\n21\n11\n1002\n80\n1002\nnotebook\n30\n\n\n22\n11\n1002\n80\n1003\npencil\n7\n\n\n23\n11\n1002\n80\n1004\neraser\n15\n\n\n24\n13\n1003\n100\n1001\npen\n10\n\n\n25\n13\n1003\n100\n1002\nnotebook\n30\n\n\n26\n13\n1003\n100\n1003\npencil\n7\n\n\n27\n13\n1003\n100\n1004\neraser\n15\n\n\n28\n12\n1004\n50\n1001\npen\n10\n\n\n29\n12\n1004\n50\n1002\nnotebook\n30\n\n\n30\n12\n1004\n50\n1003\npencil\n7\n\n\n31\n12\n1004\n50\n1004\neraser\n15\n\n\n32\n12\n1003\n40\n1001\npen\n10\n\n\n33\n12\n1003\n40\n1002\nnotebook\n30\n\n\n34\n12\n1003\n40\n1003\npencil\n7\n\n\n35\n12\n1003\n40\n1004\neraser\n15\n\n\n\n\n\n\n\n\ncp_df.shape\n\n(36, 6)\n\n\nAnswer: Count * = 36"
  },
  {
    "objectID": "week-2/2.4.html#question-2",
    "href": "week-2/2.4.html#question-2",
    "title": "AQ2.4",
    "section": "Question 2",
    "text": "Question 2\nWhat will be the value of the ’Count’ returned by the following query?\nSELECT COUNT(*)\nFROM Shop, Item\nWHERE Shop.item_num = Item.item_num;\n\n# select rows from cp_df where shop.item_num == item.item_num\nresult_df = cp_df[(cp_df.item_num_x == cp_df.item_num_y)]\n\nprint(result_df)\n\nprint(result_df.shape)\n\n    shop_num  item_num_x  quantity  item_num_y item_name  price\n1         10        1002       100        1002  notebook     30\n6         10        1003        50        1003    pencil      7\n11        10        1004        80        1004    eraser     15\n12        11        1001       110        1001       pen     10\n16        12        1001       100        1001       pen     10\n21        11        1002        80        1002  notebook     30\n26        13        1003       100        1003    pencil      7\n31        12        1004        50        1004    eraser     15\n34        12        1003        40        1003    pencil      7\n(9, 6)\n\n\nAnswer: 9"
  },
  {
    "objectID": "week-2/2.4.html#question-3",
    "href": "week-2/2.4.html#question-3",
    "title": "AQ2.4",
    "section": "Question 3",
    "text": "Question 3\nWhat will be the value of the ’Count’ will be returned by the following query?\nSELECT COUNT(*)\nFROM Shop, Item\nWHERE shop_num = 10;\n\ndf3 = cp_df[(cp_df.shop_num == 10)]\nprint(df3)\nprint(df3.shape)\n\n    shop_num  item_num_x  quantity  item_num_y item_name  price\n0         10        1002       100        1001       pen     10\n1         10        1002       100        1002  notebook     30\n2         10        1002       100        1003    pencil      7\n3         10        1002       100        1004    eraser     15\n4         10        1003        50        1001       pen     10\n5         10        1003        50        1002  notebook     30\n6         10        1003        50        1003    pencil      7\n7         10        1003        50        1004    eraser     15\n8         10        1004        80        1001       pen     10\n9         10        1004        80        1002  notebook     30\n10        10        1004        80        1003    pencil      7\n11        10        1004        80        1004    eraser     15\n(12, 6)"
  },
  {
    "objectID": "week-2/2.4.html#question-4",
    "href": "week-2/2.4.html#question-4",
    "title": "AQ2.4",
    "section": "Question 4",
    "text": "Question 4\nWhat will be the value of the ’Count’ will be returned by the following query?\nSELECT COUNT(*)\nFROM Shop, Item\nWHERE shop_num = 10 and Shop.item_num = Item.item_num;\n\ndf4 = cp_df[(cp_df.shop_num == 10) & (cp_df.item_num_x == cp_df.item_num_y)]\nprint(df4)\nprint(df4.shape)\n\n    shop_num  item_num_x  quantity  item_num_y item_name  price\n1         10        1002       100        1002  notebook     30\n6         10        1003        50        1003    pencil      7\n11        10        1004        80        1004    eraser     15\n(3, 6)"
  },
  {
    "objectID": "week-2/2.4.html#question-5",
    "href": "week-2/2.4.html#question-5",
    "title": "AQ2.4",
    "section": "Question 5",
    "text": "Question 5\nIdentify the appropriate SQL statement that ”find out all the shop numbers (shop_num) where the item ’Pencil’”.\n\ncp_df\n\n\n\n\n\n\n\n\nshop_num\nitem_num_x\nquantity\nitem_num_y\nitem_name\nprice\n\n\n\n\n0\n10\n1002\n100\n1001\npen\n10\n\n\n1\n10\n1002\n100\n1002\nnotebook\n30\n\n\n2\n10\n1002\n100\n1003\npencil\n7\n\n\n3\n10\n1002\n100\n1004\neraser\n15\n\n\n4\n10\n1003\n50\n1001\npen\n10\n\n\n5\n10\n1003\n50\n1002\nnotebook\n30\n\n\n6\n10\n1003\n50\n1003\npencil\n7\n\n\n7\n10\n1003\n50\n1004\neraser\n15\n\n\n8\n10\n1004\n80\n1001\npen\n10\n\n\n9\n10\n1004\n80\n1002\nnotebook\n30\n\n\n10\n10\n1004\n80\n1003\npencil\n7\n\n\n11\n10\n1004\n80\n1004\neraser\n15\n\n\n12\n11\n1001\n110\n1001\npen\n10\n\n\n13\n11\n1001\n110\n1002\nnotebook\n30\n\n\n14\n11\n1001\n110\n1003\npencil\n7\n\n\n15\n11\n1001\n110\n1004\neraser\n15\n\n\n16\n12\n1001\n100\n1001\npen\n10\n\n\n17\n12\n1001\n100\n1002\nnotebook\n30\n\n\n18\n12\n1001\n100\n1003\npencil\n7\n\n\n19\n12\n1001\n100\n1004\neraser\n15\n\n\n20\n11\n1002\n80\n1001\npen\n10\n\n\n21\n11\n1002\n80\n1002\nnotebook\n30\n\n\n22\n11\n1002\n80\n1003\npencil\n7\n\n\n23\n11\n1002\n80\n1004\neraser\n15\n\n\n24\n13\n1003\n100\n1001\npen\n10\n\n\n25\n13\n1003\n100\n1002\nnotebook\n30\n\n\n26\n13\n1003\n100\n1003\npencil\n7\n\n\n27\n13\n1003\n100\n1004\neraser\n15\n\n\n28\n12\n1004\n50\n1001\npen\n10\n\n\n29\n12\n1004\n50\n1002\nnotebook\n30\n\n\n30\n12\n1004\n50\n1003\npencil\n7\n\n\n31\n12\n1004\n50\n1004\neraser\n15\n\n\n32\n12\n1003\n40\n1001\npen\n10\n\n\n33\n12\n1003\n40\n1002\nnotebook\n30\n\n\n34\n12\n1003\n40\n1003\npencil\n7\n\n\n35\n12\n1003\n40\n1004\neraser\n15\n\n\n\n\n\n\n\n\ndf5_1 = cp_df[(cp_df.item_num_x == cp_df.item_num_y)&(cp_df.item_name == 'pencil')]\nprint(df5_1)\n\n    shop_num  item_num_x  quantity  item_num_y item_name  price\n6         10        1003        50        1003    pencil      7\n26        13        1003       100        1003    pencil      7\n34        12        1003        40        1003    pencil      7\n\n\n\n# get only shop_num values\ndf5_2 = df5_1[['shop_num']]\nprint(df5_2)\n\n    shop_num\n6         10\n26        13\n34        12\n\n\nData for questions 6 and 7\n\nstudent_data = {\n    'roll_no': [1001, 1002, 1003, 1004, 1005],\n    'name': ['Jagjit', 'Mike', 'Radha', 'Rashid', 'Ajay'],\n    'semester': [2, 3, 4, 3, 4],\n    'dept': ['Electronics', 'Computer Science', 'Electronics', 'Electronics', 'Computer Science']\n}\n\ndf1 = pd.DataFrame(student_data)\n\ndept_data = {\n    'stream': ['Electronics', 'Computer Science'],\n    'intructor': ['Dr Madhu', 'Dr Rahul'],\n    'building_no': ['1D', '3A']\n}\n\ndf2 = pd.DataFrame(dept_data)"
  },
  {
    "objectID": "week-2/2.4.html#question-6",
    "href": "week-2/2.4.html#question-6",
    "title": "AQ2.4",
    "section": "Question 6",
    "text": "Question 6\nHow many rows will be fetched as a result of the following query?\nSELECT * FROM Student NATURAL JOIN Department;\n\ncp_df = pd.merge(df1.assign(key=1), df2.assign(key=1), on='key').drop('key', axis=1)\n\ncp_df\n\n\n\n\n\n\n\n\nroll_no\nname\nsemester\ndept\nstream\nintructor\nbuilding_no\n\n\n\n\n0\n1001\nJagjit\n2\nElectronics\nElectronics\nDr Madhu\n1D\n\n\n1\n1001\nJagjit\n2\nElectronics\nComputer Science\nDr Rahul\n3A\n\n\n2\n1002\nMike\n3\nComputer Science\nElectronics\nDr Madhu\n1D\n\n\n3\n1002\nMike\n3\nComputer Science\nComputer Science\nDr Rahul\n3A\n\n\n4\n1003\nRadha\n4\nElectronics\nElectronics\nDr Madhu\n1D\n\n\n5\n1003\nRadha\n4\nElectronics\nComputer Science\nDr Rahul\n3A\n\n\n6\n1004\nRashid\n3\nElectronics\nElectronics\nDr Madhu\n1D\n\n\n7\n1004\nRashid\n3\nElectronics\nComputer Science\nDr Rahul\n3A\n\n\n8\n1005\nAjay\n4\nComputer Science\nElectronics\nDr Madhu\n1D\n\n\n9\n1005\nAjay\n4\nComputer Science\nComputer Science\nDr Rahul\n3A\n\n\n\n\n\n\n\nAnswer: 10"
  },
  {
    "objectID": "week-2/2.4.html#question-7",
    "href": "week-2/2.4.html#question-7",
    "title": "AQ2.4",
    "section": "Question 7",
    "text": "Question 7\nHow many rows will be fetched as a result of the following query?\nSELECT * FROM Student,Department\nWHERE Student.Department = Department.Stream;\n\n# select rows from cp_df where student.dept == dept.stream\n\ndf7 = cp_df[(cp_df.dept == cp_df.stream)]\nprint(df7)\nprint(df7.shape)\n\n   roll_no    name  semester              dept            stream intructor  \\\n0     1001  Jagjit         2       Electronics       Electronics  Dr Madhu   \n3     1002    Mike         3  Computer Science  Computer Science  Dr Rahul   \n4     1003   Radha         4       Electronics       Electronics  Dr Madhu   \n6     1004  Rashid         3       Electronics       Electronics  Dr Madhu   \n9     1005    Ajay         4  Computer Science  Computer Science  Dr Rahul   \n\n  building_no  \n0          1D  \n3          3A  \n4          1D  \n6          1D  \n9          3A  \n(5, 7)\n\n\nAnswer: 5"
  },
  {
    "objectID": "week-2/w2.html",
    "href": "week-2/w2.html",
    "title": "DBMS - Week 2",
    "section": "",
    "text": "\\(A_{1},A_{2},...,A_{n}\\) are attributes\n\\(R=(A_{1},A_{2},...,A_{n})\\) is a relational schema\n\nExample: \\(instructor(ID, name, dept_name, salary)\\)\n\nFormally, given sets \\(D_{1},D_{2},...,D_{n}\\), a relation \\(r\\) is a subset of \\[\nD_{1} \\times D_{2} \\times ... \\times D_{n}\n\\] Thus, a relation is a set of \\(n\\)-tuples \\((a_{1},a_{2},...,a_{n})\\) where each \\(a_{i} \\in D_{i}\\)\nThe current values (relation instance) of a relation are specified in a table\nExample: \\(instuctor \\equiv (String(5) \\times String \\times String \\times Number+)\\), where \\(ID \\in String(5)\\), \\(name \\in String\\), \\(dept\\_name \\in String\\), \\(salary \\in Number+\\)\n\n\n\n\n\nOrder of tuples/rows in a relation is irrelevant (tuples may be stored in an arbitrary order)\nNo two tuples in a relation are the same (i.e., no duplicate tuples)\nExample: instructor relation with unordered tuples\n\n\n\n\nID\nname\ndept_name\nsalary\n\n\n\n\n22222\nEinstein\nPhysics\n95000\n\n\n12121\nWu\nFinance\n90000\n\n\n32343\nEl Said\nHistory\n60000\n\n\n45565\nKatz\nComp. Sci.\n75000\n\n\n98345\nKim\nElec. Eng.\n80000\n\n\n76766\nCrick\nBiology\n72000\n\n\n10101\nSrinivasan\nComp. Sci.\n65000\n\n\n58583\nCalifieri\nHistory\n62000\n\n\n82821\nBrandt\nComp. Sci.\n92000\n\n\n15151\nMozart\nMusic\n40000\n\n\n33456\nGold\nPhysics\n87000\n\n\n76543\nSingh\nFinance\n80000\n\n\n\n\n\n\n\nLet \\(K \\subseteq R\\), where \\(R\\) is the set of attributes in the relation.\n\\(K\\) is a superkey of \\(R\\) if values for \\(K\\) are sufficient to identify a unique tuple of each possible relation \\(r(R)\\)\n\nExample: \\(\\{ID\\}\\) and \\(\\{ID, name\\}\\) are both superkeys of \\(instructor\\)\n\nSuperkey \\(K\\) is a candidate key if \\(K\\) is minimal\n\nExample: \\(\\{ID\\}\\) is a candidate key for \\(instructor\\)\n\nOne of the candidate keys is chosen as the primary key\n\nWhich one?\n\nA surrogate key or synthetic key in a database is a unique identifier for either an entity in the modeled world or an object in the database.\n\nThe surrogate key is not derived from application data, unlike a natural (or business) key which is derived from application data.\n\n\n\n\n\n\nStudents = Roll#, First Name, Last Name, DoB, Passport#, Aadhaar#, Department\nSuper Key: Roll#, {Roll#, DoB}\nCandidate Keys: Roll#, {First Name, Last Name}, Aadhaar#\n\nPassport# cannot be a key. Why?\nNull values are allowed for Passport# (a student may not have a passport)\n\nPrimary Key: Roll#\n\nCan we use Aadhaar# as the primary key?\nIt may suffice for unique identification. But Roll# may have additional useful information. For example: 14CS92P01\n\nRead 14CS92P01 as 14-CS-92-P-01\n14: Admission in 2014\nCS: Department = CS\n92: Category of Student\nP: Type of admission: Project\n01: Serial Number\n\n\n\n\n\n\n\nForeign key constraint: Value in one relation must appear in another\n\nReferencing relation\n\nEnrolment: Foreign keys - Roll#, Course#\n\nReferenced relation\n\nStudents, Courses\n\n\nA compound key consists of more than one attribute to uniquely identify an entity occurrence\n\nEach attribute, which makes up the key, is a simple key in its own right\n{Roll#, Course#}\n\n\n\nStudents\n\n\n\n\n\n\n\n\n\n\n\nRoll #\nFirst Name\nLast Name\nDoB\nPassport #\nAadhaar #\nDepartment\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCourses\n\n\nCourse #\nCourse Name\nCredits\nL-T-P\nDepartment\n\n\n\n\n\n\nEnrolment\n\n\nRoll #\nCourse #\nInstructor ID\n\n\n\n\n\n\n\n\nProcedural viz-a-viz Non-procedural or Declarative Paradigms - Procedural programming requires that the programmer specify the exact steps to be taken to solve a problem. - That is, how to get the output for the range of required inputs - The programmer must know an appropriate algorithm\n\nDeclarative programming requires a more descriptive approach.\n\nThe programmer must know what relationships hold between various entities\n\nExample - Square root of \\(n\\)\n\nProcedural\n\nGuess \\(x_0\\) (close to root of \\(n\\))\n\\(i \\leftarrow 0\\)\n\\(x_{i+1} \\leftarrow \\frac{(x_i + \\frac{n}{x_i})}{2}\\)\nRepeat Step 2 if \\(|x_{i+1} - x_i| &gt; \\delta\\)\n\nDeclarative\n\nRoot of \\(n\\) is \\(m\\) such that \\(m^2 = n\\)"
  },
  {
    "objectID": "week-2/w2.html#lecture-2.1-introduction-to-relational-model1",
    "href": "week-2/w2.html#lecture-2.1-introduction-to-relational-model1",
    "title": "DBMS - Week 2",
    "section": "",
    "text": "\\(A_{1},A_{2},...,A_{n}\\) are attributes\n\\(R=(A_{1},A_{2},...,A_{n})\\) is a relational schema\n\nExample: \\(instructor(ID, name, dept_name, salary)\\)\n\nFormally, given sets \\(D_{1},D_{2},...,D_{n}\\), a relation \\(r\\) is a subset of \\[\nD_{1} \\times D_{2} \\times ... \\times D_{n}\n\\] Thus, a relation is a set of \\(n\\)-tuples \\((a_{1},a_{2},...,a_{n})\\) where each \\(a_{i} \\in D_{i}\\)\nThe current values (relation instance) of a relation are specified in a table\nExample: \\(instuctor \\equiv (String(5) \\times String \\times String \\times Number+)\\), where \\(ID \\in String(5)\\), \\(name \\in String\\), \\(dept\\_name \\in String\\), \\(salary \\in Number+\\)\n\n\n\n\n\nOrder of tuples/rows in a relation is irrelevant (tuples may be stored in an arbitrary order)\nNo two tuples in a relation are the same (i.e., no duplicate tuples)\nExample: instructor relation with unordered tuples\n\n\n\n\nID\nname\ndept_name\nsalary\n\n\n\n\n22222\nEinstein\nPhysics\n95000\n\n\n12121\nWu\nFinance\n90000\n\n\n32343\nEl Said\nHistory\n60000\n\n\n45565\nKatz\nComp. Sci.\n75000\n\n\n98345\nKim\nElec. Eng.\n80000\n\n\n76766\nCrick\nBiology\n72000\n\n\n10101\nSrinivasan\nComp. Sci.\n65000\n\n\n58583\nCalifieri\nHistory\n62000\n\n\n82821\nBrandt\nComp. Sci.\n92000\n\n\n15151\nMozart\nMusic\n40000\n\n\n33456\nGold\nPhysics\n87000\n\n\n76543\nSingh\nFinance\n80000\n\n\n\n\n\n\n\nLet \\(K \\subseteq R\\), where \\(R\\) is the set of attributes in the relation.\n\\(K\\) is a superkey of \\(R\\) if values for \\(K\\) are sufficient to identify a unique tuple of each possible relation \\(r(R)\\)\n\nExample: \\(\\{ID\\}\\) and \\(\\{ID, name\\}\\) are both superkeys of \\(instructor\\)\n\nSuperkey \\(K\\) is a candidate key if \\(K\\) is minimal\n\nExample: \\(\\{ID\\}\\) is a candidate key for \\(instructor\\)\n\nOne of the candidate keys is chosen as the primary key\n\nWhich one?\n\nA surrogate key or synthetic key in a database is a unique identifier for either an entity in the modeled world or an object in the database.\n\nThe surrogate key is not derived from application data, unlike a natural (or business) key which is derived from application data.\n\n\n\n\n\n\nStudents = Roll#, First Name, Last Name, DoB, Passport#, Aadhaar#, Department\nSuper Key: Roll#, {Roll#, DoB}\nCandidate Keys: Roll#, {First Name, Last Name}, Aadhaar#\n\nPassport# cannot be a key. Why?\nNull values are allowed for Passport# (a student may not have a passport)\n\nPrimary Key: Roll#\n\nCan we use Aadhaar# as the primary key?\nIt may suffice for unique identification. But Roll# may have additional useful information. For example: 14CS92P01\n\nRead 14CS92P01 as 14-CS-92-P-01\n14: Admission in 2014\nCS: Department = CS\n92: Category of Student\nP: Type of admission: Project\n01: Serial Number\n\n\n\n\n\n\n\nForeign key constraint: Value in one relation must appear in another\n\nReferencing relation\n\nEnrolment: Foreign keys - Roll#, Course#\n\nReferenced relation\n\nStudents, Courses\n\n\nA compound key consists of more than one attribute to uniquely identify an entity occurrence\n\nEach attribute, which makes up the key, is a simple key in its own right\n{Roll#, Course#}\n\n\n\nStudents\n\n\n\n\n\n\n\n\n\n\n\nRoll #\nFirst Name\nLast Name\nDoB\nPassport #\nAadhaar #\nDepartment\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCourses\n\n\nCourse #\nCourse Name\nCredits\nL-T-P\nDepartment\n\n\n\n\n\n\nEnrolment\n\n\nRoll #\nCourse #\nInstructor ID\n\n\n\n\n\n\n\n\nProcedural viz-a-viz Non-procedural or Declarative Paradigms - Procedural programming requires that the programmer specify the exact steps to be taken to solve a problem. - That is, how to get the output for the range of required inputs - The programmer must know an appropriate algorithm\n\nDeclarative programming requires a more descriptive approach.\n\nThe programmer must know what relationships hold between various entities\n\nExample - Square root of \\(n\\)\n\nProcedural\n\nGuess \\(x_0\\) (close to root of \\(n\\))\n\\(i \\leftarrow 0\\)\n\\(x_{i+1} \\leftarrow \\frac{(x_i + \\frac{n}{x_i})}{2}\\)\nRepeat Step 2 if \\(|x_{i+1} - x_i| &gt; \\delta\\)\n\nDeclarative\n\nRoot of \\(n\\) is \\(m\\) such that \\(m^2 = n\\)"
  },
  {
    "objectID": "week-2/w2.html#lecture-2.2-introduction-to-relational-model2",
    "href": "week-2/w2.html#lecture-2.2-introduction-to-relational-model2",
    "title": "DBMS - Week 2",
    "section": "Lecture 2.2: Introduction to Relational Model/2",
    "text": "Lecture 2.2: Introduction to Relational Model/2\n\nBasic Properties of Relations\n\nA relation is a set. Hence,\nOrdering of tuples is immaterial\nAll rows/tuples must be distinct\n\n\n\nSelect Operation - selection of rows (tuples)\nRelation \\(r\\)\n\n\n\n\\(A\\)\n\\(B\\)\n\\(C\\)\n\\(D\\)\n\n\n\n\n\\(\\alpha\\)\n\\(\\alpha\\)\n\\(1\\)\n\\(7\\)\n\n\n\\(\\alpha\\)\n\\(\\beta\\)\n\\(5\\)\n\\(7\\)\n\n\n\\(\\beta\\)\n\\(\\beta\\)\n\\(12\\)\n\\(3\\)\n\n\n\\(\\beta\\)\n\\(\\beta\\)\n\\(23\\)\n\\(10\\)\n\n\n\n\\(\\sigma_{A=B \\wedge D &gt; 5}(r)\\)\n\n\n\n\\(A\\)\n\\(B\\)\n\\(C\\)\n\\(D\\)\n\n\n\n\n\\(\\alpha\\)\n\\(\\alpha\\)\n\\(1\\)\n\\(7\\)\n\n\n\\(\\beta\\)\n\\(\\beta\\)\n\\(23\\)\n\\(10\\)\n\n\n\n\n\nProject Operation - selection of columns (attributes)\nRelation \\(r\\)\n\n\n\n\\(A\\)\n\\(B\\)\n\\(C\\)\n\n\n\n\n\\(\\alpha\\)\n\\(10\\)\n\\(1\\)\n\n\n\\(\\alpha\\)\n\\(20\\)\n\\(1\\)\n\n\n\\(\\beta\\)\n\\(30\\)\n\\(1\\)\n\n\n\\(\\beta\\)\n\\(40\\)\n\\(2\\)\n\n\n\n\\(\\pi_{A,C}(r)\\)\n\n\n\n\\(A\\)\n\\(C\\)\n\n\n\n\n\\(\\alpha\\)\n\\(1\\)\n\n\n\\(\\beta\\)\n\\(1\\)\n\n\n\\(\\beta\\)\n\\(2\\)\n\n\n\n\n\nUnion of two relations\nRelation \\(r\\)\n\n\n\n\\(A\\)\n\\(B\\)\n\n\n\n\n\\(\\alpha\\)\n\\(1\\)\n\n\n\\(\\alpha\\)\n\\(2\\)\n\n\n\\(\\beta\\)\n\\(1\\)\n\n\n\nRelation \\(s\\)\n\n\n\n\\(A\\)\n\\(B\\)\n\n\n\n\n\\(\\alpha\\)\n\\(2\\)\n\n\n\\(\\beta\\)\n\\(3\\)\n\n\n\n\\(r \\cup s\\)\n\n\n\n\\(A\\)\n\\(B\\)\n\n\n\n\n\\(\\alpha\\)\n\\(1\\)\n\n\n\\(\\alpha\\)\n\\(2\\)\n\n\n\\(\\beta\\)\n\\(1\\)\n\n\n\\(\\beta\\)\n\\(3\\)\n\n\n\n\n\nSet Difference of two relations\nRelation \\(r\\)\n\n\n\n\\(A\\)\n\\(B\\)\n\n\n\n\n\\(\\alpha\\)\n\\(1\\)\n\n\n\\(\\alpha\\)\n\\(2\\)\n\n\n\\(\\beta\\)\n\\(1\\)\n\n\n\nRelation \\(s\\)\n\n\n\n\\(A\\)\n\\(B\\)\n\n\n\n\n\\(\\alpha\\)\n\\(2\\)\n\n\n\\(\\beta\\)\n\\(3\\)\n\n\n\n\\(r - s\\)\n\n\n\n\\(A\\)\n\\(B\\)\n\n\n\n\n\\(\\alpha\\)\n\\(1\\)\n\n\n\\(\\beta\\)\n\\(1\\)\n\n\n\n\n\nSet Intersection of two relations\nRelation \\(r\\)\n\n\n\n\\(A\\)\n\\(B\\)\n\n\n\n\n\\(\\alpha\\)\n\\(1\\)\n\n\n\\(\\alpha\\)\n\\(2\\)\n\n\n\\(\\beta\\)\n\\(1\\)\n\n\n\nRelation \\(s\\)\n\n\n\n\\(A\\)\n\\(B\\)\n\n\n\n\n\\(\\alpha\\)\n\\(2\\)\n\n\n\\(\\beta\\)\n\\(3\\)\n\n\n\n\\(r \\cap s\\)\n\n\n\n\\(A\\)\n\\(B\\)\n\n\n\n\n\\(\\alpha\\)\n\\(2\\)\n\n\n\nNote: \\(r \\cap s = r-(r-s)\\)\n\n\nJoining two relations - Cartesian Product\nRelation \\(r\\)\n\n\n\n\\(A\\)\n\\(B\\)\n\n\n\n\n\\(\\alpha\\)\n\\(1\\)\n\n\n\\(\\beta\\)\n\\(2\\)\n\n\n\nRelation \\(s\\)\n\n\n\n\\(C\\)\n\\(D\\)\n\\(E\\)\n\n\n\n\n\\(\\alpha\\)\n\\(10\\)\n\\(\\text{a}\\)\n\n\n\\(\\beta\\)\n\\(10\\)\n\\(\\text{a}\\)\n\n\n\\(\\beta\\)\n\\(20\\)\n\\(\\text{b}\\)\n\n\n\\(\\gamma\\)\n\\(10\\)\n\\(\\text{b}\\)\n\n\n\n\\(r \\times s\\)\n\n\n\n\\(A\\)\n\\(B\\)\n\\(C\\)\n\\(D\\)\n\\(E\\)\n\n\n\n\n\\(\\alpha\\)\n\\(1\\)\n\\(\\alpha\\)\n\\(10\\)\n\\(\\text{a}\\)\n\n\n\\(\\alpha\\)\n\\(1\\)\n\\(\\beta\\)\n\\(10\\)\n\\(\\text{a}\\)\n\n\n\\(\\alpha\\)\n\\(1\\)\n\\(\\beta\\)\n\\(20\\)\n\\(\\text{b}\\)\n\n\n\\(\\alpha\\)\n\\(1\\)\n\\(\\gamma\\)\n\\(10\\)\n\\(\\text{b}\\)\n\n\n\\(\\beta\\)\n\\(2\\)\n\\(\\alpha\\)\n\\(10\\)\n\\(\\text{a}\\)\n\n\n\\(\\beta\\)\n\\(2\\)\n\\(\\beta\\)\n\\(10\\)\n\\(\\text{a}\\)\n\n\n\\(\\beta\\)\n\\(2\\)\n\\(\\beta\\)\n\\(20\\)\n\\(\\text{b}\\)\n\n\n\\(\\beta\\)\n\\(2\\)\n\\(\\gamma\\)\n\\(10\\)\n\\(\\text{b}\\)\n\n\n\nCartesian Product: Naming issue\nRelation \\(r\\)\n\n\n\n\\(A\\)\n\\(B\\)\n\n\n\n\n\\(\\alpha\\)\n\\(1\\)\n\n\n\\(\\beta\\)\n\\(2\\)\n\n\n\nRelation \\(s\\)\n\n\n\n\\(B\\)\n\\(D\\)\n\\(E\\)\n\n\n\n\n\\(\\alpha\\)\n\\(10\\)\n\\(\\text{a}\\)\n\n\n\\(\\beta\\)\n\\(10\\)\n\\(\\text{a}\\)\n\n\n\\(\\beta\\)\n\\(20\\)\n\\(\\text{b}\\)\n\n\n\\(\\gamma\\)\n\\(10\\)\n\\(\\text{b}\\)\n\n\n\n\\(r \\times s\\)\n\n\n\n\\(A\\)\n\\(r.B\\)\n\\(s.B\\)\n\\(D\\)\n\\(E\\)\n\n\n\n\n\\(\\alpha\\)\n\\(1\\)\n\\(\\alpha\\)\n\\(10\\)\n\\(\\text{a}\\)\n\n\n\\(\\alpha\\)\n\\(1\\)\n\\(\\beta\\)\n\\(10\\)\n\\(\\text{a}\\)\n\n\n\\(\\alpha\\)\n\\(1\\)\n\\(\\beta\\)\n\\(20\\)\n\\(\\text{b}\\)\n\n\n\\(\\alpha\\)\n\\(1\\)\n\\(\\gamma\\)\n\\(10\\)\n\\(\\text{b}\\)\n\n\n\\(\\beta\\)\n\\(2\\)\n\\(\\alpha\\)\n\\(10\\)\n\\(\\text{a}\\)\n\n\n\\(\\beta\\)\n\\(2\\)\n\\(\\beta\\)\n\\(10\\)\n\\(\\text{a}\\)\n\n\n\\(\\beta\\)\n\\(2\\)\n\\(\\beta\\)\n\\(20\\)\n\\(\\text{b}\\)\n\n\n\\(\\beta\\)\n\\(2\\)\n\\(\\gamma\\)\n\\(10\\)\n\\(\\text{b}\\)\n\n\n\n\n\nRenaming a table\nRenaming a table allows us to refer to a relation, say \\(E\\), by more than one name. The operator \\[\n\\rho_{X}(E) \\] renames relation \\(E\\) as \\(X\\).\nRelation \\(r\\)\n\n\n\n\\(A\\)\n\\(B\\)\n\n\n\n\n\\(\\alpha\\)\n\\(1\\)\n\n\n\\(\\beta\\)\n\\(2\\)\n\n\n\n\\(r \\times \\rho_{s}(r)\\)\n\n\n\n\\(r.A\\)\n\\(r.B\\)\n\\(s.A\\)\n\\(s.B\\)\n\n\n\n\n\\(\\alpha\\)\n\\(1\\)\n\\(\\alpha\\)\n\\(1\\)\n\n\n\\(\\alpha\\)\n\\(1\\)\n\\(\\beta\\)\n\\(2\\)\n\n\n\\(\\beta\\)\n\\(2\\)\n\\(\\alpha\\)\n\\(1\\)\n\n\n\\(\\beta\\)\n\\(2\\)\n\\(\\beta\\)\n\\(2\\)\n\n\n\n\n\nComposition of Operations\nCan build expressions using multiple operations\nExample: \\(\\sigma_{A=C}(r \\times s)\\)\n\\(r \\times s\\)\n\n\n\n\\(A\\)\n\\(B\\)\n\\(C\\)\n\\(D\\)\n\\(E\\)\n\n\n\n\n\\(\\alpha\\)\n\\(1\\)\n\\(\\alpha\\)\n\\(10\\)\n\\(\\text{a}\\)\n\n\n\\(\\alpha\\)\n\\(1\\)\n\\(\\beta\\)\n\\(10\\)\n\\(\\text{a}\\)\n\n\n\\(\\alpha\\)\n\\(1\\)\n\\(\\beta\\)\n\\(20\\)\n\\(\\text{b}\\)\n\n\n\\(\\alpha\\)\n\\(1\\)\n\\(\\gamma\\)\n\\(10\\)\n\\(\\text{b}\\)\n\n\n\\(\\beta\\)\n\\(2\\)\n\\(\\alpha\\)\n\\(10\\)\n\\(\\text{a}\\)\n\n\n\\(\\beta\\)\n\\(2\\)\n\\(\\beta\\)\n\\(10\\)\n\\(\\text{a}\\)\n\n\n\\(\\beta\\)\n\\(2\\)\n\\(\\beta\\)\n\\(20\\)\n\\(\\text{b}\\)\n\n\n\\(\\beta\\)\n\\(2\\)\n\\(\\gamma\\)\n\\(10\\)\n\\(\\text{b}\\)\n\n\n\n\\(\\sigma_{A=C}(r \\times s)\\)\n\n\n\n\\(A\\)\n\\(B\\)\n\\(C\\)\n\\(D\\)\n\\(E\\)\n\n\n\n\n\\(\\alpha\\)\n\\(1\\)\n\\(\\alpha\\)\n\\(10\\)\n\\(\\text{a}\\)\n\n\n\\(\\beta\\)\n\\(2\\)\n\\(\\beta\\)\n\\(10\\)\n\\(\\text{a}\\)\n\n\n\\(\\beta\\)\n\\(2\\)\n\\(\\beta\\)\n\\(20\\)\n\\(\\text{b}\\)\n\n\n\n\n\nJoining two relations - Natural Join\n\nLet \\(r\\) and \\(s\\) be relations on schemas \\(R\\) and \\(S\\) respectively. Then, the “natural join” of relations \\(R\\) and \\(S\\) is a relation on schema \\(R \\cup S\\) obtained as follows:\nConsider each pair of tuples \\(t_{r}\\) from \\(r\\) and \\(t_{s}\\) from \\(s\\)\nIf \\(t_{r}\\) and \\(t_{s}\\) have the same value on each of the attributes in \\(R \\cap S\\), add a tuple \\(t\\) to the result, where\n\n\\(t\\) has the same value as \\(t_{r}\\) on \\(r\\)\n\\(t\\) has the same value as \\(t_{s}\\) on \\(s\\)\n\n\n\n\nNatural Join Example\nRelation \\(r\\)\n\n\n\n\\(A\\)\n\\(B\\)\n\\(C\\)\n\\(D\\)\n\n\n\n\n\\(\\alpha\\)\n\\(1\\)\n\\(\\alpha\\)\n\\(\\text{a}\\)\n\n\n\\(\\beta\\)\n\\(2\\)\n\\(\\gamma\\)\n\\(\\text{a}\\)\n\n\n\\(\\gamma\\)\n\\(4\\)\n\\(\\beta\\)\n\\(\\text{b}\\)\n\n\n\\(\\alpha\\)\n\\(1\\)\n\\(\\gamma\\)\n\\(\\text{a}\\)\n\n\n\\(\\delta\\)\n\\(2\\)\n\\(\\beta\\)\n\\(\\text{b}\\)\n\n\n\nRelation \\(s\\)\n\n\n\n\\(B\\)\n\\(D\\)\n\\(E\\)\n\n\n\n\n\\(1\\)\n\\(\\text{a}\\)\n\\(\\alpha\\)\n\n\n\\(3\\)\n\\(\\text{a}\\)\n\\(\\beta\\)\n\n\n\\(1\\)\n\\(\\text{a}\\)\n\\(\\gamma\\)\n\n\n\\(2\\)\n\\(\\text{b}\\)\n\\(\\delta\\)\n\n\n\\(3\\)\n\\(\\text{b}\\)\n\\(\\epsilon\\)\n\n\n\nNatural join - \\(r \\bowtie s\\)\n\n\\(\\pi_{A,r.B,C,r.D,E}(\\sigma_{r.B=s.B \\wedge r.D=s.D}(r \\times s))\\)\n\n\n\\(A\\)\n\\(B\\)\n\\(C\\)\n\\(D\\)\n\\(E\\)\n\n\n\n\n\\(\\alpha\\)\n\\(1\\)\n\\(\\text{a}\\)\n\\(\\text{a}\\)\n\\(\\alpha\\)\n\n\n\\(\\alpha\\)\n\\(1\\)\n\\(\\alpha\\)\n\\(\\text{a}\\)\n\\(\\gamma\\)\n\n\n\\(\\alpha\\)\n\\(1\\)\n\\(\\gamma\\)\n\\(\\text{a}\\)\n\\(\\alpha\\)\n\n\n\\(\\alpha\\)\n\\(1\\)\n\\(\\gamma\\)\n\\(\\text{a}\\)\n\\(\\gamma\\)\n\n\n\\(\\delta\\)\n\\(2\\)\n\\(\\beta\\)\n\\(\\text{b}\\)\n\\(\\delta\\)\n\n\n\n\n\nAggregate Operators\nCan compute: - SUM - AVG - MAX - MIN\n\nRelational operators always return a relation.\nAggregate operators return a single value."
  },
  {
    "objectID": "week-2/w2.html#lecture-2.3-introduction-to-sql1",
    "href": "week-2/w2.html#lecture-2.3-introduction-to-sql1",
    "title": "DBMS - Week 2",
    "section": "Lecture 2.3: Introduction to SQL/1",
    "text": "Lecture 2.3: Introduction to SQL/1\n\nHistory of Query Language\n\nIBM developed Structured English Query Language (SEQUEL) as a part of System R project. Renamed Structured Query Language (SQL: pronounced as “sequel”)\nANSI and ISO standards for SQL:\n\n\n\n\n\n\n\n\nSQL-86\nFirst formalized by ANSI\n\n\nSQL-89\n+ Integrity constraints\n\n\nSQL-92\nMajor revision (ISO/IEC 9075 standard), De-facto Industry Standard\n\n\nSQL:1999\n+ Regular Expression Matching, Recursive Queries, Triggers, Support for Procedural and Control Flow Statements, Nonscalar types (Arrays), and Some OO features (structured types), Embedding SQL in Java (SQL/OLB), and Embedding Java in SQL (SQL/JRT)\n\n\nSQL:2003\n+ XML features (SQL/XML), Window Functions, Standardized Sequences, and Columns with Auto-generated Values (identity columns)\n\n\nSQL:2006\n+ Ways of importing and storing XML data in an SQL database, manipulating it within the database, and publishing both XML and conventional SQL-data in XML form\n\n\nSQL:2008\nLegalizes ORDER BY outside Cursor Definitions\n+ INSTEAD OF Triggers, TRUNCATE Statement, and FETCH Clause\n\n\nSQL:2011\n+ Temporal Data (PERIOD FOR)\nEnhancements to Window Functions, and Enhancements to FETCH Clause\n\n\nSQL:2016\n+ Row Pattern Matching, Polymorphic Table Functions, and JSON\n\n\nSQL:2019\n+ Multi-Dimensional Arrays (MDarray type and operators)\n\n\n\n\n\nHistory of Query Language (2): Compliance\n\nSQL is the de-facto standard today for relational or structured data systems\nCommercial systems as well as open systems may be fully or partially compliant to one or more standards from SQL-92 onwards\nNot all examples here may work on your particular system. Check your system’s SQL documentation\n\n\n\nHistory of Query Language (3): Alternatives\n\nThere aren’t any alternatives to SQL for speaking to a relational database (that is, SQL as a protocol), but there are many alternatives to writing SQL in the applications\nThese alternatives have been implemented in the form of frontends for working with relational databases. Some examples of a frontend include (for a section of languages):\n\nSchemeQL and CLSQL, which are probably the most flexible, owing to their Lisp heritage, but they also look a lot more like SQL than other frontends\nLINQ (in .NET)\nScalaQL and ScalaQuery (in Scala)\nSqlStatement, ActiveRecord and many others in Ruby\nHaskellDB\n…the list goes on for many other languages\n\n\n\n\nHistory of Query Language (4): Derivatives\n\nThere are several query languages that are derived from or inspired by SQL. Of these, the most popular and effective is SPARQL.\n\nSPARQL (pronounced “sparkle”, a recursive acronym for SPARQL Protocol and RDF Query Language) is an RDF query language\n\nA semantic query language for databases - able to retrieve and manipulate data stored in Resource Description Framework (RDF) format.\nIt has been standardized by the W3C as key technology of the Semantic Web\nVersions:\n\nSPARQL 1.0 (January 2008)\nSPARQL 1.1 (March 2013)\n\nUsed as the query language for several NoSQL systems - particularly the graph databases that use RDF as storage format\n\n\n\n\n\nData Definition Language (DDL)\nThe SQL data definition language (DDL) allwos the specification of information about relations, including: - The Schema for each Relation - The Domain of values associated with each Attribute - Integrity Constraints - Also other information such as: - The set of Indices to be maintained for each relation - Security and Authorization information for each relation - The Physical Storage Structure for each relation on disk\n\n\nDomain Types in SQL\n\nchar(n): Fixed-length character string, with user-specified length \\(n\\)\nvarchar(n): Variable-length character strings, with user-specified maximum length \\(n\\)\nint: Integer (a finite subset of the integers that is machine-dependent)\nsmallint(n): Small integer (a machine-dependent subset of the integer domain type)\nnumeric(p,d): Fixed-point number, with user-specified precision of \\(p\\) digits, with \\(d\\) digits to the right of the decimal point. (Example: numeric(3,1), allows 44.5 to be stored exactly but not 444.5 or 0.32)\nreal, double precision: Floating-point and double-precision floating-point numbers with machine-dependent precision\nfloat(n): Floating-point number, with user-specified precision of at least \\(n\\) bits\n\n\n\nCreate Table Construct\n\nAn SQL relation is defined using the create table command:\ncreate table \\(r\\) ( \\[ (A_{1}D_{1}, A_{2}D_{2}, ..., A_{n}D_{n}), \\] \\[ (\\text{integrity-constraint}_1), \\] \\[...\\] \\[ (\\text{integrity-constraint}_k)); \\]\n\n\\(r\\) is the name of the relation\neach \\(A_i\\) is an attribute name in the schema of relation \\(r\\)\n\\(D_i\\) is the data type of values in the domain of attribute \\(A_i\\)\n\n\n\n\nBased on a question from Practice Assignment 2\nGiven the schema:\n\\[\n\\text{studentInfo}(\\text{enrollment\\_num}, \\text{class}, \\text{section}, \\text{roll}, \\text{name})\n\\]\nand the candidate keys:\n\n\\(\\{\\text{enrollment\\_num}\\}\\)\n\\(\\{\\text{class}, \\text{section}, \\text{roll}\\}\\)\n\n\n\nSuperkeys involving \\(\\{\\text{enrollment\\_num}\\}\\):\nFor the candidate key \\(\\{\\text{enrollment\\_num}\\}\\), we can form a superkey by combining it with any subset of the remaining attributes \\(\\{\\text{class}, \\text{section}, \\text{roll}, \\text{name}\\}\\). The number of such subsets is \\(2^4 = 16\\), which includes the empty set.\n\n\nSuperkeys involving \\(\\{\\text{class}, \\text{section}, \\text{roll}\\}\\):\nFor the candidate key \\(\\{\\text{class}, \\text{section}, \\text{roll}\\}\\), we can form a superkey by combining it with any subset of the remaining attributes \\(\\{\\text{enrollment\\_num}, \\text{name}\\}\\). The number of such subsets is \\(2^2 = 4\\), which includes the empty set.\nHowever, we must ensure we do not double count the combination of both candidate keys. Specifically, the combination \\(\\{\\text{enrollment\\_num}, \\text{class}, \\text{section}, \\text{roll}\\}\\) is a superkey common to both sets.\n\n\nCorrect Count of Superkeys:\n\nSuperkeys involving \\(\\{\\text{enrollment\\_num}\\}\\):\n\n\\(16\\) superkeys (including \\(\\{\\text{enrollment\\_num}\\}\\) itself).\n\nSuperkeys involving \\(\\{\\text{class}, \\text{section}, \\text{roll}\\}\\):\n\n\\(4\\) superkeys (including \\(\\{\\text{class}, \\text{section}, \\text{roll}\\}\\) itself).\n\n\nTotaling these gives us \\(16 + 4 = 20\\) superkeys.\nHowever, we must subtract 2 for the overlap between the two candidate keys:\n\\[\n20 - 2 = 18\n\\]\nThus, the maximum number of possible superkeys of studentInfo is 18."
  },
  {
    "objectID": "maybe/index.html",
    "href": "maybe/index.html",
    "title": "dbms",
    "section": "",
    "text": "This is a Quarto website.\nTo learn more about Quarto websites visit https://quarto.org/docs/websites.\n\n\nHello, World!"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "DBMS",
    "section": "",
    "text": "This is a collection of notes on Database Management Systems (DBMS). The notes are based on the book “Database System Concepts” by Silberschatz, Korth, and Sudarshan.",
    "crumbs": [
      "DBMS"
    ]
  },
  {
    "objectID": "pages/w3.html#select-distinct",
    "href": "pages/w3.html#select-distinct",
    "title": "DBMS - Week 3",
    "section": "Select distinct",
    "text": "Select distinct\n\nFrom the classroom relation, find the names of buildings in which every individual classroom has capacity less than 100 (removing the duplicates).\n\n\n\n * sqlite:///univdb-sqlite.db\nDone.\n\n\n\n\n\nbuilding\nroom_number\ncapacity\n\n\n\n\nPackard\n101\n500\n\n\nPainter\n514\n10\n\n\nTaylor\n3128\n70\n\n\nWatson\n100\n30\n\n\nWatson\n120\n50\n\n\n\n\n\n\n\n('Packard', '101', 500)\n('Painter', '514', 10)\n('Taylor', '3128', 70)\n('Watson', '100', 30)\n('Watson', '120', 50)\n\n\nQuery:\n\n\n * sqlite:///univdb-sqlite.db\nDone.\n\n\n\n\n\nbuilding\n\n\n\n\nPainter\n\n\nTaylor\n\n\nWatson\n\n\n\n\n\n\n\n * sqlite:///univdb-sqlite.db\nDone.\n\n\n\n\n\n\n\nbuilding\n\n\n\n\nPainter\n\n\nTaylor\n\n\nWatson\n\n\n\n\n\n\n\n('Painter',)\n('Taylor',)\n('Watson',)",
    "crumbs": [
      "DBMS",
      "Week 3"
    ]
  },
  {
    "objectID": "pages/w3.html#select-all",
    "href": "pages/w3.html#select-all",
    "title": "DBMS - Week 3",
    "section": "Select all",
    "text": "Select all\n\nFrom the classroom relation, find the names of buildings in which every individual classroom has a capacity of less than 100 (without removing the duplicates).\n\n\n\n * sqlite:///univdb-sqlite.db\nDone.\n\n\n\n\n\nbuilding\nroom_number\ncapacity\n\n\n\n\nPackard\n101\n500\n\n\nPainter\n514\n10\n\n\nTaylor\n3128\n70\n\n\nWatson\n100\n30\n\n\nWatson\n120\n50\n\n\n\n\n\nQuery:\n\n\n * sqlite:///univdb-sqlite.db\nDone.\n\n\n\n\n\nbuilding\n\n\n\n\nPainter\n\n\nTaylor\n\n\nWatson\n\n\nWatson\n\n\n\n\n\n\nNote that duplicate retention is the default and hence it is a common practice to skip all immediately after select.",
    "crumbs": [
      "DBMS",
      "Week 3"
    ]
  },
  {
    "objectID": "pages/w3.html#cartesian-product",
    "href": "pages/w3.html#cartesian-product",
    "title": "DBMS - Week 3",
    "section": "Cartesian product",
    "text": "Cartesian product\n\n\n * sqlite:///univdb-sqlite.db\nDone.\n\n\n\n\n\ndept_name\nbuilding\nbudget\n\n\n\n\nBiology\nWatson\n90000\n\n\nComp. Sci.\nTaylor\n100000\n\n\nElec. Eng.\nTaylor\n85000\n\n\nFinance\nPainter\n120000\n\n\nHistory\nPainter\n50000\n\n\nMusic\nPackard\n80000\n\n\nPhysics\nWatson\n70000\n\n\n\n\n\n\n\n * sqlite:///univdb-sqlite.db\nDone.\n\n\n\n\n\nID\nname\ndept_name\ntot_cred\n\n\n\n\n00128\nZhang\nComp. Sci.\n102\n\n\n12345\nShankar\nComp. Sci.\n32\n\n\n19991\nBrandt\nHistory\n80\n\n\n23121\nChavez\nFinance\n110\n\n\n44553\nPeltier\nPhysics\n56\n\n\n45678\nLevy\nPhysics\n46\n\n\n54321\nWilliams\nComp. Sci.\n54\n\n\n55739\nSanchez\nMusic\n38\n\n\n70557\nSnow\nPhysics\n0\n\n\n76543\nBrown\nComp. Sci.\n58\n\n\n76653\nAoi\nElec. Eng.\n60\n\n\n98765\nBourikas\nElec. Eng.\n98\n\n\n98988\nTanaka\nBiology\n120\n\n\n\n\n\n\nFind the list of all students of departments which have a budget &lt; $0.1million\n\n\n\n * sqlite:///univdb-sqlite.db\nDone.\n\n\n\n\n\nname\nbudget\n\n\n\n\nBrandt\n50000\n\n\nPeltier\n70000\n\n\nLevy\n70000\n\n\nSanchez\n80000\n\n\nSnow\n70000\n\n\nAoi\n85000\n\n\nBourikas\n85000\n\n\nTanaka\n90000\n\n\n\n\n\n\nThe above query first generates every possible student-department pair, which is the Cartesian product of the student and department relations. Then, it filters out all the rows with student.dept_name = department.dept_name and department.budget &lt; 100000.\nThe common attribute dept_name in the resulting table is renamed using the relation name - student.dept_name and department.dept_name.",
    "crumbs": [
      "DBMS",
      "Week 3"
    ]
  },
  {
    "objectID": "pages/w3.html#rename-as-operation",
    "href": "pages/w3.html#rename-as-operation",
    "title": "DBMS - Week 3",
    "section": "Rename AS Operation",
    "text": "Rename AS Operation\n\nThe same query above can be framed by renaming the tables as follows:\n\n\n\n * sqlite:///univdb-sqlite.db\nDone.\n\n\n\n\n\nstudentname\ndeptbudget\n\n\n\n\nBrandt\n50000\n\n\nPeltier\n70000\n\n\nLevy\n70000\n\n\nSanchez\n80000\n\n\nSnow\n70000\n\n\nAoi\n85000\n\n\nBourikas\n85000\n\n\nTanaka\n90000\n\n\n\n\n\n\nThe above query renames the relations student and department as S and D respectively\nIt also displays the attribute name as StudentName and budget as DeptBudget\nNote that the budget attribute does not have any prefix because it occurs only in the department relation.",
    "crumbs": [
      "DBMS",
      "Week 3"
    ]
  },
  {
    "objectID": "pages/w3.html#where-and-and-or",
    "href": "pages/w3.html#where-and-and-or",
    "title": "DBMS - Week 3",
    "section": "Where: AND and OR",
    "text": "Where: AND and OR\n\nFrom the instructor and department relations, find out the names of all instructors whose department is Finance or whose department is in any of the following buildings: Watson, Taylor.\n\n\n\n * sqlite:///univdb-sqlite.db\nDone.\n\n\n\n\n\nID\nname\ndept_name\nsalary\n\n\n\n\n10101\nSrinivasan\nComp. Sci.\n65000\n\n\n12121\nWu\nFinance\n90000\n\n\n15151\nMozart\nMusic\n40000\n\n\n22222\nEinstein\nPhysics\n95000\n\n\n32343\nEl Said\nHistory\n60000\n\n\n33456\nGold\nPhysics\n87000\n\n\n45565\nKatz\nComp. Sci.\n75000\n\n\n58583\nCalifieri\nHistory\n62000\n\n\n76543\nSingh\nFinance\n80000\n\n\n76766\nCrick\nBiology\n72000\n\n\n83821\nBrandt\nComp. Sci.\n92000\n\n\n98345\nKim\nElec. Eng.\n80000\n\n\n\n\n\n\n\n * sqlite:///univdb-sqlite.db\nDone.\n\n\n\n\n\ndept_name\nbuilding\nbudget\n\n\n\n\nBiology\nWatson\n90000\n\n\nComp. Sci.\nTaylor\n100000\n\n\nElec. Eng.\nTaylor\n85000\n\n\nFinance\nPainter\n120000\n\n\nHistory\nPainter\n50000\n\n\nMusic\nPackard\n80000\n\n\nPhysics\nWatson\n70000\n\n\n\n\n\nQuery:\n\n\n * sqlite:///univdb-sqlite.db\nDone.\n\n\n\n\n\nname\n\n\n\n\nSrinivasan\n\n\nWu\n\n\nEinstein\n\n\nGold\n\n\nKatz\n\n\nSingh\n\n\nCrick\n\n\nBrandt\n\n\nKim",
    "crumbs": [
      "DBMS",
      "Week 3"
    ]
  },
  {
    "objectID": "pages/w3.html#string-operations",
    "href": "pages/w3.html#string-operations",
    "title": "DBMS - Week 3",
    "section": "String Operations",
    "text": "String Operations\n\n\n * sqlite:///univdb-sqlite.db\nDone.\n\n\n\n\n\ncourse_id\ntitle\ndept_name\ncredits\n\n\n\n\nBIO-101\nIntro. to Biology\nBiology\n4\n\n\nBIO-301\nGenetics\nBiology\n4\n\n\nBIO-399\nComputational Biology\nBiology\n3\n\n\nCS-101\nIntro. to Computer Science\nComp. Sci.\n4\n\n\nCS-190\nGame Design\nComp. Sci.\n4\n\n\nCS-315\nRobotics\nComp. Sci.\n3\n\n\nCS-319\nImage Processing\nComp. Sci.\n3\n\n\nCS-347\nDatabase System Concepts\nComp. Sci.\n3\n\n\nEE-181\nIntro. to Digital Systems\nElec. Eng.\n3\n\n\nFIN-201\nInvestment Banking\nFinance\n3\n\n\nHIS-351\nWorld History\nHistory\n3\n\n\nMU-199\nMusic Video Production\nMusic\n3\n\n\nPHY-101\nPhysical Principles\nPhysics\n4\n\n\n\n\n\n\nFrom the course relation, find the titles of all courses whose course_id has three alphabets indicating the department.\n\n\n\n * sqlite:///univdb-sqlite.db\nDone.\n\n\n\n\n\ntitle\n\n\n\n\nIntro. to Biology\n\n\nGenetics\n\n\nComputational Biology\n\n\nInvestment Banking\n\n\nWorld History\n\n\nPhysical Principles\n\n\n\n\n\n\nThe course_id of each department either has 2 or 3 alphabets in the beginning, followed by a hypher and then followed by 3 digits. The above query returns the names of all courses whose course_id has 3 alphabets in the beginning.",
    "crumbs": [
      "DBMS",
      "Week 3"
    ]
  },
  {
    "objectID": "pages/w3.html#order-by",
    "href": "pages/w3.html#order-by",
    "title": "DBMS - Week 3",
    "section": "Order By",
    "text": "Order By\n\n\n * sqlite:///univdb-sqlite.db\nDone.\n\n\n\n\n\nID\nname\ndept_name\ntot_cred\n\n\n\n\n00128\nZhang\nComp. Sci.\n102\n\n\n12345\nShankar\nComp. Sci.\n32\n\n\n19991\nBrandt\nHistory\n80\n\n\n23121\nChavez\nFinance\n110\n\n\n44553\nPeltier\nPhysics\n56\n\n\n45678\nLevy\nPhysics\n46\n\n\n54321\nWilliams\nComp. Sci.\n54\n\n\n55739\nSanchez\nMusic\n38\n\n\n70557\nSnow\nPhysics\n0\n\n\n76543\nBrown\nComp. Sci.\n58\n\n\n76653\nAoi\nElec. Eng.\n60\n\n\n98765\nBourikas\nElec. Eng.\n98\n\n\n98988\nTanaka\nBiology\n120\n\n\n\n\n\n\nFrom the student relation in the figure, obtain the list of all students in alphabetic order of departments and within each department, in decreasing order of total credits.\n\n\n\n * sqlite:///univdb-sqlite.db\nDone.\n\n\n\n\n\nname\ndept_name\ntot_cred\n\n\n\n\nTanaka\nBiology\n120\n\n\nZhang\nComp. Sci.\n102\n\n\nBrown\nComp. Sci.\n58\n\n\nWilliams\nComp. Sci.\n54\n\n\nShankar\nComp. Sci.\n32\n\n\nBourikas\nElec. Eng.\n98\n\n\nAoi\nElec. Eng.\n60\n\n\nChavez\nFinance\n110\n\n\nBrandt\nHistory\n80\n\n\nSanchez\nMusic\n38\n\n\nPeltier\nPhysics\n56\n\n\nLevy\nPhysics\n46\n\n\nSnow\nPhysics\n0\n\n\n\n\n\n\nThe list is first sorted in alphabetic order of dept name.\nWithin each dept, it is sorted in decreasing order of total credits.",
    "crumbs": [
      "DBMS",
      "Week 3"
    ]
  },
  {
    "objectID": "pages/w3.html#in-operator",
    "href": "pages/w3.html#in-operator",
    "title": "DBMS - Week 3",
    "section": "In Operator",
    "text": "In Operator\n\n\n * sqlite:///univdb-sqlite.db\nDone.\n\n\n\n\n\nID\ncourse_id\nsec_id\nsemester\nyear\n\n\n\n\n10101\nCS-101\n1\nFall\n2017\n\n\n10101\nCS-315\n1\nSpring\n2018\n\n\n10101\nCS-347\n1\nFall\n2017\n\n\n12121\nFIN-201\n1\nSpring\n2018\n\n\n15151\nMU-199\n1\nSpring\n2018\n\n\n22222\nPHY-101\n1\nFall\n2017\n\n\n32343\nHIS-351\n1\nSpring\n2018\n\n\n45565\nCS-101\n1\nSpring\n2018\n\n\n45565\nCS-319\n1\nSpring\n2018\n\n\n76766\nBIO-101\n1\nSummer\n2017\n\n\n76766\nBIO-301\n1\nSummer\n2018\n\n\n83821\nCS-190\n1\nSpring\n2017\n\n\n83821\nCS-190\n2\nSpring\n2017\n\n\n83821\nCS-319\n2\nSpring\n2018\n\n\n98345\nEE-181\n1\nSpring\n2017\n\n\n\n\n\n\nFrom the teaches relation, find the IDs of all courses taught in the Fall or Spring of 2018.\n\n\n\n * sqlite:///univdb-sqlite.db\nDone.\n\n\n\n\n\ncourse_id\n\n\n\n\nCS-315\n\n\nFIN-201\n\n\nMU-199\n\n\nHIS-351\n\n\nCS-101\n\n\nCS-319\n\n\nCS-319\n\n\n\n\n\n\nNote: We can use distinct to remove duplicates.\n\n\n\n * sqlite:///univdb-sqlite.db\nDone.\n\n\n\n\n\ncourse_id\n\n\n\n\nCS-315\n\n\nFIN-201\n\n\nMU-199\n\n\nHIS-351\n\n\nCS-101\n\n\nCS-319",
    "crumbs": [
      "DBMS",
      "Week 3"
    ]
  },
  {
    "objectID": "pages/w3.html#set-operations-2-intersect",
    "href": "pages/w3.html#set-operations-2-intersect",
    "title": "DBMS - Week 3",
    "section": "Set Operations (2): intersect",
    "text": "Set Operations (2): intersect\n\n\n * sqlite:///univdb-sqlite.db\nDone.\n\n\n\n\n\nID\nname\ndept_name\nsalary\n\n\n\n\n10101\nSrinivasan\nComp. Sci.\n65000\n\n\n12121\nWu\nFinance\n90000\n\n\n15151\nMozart\nMusic\n40000\n\n\n22222\nEinstein\nPhysics\n95000\n\n\n32343\nEl Said\nHistory\n60000\n\n\n33456\nGold\nPhysics\n87000\n\n\n45565\nKatz\nComp. Sci.\n75000\n\n\n58583\nCalifieri\nHistory\n62000\n\n\n76543\nSingh\nFinance\n80000\n\n\n76766\nCrick\nBiology\n72000\n\n\n83821\nBrandt\nComp. Sci.\n92000\n\n\n98345\nKim\nElec. Eng.\n80000\n\n\n\n\n\n\nFrom the instructor relation, find the names of all instructors who taught in either the Computer Science department or the Finance department and whose salary is &lt; 80000.\n\n\n\n * sqlite:///univdb-sqlite.db\nDone.\n\n\n\n\n\nname\n\n\n\n\nKatz\n\n\nSrinivasan\n\n\n\n\n\n\n\n * sqlite:///univdb-sqlite.db\nDone.\n\n\n\n\n\nname\n\n\n\n\nSrinivasan\n\n\nKatz",
    "crumbs": [
      "DBMS",
      "Week 3"
    ]
  },
  {
    "objectID": "pages/w3.html#set-operations-3-except",
    "href": "pages/w3.html#set-operations-3-except",
    "title": "DBMS - Week 3",
    "section": "Set Operations (3): except",
    "text": "Set Operations (3): except\n\nFrom the instructor relation, find the names of all instructors who taught in the Computer Science department or the Finance department and whose salary is either &gt;= 90000 or &lt;= 70000.\n\n\n\n * sqlite:///univdb-sqlite.db\nDone.\n\n\n\n\n\nname\n\n\n\n\nBrandt\n\n\nSrinivasan\n\n\nWu\n\n\n\n\n\n\n\n * sqlite:///univdb-sqlite.db\nDone.\n\n\n\n\n\nname\n\n\n\n\nSrinivasan\n\n\nWu\n\n\nBrandt",
    "crumbs": [
      "DBMS",
      "Week 3"
    ]
  },
  {
    "objectID": "pages/w3.html#aggregate-functions-avg",
    "href": "pages/w3.html#aggregate-functions-avg",
    "title": "DBMS - Week 3",
    "section": "Aggregate functions: avg",
    "text": "Aggregate functions: avg\n\n\n * sqlite:///univdb-sqlite.db\nDone.\n\n\n\n\n\nbuilding\nroom_number\ncapacity\n\n\n\n\nPackard\n101\n500\n\n\nPainter\n514\n10\n\n\nTaylor\n3128\n70\n\n\nWatson\n100\n30\n\n\nWatson\n120\n50\n\n\n\n\n\n\nFrom the classroom relation, find the names and the average capacity of each building whose average capacity is greater than 25.\n\n\n\n * sqlite:///univdb-sqlite.db\nDone.\n\n\n\n\n\nbuilding\nAVG(capacity)\n\n\n\n\nPackard\n500.0\n\n\nTaylor\n70.0\n\n\nWatson\n40.0",
    "crumbs": [
      "DBMS",
      "Week 3"
    ]
  },
  {
    "objectID": "pages/w3.html#aggregate-functions-2-min",
    "href": "pages/w3.html#aggregate-functions-2-min",
    "title": "DBMS - Week 3",
    "section": "Aggregate functions (2): min",
    "text": "Aggregate functions (2): min\n\n\n * sqlite:///univdb-sqlite.db\nDone.\n\n\n\n\n\nID\nname\ndept_name\nsalary\n\n\n\n\n10101\nSrinivasan\nComp. Sci.\n65000\n\n\n12121\nWu\nFinance\n90000\n\n\n15151\nMozart\nMusic\n40000\n\n\n22222\nEinstein\nPhysics\n95000\n\n\n32343\nEl Said\nHistory\n60000\n\n\n33456\nGold\nPhysics\n87000\n\n\n45565\nKatz\nComp. Sci.\n75000\n\n\n58583\nCalifieri\nHistory\n62000\n\n\n76543\nSingh\nFinance\n80000\n\n\n76766\nCrick\nBiology\n72000\n\n\n83821\nBrandt\nComp. Sci.\n92000\n\n\n98345\nKim\nElec. Eng.\n80000\n\n\n\n\n\n\nFrom the instructor relation, find the least salary drawn by any instructor among all the instructors.\n\n\n\n * sqlite:///univdb-sqlite.db\nDone.\n\n\n\n\n\nleast_salary\n\n\n\n\n40000",
    "crumbs": [
      "DBMS",
      "Week 3"
    ]
  },
  {
    "objectID": "pages/w3.html#aggregate-functions-3-max",
    "href": "pages/w3.html#aggregate-functions-3-max",
    "title": "DBMS - Week 3",
    "section": "Aggregate functions (3): max",
    "text": "Aggregate functions (3): max\n\n\n * sqlite:///univdb-sqlite.db\nDone.\n\n\n\n\n\nID\nname\ndept_name\ntot_cred\n\n\n\n\n00128\nZhang\nComp. Sci.\n102\n\n\n12345\nShankar\nComp. Sci.\n32\n\n\n19991\nBrandt\nHistory\n80\n\n\n23121\nChavez\nFinance\n110\n\n\n44553\nPeltier\nPhysics\n56\n\n\n45678\nLevy\nPhysics\n46\n\n\n54321\nWilliams\nComp. Sci.\n54\n\n\n55739\nSanchez\nMusic\n38\n\n\n70557\nSnow\nPhysics\n0\n\n\n76543\nBrown\nComp. Sci.\n58\n\n\n76653\nAoi\nElec. Eng.\n60\n\n\n98765\nBourikas\nElec. Eng.\n98\n\n\n98988\nTanaka\nBiology\n120\n\n\n\n\n\n\nFrom the student relation, find the maximum credits obtained by any student among all the students.\n\n\n\n * sqlite:///univdb-sqlite.db\nDone.\n\n\n\n\n\nmax_credits\n\n\n\n\n120",
    "crumbs": [
      "DBMS",
      "Week 3"
    ]
  },
  {
    "objectID": "pages/w3.html#aggregate-functions-4-count",
    "href": "pages/w3.html#aggregate-functions-4-count",
    "title": "DBMS - Week 3",
    "section": "Aggregate functions (4): count",
    "text": "Aggregate functions (4): count\n\n\n * sqlite:///univdb-sqlite.db\nDone.\n\n\n\n\n\ncourse_id\nsec_id\nsemester\nyear\nbuilding\nroom_number\ntime_slot_id\n\n\n\n\nBIO-101\n1\nSummer\n2017\nPainter\n514\nB\n\n\nBIO-301\n1\nSummer\n2018\nPainter\n514\nA\n\n\nCS-101\n1\nFall\n2017\nPackard\n101\nH\n\n\nCS-101\n1\nSpring\n2018\nPackard\n101\nF\n\n\nCS-190\n1\nSpring\n2017\nTaylor\n3128\nE\n\n\nCS-190\n2\nSpring\n2017\nTaylor\n3128\nA\n\n\nCS-315\n1\nSpring\n2018\nWatson\n120\nD\n\n\nCS-319\n1\nSpring\n2018\nWatson\n100\nB\n\n\nCS-319\n2\nSpring\n2018\nTaylor\n3128\nC\n\n\nCS-347\n1\nFall\n2017\nTaylor\n3128\nA\n\n\nEE-181\n1\nSpring\n2017\nTaylor\n3128\nC\n\n\nFIN-201\n1\nSpring\n2018\nPackard\n101\nB\n\n\nHIS-351\n1\nSpring\n2018\nPainter\n514\nC\n\n\nMU-199\n1\nSpring\n2018\nPackard\n101\nD\n\n\nPHY-101\n1\nFall\n2017\nWatson\n100\nA\n\n\n\n\n\n\nFrom the section relation, find the number of courses run in each building.\n\n\n\n * sqlite:///univdb-sqlite.db\nDone.\n\n\n\n\n\nbuilding\ncourse_count\n\n\n\n\nPackard\n4\n\n\nPainter\n3\n\n\nTaylor\n5\n\n\nWatson\n3",
    "crumbs": [
      "DBMS",
      "Week 3"
    ]
  },
  {
    "objectID": "pages/w3.html#aggregate-functions-5-sum",
    "href": "pages/w3.html#aggregate-functions-5-sum",
    "title": "DBMS - Week 3",
    "section": "Aggregate functions (5): sum",
    "text": "Aggregate functions (5): sum\n\n\n * sqlite:///univdb-sqlite.db\nDone.\n\n\n\n\n\ncourse_id\ntitle\ndept_name\ncredits\n\n\n\n\nBIO-101\nIntro. to Biology\nBiology\n4\n\n\nBIO-301\nGenetics\nBiology\n4\n\n\nBIO-399\nComputational Biology\nBiology\n3\n\n\nCS-101\nIntro. to Computer Science\nComp. Sci.\n4\n\n\nCS-190\nGame Design\nComp. Sci.\n4\n\n\nCS-315\nRobotics\nComp. Sci.\n3\n\n\nCS-319\nImage Processing\nComp. Sci.\n3\n\n\nCS-347\nDatabase System Concepts\nComp. Sci.\n3\n\n\nEE-181\nIntro. to Digital Systems\nElec. Eng.\n3\n\n\nFIN-201\nInvestment Banking\nFinance\n3\n\n\nHIS-351\nWorld History\nHistory\n3\n\n\nMU-199\nMusic Video Production\nMusic\n3\n\n\nPHY-101\nPhysical Principles\nPhysics\n4\n\n\n\n\n\n\nFrom the course relation, find the total credits offered by each department.\n\n\n\n * sqlite:///univdb-sqlite.db\nDone.\n\n\n\n\n\ndept_name\nsum_credits\n\n\n\n\nBiology\n11\n\n\nComp. Sci.\n17\n\n\nElec. Eng.\n3\n\n\nFinance\n3\n\n\nHistory\n3\n\n\nMusic\n3\n\n\nPhysics\n4",
    "crumbs": [
      "DBMS",
      "Week 3"
    ]
  },
  {
    "objectID": "pages/w3.html#nested-subqueries",
    "href": "pages/w3.html#nested-subqueries",
    "title": "DBMS - Week 3",
    "section": "Nested Subqueries",
    "text": "Nested Subqueries\n\nSQL provides a mechanism for nesting of subqueries\nA subquery is a select-from-where expression that is nested within another query\nThe nesting can be done in the following SQL query \\[ \\text{select } A_1, A_2, ..., A_n \\] \\[ \\text{from } r_1, r_2, ..., r_m \\] \\[ \\text{where } P \\] as follows:\n\n\\(A_i\\) can be a subquery that generates a single value\n\\(r_i\\) can be replaced by any valid subquery\n\\(P\\) can be replaced with an expressionm of the form:\n\\(B \\text{ &lt;operation&gt;}\\) (subquery)\nwhere \\(B\\) is an attribute and \\(\\text{&lt;operation&gt;}\\) to be defined later.",
    "crumbs": [
      "DBMS",
      "Week 3"
    ]
  },
  {
    "objectID": "pages/w3.html#subqueries-in-the-where-clause",
    "href": "pages/w3.html#subqueries-in-the-where-clause",
    "title": "DBMS - Week 3",
    "section": "Subqueries in the Where Clause",
    "text": "Subqueries in the Where Clause\n\nTypical use of subqueries is to perform tests:\n\nFor set membership\nFor set comparisons\nFor set cardinality",
    "crumbs": [
      "DBMS",
      "Week 3"
    ]
  },
  {
    "objectID": "pages/w3.html#set-membership",
    "href": "pages/w3.html#set-membership",
    "title": "DBMS - Week 3",
    "section": "Set Membership",
    "text": "Set Membership\n\nFind courses offered in Fall 2009 and in Spring 2010 (intersect example)\n\nselect distinct course_id\nfrom section\nwhere semester = 'Fall' and year = 2017 and\ncourse_id in (select course_id\n              from section\n              where semester = 'Spring' and year = 2018);\n\n\nCS-101\n\n\n\nFind courses offered in Fall 2009 but not in Spring 2010 (except example)\n\nselect distinct course_id\nfrom section\nwhere semester = 'Fall' and year = 2017 and\ncourse_id not in (select course_id\n              from section\n              where semester = 'Spring' and year = 2018);\n\n\nCS-347\nPHY-101\n\n\n\n\n * sqlite:///univdb-sqlite.db\nDone.\n\n\n\n\n\ncourse_id\n\n\n\n\nCS-347\n\n\nPHY-101",
    "crumbs": [
      "DBMS",
      "Week 3"
    ]
  },
  {
    "objectID": "pages/w3.html#set-membership-2",
    "href": "pages/w3.html#set-membership-2",
    "title": "DBMS - Week 3",
    "section": "Set Membership (2)",
    "text": "Set Membership (2)\n\nFind the total number of (distinct) students who have taken course sections taught by instructor with ID ‘10101’\n\nselect count(distinct ID)\nfrom takes\nwhere (course_id, sec_id, semester, year) in\n    (select course_id, sec_id, semester, year\n    from teaches\n    where teaches.ID = '10101');\n\n\n6\n\n\n\n\n * sqlite:///univdb-sqlite.db\nDone.\n\n\n\n\n\ncount(distinct ID)\n\n\n\n\n6\n\n\n\n\n\n\n\n * sqlite:///univdb-sqlite.db\nDone.\n\n\n\n\n\n\n\ncount(distinct ID)\n\n\n\n\n6",
    "crumbs": [
      "DBMS",
      "Week 3"
    ]
  },
  {
    "objectID": "pages/w3.html#set-comparison---some-clause",
    "href": "pages/w3.html#set-comparison---some-clause",
    "title": "DBMS - Week 3",
    "section": "Set Comparison - “some” Clause",
    "text": "Set Comparison - “some” Clause\n\nFind the names of instructors with salary greater than that of some (at least one) instructor in the Biology department\n\nselect distinct T.name\nfrom instructor T, instructor S\nwhere T.salary &gt; S.salary and S.dept_name = 'Biology';\n\nSame query using some clause\n\nselect name\nfrom instructor\nwhere salary &gt; some (select salary\n                    from instructor\n                    where dept_name = 'Biology');",
    "crumbs": [
      "DBMS",
      "Week 3"
    ]
  },
  {
    "objectID": "pages/w3.html#definition-of-some-clause",
    "href": "pages/w3.html#definition-of-some-clause",
    "title": "DBMS - Week 3",
    "section": "Definition of “some” Clause",
    "text": "Definition of “some” Clause\n\nF \\(\\text{&lt;comp&gt;}\\) some \\(r \\Leftrightarrow \\exists t \\in r\\) such that (F \\(\\text{&lt;comp&gt;}\\) t) where \\(\\text{&lt;comp&gt;}\\) can be: \\(&lt;\\), \\(\\leq\\), \\(&gt;\\), \\(\\geq\\), \\(=\\), \\(\\neq\\)\nsome represents existential quantification\n\n(5 &lt; some {0, 5, 6}) = True\n(5 &lt; some {0, 5}) = False\n(5 = some {0, 5}) = True\n(5 \\(\\neq\\) some {0, 5}) = False\n(= some) \\(\\equiv\\) in\nHowever, (\\(\\neq\\) some) \\(\\equiv\\) not in",
    "crumbs": [
      "DBMS",
      "Week 3"
    ]
  },
  {
    "objectID": "pages/w3.html#set-comparison---all-clause",
    "href": "pages/w3.html#set-comparison---all-clause",
    "title": "DBMS - Week 3",
    "section": "Set Comparison - “all” Clause",
    "text": "Set Comparison - “all” Clause\n\nFind the names of all instructors with salary greater than that of all instructors in the Biology department\n\nselect name\nfrom instructor\nwhere salary &gt; all (select salary\n                    from instructor\n                    where dept_name = 'Biology');",
    "crumbs": [
      "DBMS",
      "Week 3"
    ]
  },
  {
    "objectID": "pages/w3.html#definition-of-all-clause",
    "href": "pages/w3.html#definition-of-all-clause",
    "title": "DBMS - Week 3",
    "section": "Definition of “all” Clause",
    "text": "Definition of “all” Clause\n\nF \\(\\text{&lt;comp&gt;}\\) all \\(r \\Leftrightarrow \\forall t \\in r\\) such that (F \\(\\text{&lt;comp&gt;}\\) t) where \\(\\text{&lt;comp&gt;}\\) can be: \\(&lt;\\), \\(\\leq\\), \\(&gt;\\), \\(\\geq\\), \\(=\\), \\(\\neq\\)\nall represents universal quantification\n\n(5 &lt; all {0, 5, 6}) = False\n(5 &lt; all {6, 10}) = True\n(5 = all {0, 5}) = False\n(5 \\(\\neq\\) all {4, 6}) = True\n(\\(\\neq\\) all) \\(\\equiv\\) not in\nHowever, (\\(=\\) all) !\\(\\equiv\\) in",
    "crumbs": [
      "DBMS",
      "Week 3"
    ]
  },
  {
    "objectID": "pages/w3.html#test-for-empty-relations-exists",
    "href": "pages/w3.html#test-for-empty-relations-exists",
    "title": "DBMS - Week 3",
    "section": "Test for Empty Relations: “exists”",
    "text": "Test for Empty Relations: “exists”\n\nThe exists constucrt returns the value true if the argument subquery is non-empty\n\nexists $r r $\nnot exists $r r = $",
    "crumbs": [
      "DBMS",
      "Week 3"
    ]
  },
  {
    "objectID": "pages/w3.html#use-of-exists-clause",
    "href": "pages/w3.html#use-of-exists-clause",
    "title": "DBMS - Week 3",
    "section": "Use of “exists” clause",
    "text": "Use of “exists” clause\n\nYet another way of specifying the query “Find all courses taught in both the Fall 2009 semester and in the Spring 2010 semester”\n\nselect course_id\nfrom section as S\nwhere semester = 'Fall' and year = 2009 and\nexists (select *\n        from section as T\n        where semester = 'Spring' and year = 2010 and\n        S.course_id = T.course_id);\n\nCorrelation name - variable S in the outer query\nCorrelated subquery - subquery that references the correlation name (the inner query)",
    "crumbs": [
      "DBMS",
      "Week 3"
    ]
  },
  {
    "objectID": "pages/w3.html#use-of-not-exists-clause",
    "href": "pages/w3.html#use-of-not-exists-clause",
    "title": "DBMS - Week 3",
    "section": "Use of “not exists” clause",
    "text": "Use of “not exists” clause\n\nFind all students who have taken all courses offered in the Biology department.\n\nselect distinct S.ID, S.name\nfrom student as S\nwhere not exists ((select course_id\n                    from course\n                    where dept_name = 'Biology')\n                    except\n                    (select T.course_id\n                    from takes as T\n                    where S.ID = T.ID));\n\nFirst nested query lists all courses offered in Biology\nSecond nested query lists all courses a particular student took\nNote: \\(X-Y = \\emptyset \\Leftrightarrow X \\subseteq Y\\)\nNote: Cannot write this query using \\(=\\) all and its variants",
    "crumbs": [
      "DBMS",
      "Week 3"
    ]
  },
  {
    "objectID": "pages/w3.html#test-for-absence-of-duplicate-tuples-unique",
    "href": "pages/w3.html#test-for-absence-of-duplicate-tuples-unique",
    "title": "DBMS - Week 3",
    "section": "Test for Absence of Duplicate Tuples: “unique”",
    "text": "Test for Absence of Duplicate Tuples: “unique”\n\nThe unique construct tests whether a subquery has any duplicate tuples in its result\nThe unique construct evaluates to true if the subquery result has no duplicate tuples\nFind all courses that were offered at most once in 2009\n\nselect T.course_id\nfrom course as T\nwhere unique (select R.course_id\n              from section as R\n              where R.course_id = T.course_id\n              and R.year = 2009);",
    "crumbs": [
      "DBMS",
      "Week 3"
    ]
  },
  {
    "objectID": "pages/w3.html#subqueries-in-the-from-clause",
    "href": "pages/w3.html#subqueries-in-the-from-clause",
    "title": "DBMS - Week 3",
    "section": "Subqueries in the From Clause",
    "text": "Subqueries in the From Clause\n\nSQL allows a subquery expression to be used in the from clause\nFind the average instructors’ salaries of those departments where the average salary is greater than $42,000\n\nselect dept_name, avg_salary\nfrom (select dept_name, avg(salary) as avg_salary\n      from instructor\n      group by dept_name)\nwhere avg_salary &gt; 42000;\n\nNote that we do not need to use the having clause\nAnother way to write the same query is:\n\nselect dept_name, avg_salary\nfrom (select dept_name, avg(salary)\n      from instructor\n      group by dept_name) as dept_avg (dept_name, avg_salary)\nwhere avg_salary &gt; 42000;",
    "crumbs": [
      "DBMS",
      "Week 3"
    ]
  },
  {
    "objectID": "pages/w3.html#with-clause",
    "href": "pages/w3.html#with-clause",
    "title": "DBMS - Week 3",
    "section": "With Clause",
    "text": "With Clause\n\nThe with clause provides a way of defining a temporary relation whose definition is available only to the query in which the with clause occurs\nFind all departments with the maximum budget\n\nwith max_budget(value) as\n    (select max(budget)\n    from department)\nselect department.dept_name\nfrom department, max_budget\nwhere department.budget = max_budget.value;",
    "crumbs": [
      "DBMS",
      "Week 3"
    ]
  },
  {
    "objectID": "pages/w3.html#complex-queries-using-with-clause",
    "href": "pages/w3.html#complex-queries-using-with-clause",
    "title": "DBMS - Week 3",
    "section": "Complex Queries using With Clause",
    "text": "Complex Queries using With Clause\n\nFind all departments where the total salary is greater than the average of the total salary at all departments\n\nwith dept_total(dept_name, value) as\n    select dept_name, sum(salary)\n    from instructor\n    group by dept_name,\ndept_total_avg(value) as\n    (select avg(value)\n    from dept_total)\nselect dept_name\nfrom dept_total, dept_total_avg\nwhere dept_total.value &gt; dept_total_avg.value;",
    "crumbs": [
      "DBMS",
      "Week 3"
    ]
  },
  {
    "objectID": "pages/w3.html#scalar-subquery",
    "href": "pages/w3.html#scalar-subquery",
    "title": "DBMS - Week 3",
    "section": "Scalar Subquery",
    "text": "Scalar Subquery\n\nA scalar subquery is a subquery that returns a single value\nList all departments along with the number of instructors in each department\n\nselect dept_name,\n    (select count(*)\n    from instructor\n    where instructor.dept_name = department.dept_name)\n    as num_instructors\n    from department;\n\nRuntime error if the subquery returns more than one result tuple",
    "crumbs": [
      "DBMS",
      "Week 3"
    ]
  },
  {
    "objectID": "pages/w3.html#modification-of-the-database",
    "href": "pages/w3.html#modification-of-the-database",
    "title": "DBMS - Week 3",
    "section": "Modification of the Database",
    "text": "Modification of the Database\n\nDeletion of tuples from a given relation\nInsertion of new tuples into a given relation\nUpdating of values in some tuples in a given relation",
    "crumbs": [
      "DBMS",
      "Week 3"
    ]
  },
  {
    "objectID": "pages/w3.html#deletion",
    "href": "pages/w3.html#deletion",
    "title": "DBMS - Week 3",
    "section": "Deletion",
    "text": "Deletion\n\nDelete all instructors\ndelete from instructor;\nDelete all instructors from the Finance department\ndelete from instructor\nwhere dept_name = 'Finance';\nDelete all tuples in the instructor relation for those instructors associated with a department located in the Watson building\ndelete from instructor\nwhere dept_name in (select dept_name\n                    from department\n                    where building = 'Watson');\nDelete all instructors whose salary is less than the average of all instructors’ salaries\ndelete from instructor\nwhere salary &lt; (select avg(salary)\n                from instructor);\nProblem: as we delete tuples, the average salary changes\nSolution used in SQL:\n\nFirst compute avg(salary) and find all tuples to be deleted\nNext, delete all tuples found above (without recomputing avg or retesting the tuples)",
    "crumbs": [
      "DBMS",
      "Week 3"
    ]
  },
  {
    "objectID": "pages/w3.html#insertion",
    "href": "pages/w3.html#insertion",
    "title": "DBMS - Week 3",
    "section": "Insertion",
    "text": "Insertion\n\nAdd a new typle to course\ninsert into course\nvalues ('CS-437', 'Database Systems', 'Comp. Sci.', 4);\nor equivalently\ninsert into course (course_id, title, dept_name, credits)\nvalues ('CS-437', 'Database Systems', 'Comp. Sci.', 4);\nAdd a new tuple to student with tot_creds set to null\ninsert into student\nvalues ('3003', 'Green', 'Finance', null);\nAdd all instructors to the student relation with tot_creds set to 0\ninsert into student\nselect ID, name, dept_name, 0\nfrom instructor;\nThe select-from-where statement is evaluated fully before any of its results are inserted into the relation\nOtherwise queries like\ninsert into table1 select * from table1;\nwould result in an infinite loop",
    "crumbs": [
      "DBMS",
      "Week 3"
    ]
  },
  {
    "objectID": "pages/w3.html#updates",
    "href": "pages/w3.html#updates",
    "title": "DBMS - Week 3",
    "section": "Updates",
    "text": "Updates\n\nIncrease the salary of all instructors whose salary is over $100,00 by 3% and all others by 5%\n\nWith two update statements\nupdate instructor\n    set salary = salary * 1.03\n    where salary &gt; 100000;\nupdate instructor\n    set salary = salary * 1.05\n    where salary &lt;= 100000;\n\nThe order is important\nCan be done better using the case statement",
    "crumbs": [
      "DBMS",
      "Week 3"
    ]
  },
  {
    "objectID": "pages/w3.html#case-statement-for-conditional-updates",
    "href": "pages/w3.html#case-statement-for-conditional-updates",
    "title": "DBMS - Week 3",
    "section": "Case Statement for Conditional Updates",
    "text": "Case Statement for Conditional Updates\n\nSame query as above using the case statement\nupdate instructor\n    set salary = case\n                when salary &lt;= 100000\n                then salary * 1.05\n                else salary * 1.03\n                end;",
    "crumbs": [
      "DBMS",
      "Week 3"
    ]
  },
  {
    "objectID": "pages/w3.html#updates-with-scalar-subqueries",
    "href": "pages/w3.html#updates-with-scalar-subqueries",
    "title": "DBMS - Week 3",
    "section": "Updates with Scalar Subqueries",
    "text": "Updates with Scalar Subqueries\n\nRecompute and update tot_creds value for all students\nupdate student\nset tot_creds = (select sum(credits)\n                from takes, course\n                where takes.course_id = course.course_id and\n                S.ID = takes.ID and\n                takes.grade &lt;&gt; 'F' and\n                takes.grade is not null);\nSet tot_creds to null for all students who have not taken any courses\nInstead of sum(credits), use:\n    case\n    when sum(credits) is not null then sum(credits)\n    else 0\nend;",
    "crumbs": [
      "DBMS",
      "Week 3"
    ]
  },
  {
    "objectID": "pages/w3.html#join-relations",
    "href": "pages/w3.html#join-relations",
    "title": "DBMS - Week 3",
    "section": "Join Relations",
    "text": "Join Relations\n\nJoin operations take two relations and return as result another relation\nA join operation is a Cartesian product which requires that tuples in the two relations match (under some condition)\nIt also specifies the attributes that are present in the result of the join\nThe join operations are typically used as subquery expressions in the from clause",
    "crumbs": [
      "DBMS",
      "Week 3"
    ]
  },
  {
    "objectID": "pages/w3.html#types-of-joins-between-relations",
    "href": "pages/w3.html#types-of-joins-between-relations",
    "title": "DBMS - Week 3",
    "section": "Types of Joins between Relations",
    "text": "Types of Joins between Relations\n\nCross join\nInner join\n\nEqui-join\n\nNatural join\n\n\nOuter join\n\nLeft outer join\nRight outer join\nFull outer join\n\nSelf-join",
    "crumbs": [
      "DBMS",
      "Week 3"
    ]
  },
  {
    "objectID": "pages/w3.html#cross-join",
    "href": "pages/w3.html#cross-join",
    "title": "DBMS - Week 3",
    "section": "Cross Join",
    "text": "Cross Join\n\nCROSS JOIN returns the Cartesian product of rows from tables in the join\n\nExplicit\nselect *\nfrom employee cross join department;\nImplicit\nselect *\nfrom employee, department;",
    "crumbs": [
      "DBMS",
      "Week 3"
    ]
  },
  {
    "objectID": "pages/w3.html#join-operations---example",
    "href": "pages/w3.html#join-operations---example",
    "title": "DBMS - Week 3",
    "section": "Join Operations - Example",
    "text": "Join Operations - Example\n\nRelation course\n\n\n\n * sqlite:///univdb-sqlite.db\nDone.\n\n\n\n\n\n\n\ncourse_id\ntitle\ndept_name\ncredits\n\n\n\n\nBIO-301\nGenetics\nBiology\n4\n\n\nCS-190\nGame Design\nComp. Sci.\n4\n\n\nCS-315\nRobotics\nComp. Sci.\n3\n\n\n\n\n\n\n\n * sqlite:///univdb-sqlite.db\nDone.\n\n\n\nRelation prereq\n\n\n\n\n\n\ncourse_id\nprereq_id\n\n\n\n\nBIO-301\nBIO-101\n\n\nCS-190\nCS-101\n\n\nCS-347\nCS-101\n\n\n\n\n\n\nObserve that\n\nprereq information is missing for course CS-315, and\ncourse information is missing for CS-347",
    "crumbs": [
      "DBMS",
      "Week 3"
    ]
  },
  {
    "objectID": "pages/w3.html#inner-join",
    "href": "pages/w3.html#inner-join",
    "title": "DBMS - Week 3",
    "section": "Inner Join",
    "text": "Inner Join\n\ncourse inner join prereq\n\n\n\n\n\n\ncourse_id\ntitle\ndept_name\ncredits\ncourse_id_1\nprereq_id\n\n\n\n\nBIO-301\nGenetics\nBiology\n4\nBIO-301\nBIO-101\n\n\nCS-190\nGame Design\nComp. Sci.\n4\nCS-190\nCS-101\n\n\n\n\n\n\nIf specified as natural, the join is on all attributes with the same name\n\n\n\n\n\n\ncourse_id\ntitle\ndept_name\ncredits\nprereq_id\n\n\n\n\nBIO-301\nGenetics\nBiology\n4\nBIO-101\n\n\nCS-190\nGame Design\nComp. Sci.\n4\nCS-101",
    "crumbs": [
      "DBMS",
      "Week 3"
    ]
  },
  {
    "objectID": "pages/w3.html#outer-join",
    "href": "pages/w3.html#outer-join",
    "title": "DBMS - Week 3",
    "section": "Outer Join",
    "text": "Outer Join\n\nAn extension of the join operation that avoids loss of information\nComputes the join and then adds tuples from one relation that does not match tuples in the other relation to the result of the join\nUses null values, which is None in Python",
    "crumbs": [
      "DBMS",
      "Week 3"
    ]
  },
  {
    "objectID": "pages/w3.html#left-outer-join",
    "href": "pages/w3.html#left-outer-join",
    "title": "DBMS - Week 3",
    "section": "Left Outer Join",
    "text": "Left Outer Join\n\ncourse left outer join prereq\n\n\n\n\n\n\ncourse_id\ntitle\ndept_name\ncredits\ncourse_id_1\nprereq_id\n\n\n\n\nBIO-301\nGenetics\nBiology\n4\nBIO-301\nBIO-101\n\n\nCS-190\nGame Design\nComp. Sci.\n4\nCS-190\nCS-101\n\n\nCS-315\nRobotics\nComp. Sci.\n3\nNone\nNone",
    "crumbs": [
      "DBMS",
      "Week 3"
    ]
  },
  {
    "objectID": "pages/w3.html#right-outer-join",
    "href": "pages/w3.html#right-outer-join",
    "title": "DBMS - Week 3",
    "section": "Right Outer Join",
    "text": "Right Outer Join\n\ncourse right outer join prereq\n\n\n\n\n\n\ncourse_id\ntitle\ndept_name\ncredits\ncourse_id_1\nprereq_id\n\n\n\n\nBIO-301\nGenetics\nBiology\n4\nBIO-301\nBIO-101\n\n\nCS-190\nGame Design\nComp. Sci.\n4\nCS-190\nCS-101\n\n\nNone\nNone\nNone\nNone\nCS-347\nCS-101",
    "crumbs": [
      "DBMS",
      "Week 3"
    ]
  },
  {
    "objectID": "pages/w3.html#joined-relations",
    "href": "pages/w3.html#joined-relations",
    "title": "DBMS - Week 3",
    "section": "Joined Relations",
    "text": "Joined Relations\n\nJoin operations take two relations and return as a result another relation\nThese additional operations are typically used as subquery expressions in the from clause\nJoin condition – defines which tuples in the two relations match, and what attributes are present in the result of the join\n  natural\n  on &lt;predicate&gt;\n  using (attr1, attr2, ...)\nJoin type – defines how tuples in each relation that do not match any tuple in the other relation (based on the join condition) are treated\n  inner join\n  left outer join\n  right outer join\n  full outer join",
    "crumbs": [
      "DBMS",
      "Week 3"
    ]
  },
  {
    "objectID": "pages/w3.html#full-outer-join",
    "href": "pages/w3.html#full-outer-join",
    "title": "DBMS - Week 3",
    "section": "Full Outer Join",
    "text": "Full Outer Join\n\ncourse full outer join prereq\n\n\n\n\n\n\ncourse_id\ntitle\ndept_name\ncredits\ncourse_id_1\nprereq_id\n\n\n\n\nBIO-301\nGenetics\nBiology\n4\nBIO-301\nBIO-101\n\n\nCS-190\nGame Design\nComp. Sci.\n4\nCS-190\nCS-101\n\n\nCS-315\nRobotics\nComp. Sci.\n3\nNone\nNone\n\n\nNone\nNone\nNone\nNone\nCS-347\nCS-101",
    "crumbs": [
      "DBMS",
      "Week 3"
    ]
  },
  {
    "objectID": "pages/w3.html#joining-relations---examples",
    "href": "pages/w3.html#joining-relations---examples",
    "title": "DBMS - Week 3",
    "section": "Joining Relations - Examples",
    "text": "Joining Relations - Examples\n\ncourse inner join prereq on\ncourse.course_id = prereq.course_id\n\n\n\n\n\n\ncourse_id\ntitle\ndept_name\ncredits\ncourse_id_1\nprereq_id\n\n\n\n\nBIO-301\nGenetics\nBiology\n4\nBIO-301\nBIO-101\n\n\nCS-190\nGame Design\nComp. Sci.\n4\nCS-190\nCS-101\n\n\n\n\n\n\nWhat is the difference between the above (equi-join) and the natural join?\ncourse left outer join prereq on\ncourse.course_id = prereq.course_id\n\n\n\n\n\n\ncourse_id\ntitle\ndept_name\ncredits\ncourse_id_1\nprereq_id\n\n\n\n\nBIO-301\nGenetics\nBiology\n4\nBIO-301\nBIO-101\n\n\nCS-190\nGame Design\nComp. Sci.\n4\nCS-190\nCS-101\n\n\nCS-315\nRobotics\nComp. Sci.\n3\nNone\nNone\n\n\n\n\n\n\ncourse natural right outer join prereq\n\n\n\n\n\n\ncourse_id\ntitle\ndept_name\ncredits\nprereq_id\n\n\n\n\nBIO-301\nGenetics\nBiology\n4\nBIO-101\n\n\nCS-190\nGame Design\nComp. Sci.\n4\nCS-101\n\n\nCS-347\nNone\nNone\nNone\nCS-101\n\n\n\n\n\n\ncourse full outer join prereq using (course_id)\n\n\n\n\n\n\ncourse_id\ntitle\ndept_name\ncredits\nprereq_id\n\n\n\n\nBIO-301\nGenetics\nBiology\n4\nBIO-101\n\n\nCS-190\nGame Design\nComp. Sci.\n4\nCS-101\n\n\nCS-315\nRobotics\nComp. Sci.\n3\nNone\n\n\nCS-347\nNone\nNone\nNone\nCS-101",
    "crumbs": [
      "DBMS",
      "Week 3"
    ]
  },
  {
    "objectID": "pages/w3.html#views",
    "href": "pages/w3.html#views",
    "title": "DBMS - Week 3",
    "section": "Views",
    "text": "Views\n\nIn some cases, it is not desirable for all users to see the entire logical model (that is, all the actual relations stored in the database.)\nConsider a person who needs to know an instructors name and department, but not the salary. This person should see a relation described, in SQL, by:\nselect ID, name, dept_name\nfrom instructor;\nA view provides a mechanism to hide certain data from the view of certain users\nAny relation that is not of the conceptual model but is made visible to a user as a “virtual relation” is called a view.",
    "crumbs": [
      "DBMS",
      "Week 3"
    ]
  },
  {
    "objectID": "pages/w3.html#view-definition",
    "href": "pages/w3.html#view-definition",
    "title": "DBMS - Week 3",
    "section": "View Definition",
    "text": "View Definition\n\nA view is defined using the create view statement which has the form\ncreate view v as &lt; query expression &gt;\nwhere &lt; query expression &gt; is any legal SQL expression\nThe view name is represented by v\nOnce a view is defined, the view name can be used to refer to the virtual relation that the view generates\nView definition is not the same as creating a new relation by evaluating the query expression\n\nRather, a view definition causes the saving of an expression; the expression is substituted into queries using the view",
    "crumbs": [
      "DBMS",
      "Week 3"
    ]
  },
  {
    "objectID": "pages/w3.html#example-views",
    "href": "pages/w3.html#example-views",
    "title": "DBMS - Week 3",
    "section": "Example Views",
    "text": "Example Views\n\nA view of instructors without their salary\ncreate view faculty as\nselect ID, name, dept_name\nfrom instructor;\nA view of all instructors in the Biology department\nselect name\n    from faculty\n    where dept_name = 'Biology';\nCreate a view of department salary totals\ncreate view departments_total_salary(dept_name, total_salary) as\n    select dept_name, sum(salary)\n    from instructor\n    group by dept_name;",
    "crumbs": [
      "DBMS",
      "Week 3"
    ]
  },
  {
    "objectID": "pages/w3.html#views-defined-using-other-views",
    "href": "pages/w3.html#views-defined-using-other-views",
    "title": "DBMS - Week 3",
    "section": "Views Defined Using Other Views",
    "text": "Views Defined Using Other Views\n    create view physics_fall_2009 as\n        select course.course_id, sec_id, building, room_number\n        from course, section\n        where course.course_id = section.course_id\n            and course.dept_name = 'Physics'\n            and section.semester = 'Fall'\n            and section.year = 2009;\n    create view physics_fall_2009_watson as\n        select course_id, room_number\n        from physics_fall_2009\n        where building = 'Watson';",
    "crumbs": [
      "DBMS",
      "Week 3"
    ]
  },
  {
    "objectID": "pages/w3.html#view-expansion",
    "href": "pages/w3.html#view-expansion",
    "title": "DBMS - Week 3",
    "section": "View Expansion",
    "text": "View Expansion\n\nExpand use of a view in a query/another view\n\n    create view physics_fall_2009_watson as\n        (select course_id, room_number\n        from (select course.course_id, building, room_number\n            from course, section\n            where course.course_id = section.course_id\n                and course.dept_name = 'Physics'\n                and section.semester = 'Fall'\n                and section.year = 2009)\n        where building = 'Watson');",
    "crumbs": [
      "DBMS",
      "Week 3"
    ]
  },
  {
    "objectID": "pages/w3.html#view-defined-using-other-views",
    "href": "pages/w3.html#view-defined-using-other-views",
    "title": "DBMS - Week 3",
    "section": "View Defined Using Other Views",
    "text": "View Defined Using Other Views\n\nOne view may be used in the expression defining another view\nA view relation \\(v_1\\) is said to depend directly on a view relation \\(v_2\\) if \\(v_2\\) is used in the expression defining \\(v_1\\)\nA view relation \\(v_1\\) is said to depend on view relation \\(v_2\\) if either \\(v_1\\) depends directly on \\(v_2\\) or there is a path of dependencies from \\(v_1\\) to \\(v_2\\)\nA view relation v is said to be recursive if it depends on itself",
    "crumbs": [
      "DBMS",
      "Week 3"
    ]
  },
  {
    "objectID": "pages/w3.html#view-expansion-1",
    "href": "pages/w3.html#view-expansion-1",
    "title": "DBMS - Week 3",
    "section": "View Expansion*",
    "text": "View Expansion*\n\nA way to define the meaning of views defined in terms of other views\nLet view \\(v_1\\) be defined by an expression \\(e_1\\) that may itself contain uses of view relations\nView expansion of an expression repeats the following replacement step:\nrepeat\n\nFind any view relation \\(v_i\\) in \\(e_1\\)\nReplace the view relation \\(v_i\\) by the expression defining \\(v_i\\)\n\nuntil no more view relations are present in \\(e_1\\)\nAs long as the view definitions are not recursive, this loop will terminate",
    "crumbs": [
      "DBMS",
      "Week 3"
    ]
  },
  {
    "objectID": "pages/w3.html#update-of-a-view",
    "href": "pages/w3.html#update-of-a-view",
    "title": "DBMS - Week 3",
    "section": "Update of a View",
    "text": "Update of a View\n\nAdd a new tuple to faculty view which we defined earlier\n    insert into faculty values (’30765’, ’Green’, ’Music’);\nThis insertion must be represented by the insertion of the tuple\n  (’30765’, ’Green’, ’Music’, null)\ninto the instructor relation",
    "crumbs": [
      "DBMS",
      "Week 3"
    ]
  },
  {
    "objectID": "pages/w3.html#some-updates-cannot-be-translated-uniquely",
    "href": "pages/w3.html#some-updates-cannot-be-translated-uniquely",
    "title": "DBMS - Week 3",
    "section": "Some Updates cannot be Translated Uniquely",
    "text": "Some Updates cannot be Translated Uniquely\n\n    create view instructor_info as\n        select ID, name, building\n        from instructor, department\n        where instructor.dept_name = department.dept_name;\n    insert into instructor info values ('69987', 'White', 'Taylor');\n\nwhich department, if multiple departments in Taylor?\nwhat if no department is in Taylor?\n\nMost SQL implementations allow updates only on simple views\n\nThe from clause has only one database relation\nThe select clause contains only attribute names of the relation, and does not have any expressions aggregates, or distinct specification\nAny attribute not listed in the select clause can be set to null\nThe query does not have a group by or having clause",
    "crumbs": [
      "DBMS",
      "Week 3"
    ]
  },
  {
    "objectID": "pages/w3.html#and-some-not-at-all",
    "href": "pages/w3.html#and-some-not-at-all",
    "title": "DBMS - Week 3",
    "section": "And Some Not at All",
    "text": "And Some Not at All\n\n    create view history_instructors as\n        select *\n        from instructor\n        where dept_name = 'History';\nWhat happens if we insert (’25566’, ’Brown’, ’Biology’, 100000) into history_instructors?",
    "crumbs": [
      "DBMS",
      "Week 3"
    ]
  },
  {
    "objectID": "pages/w3.html#materialized-views",
    "href": "pages/w3.html#materialized-views",
    "title": "DBMS - Week 3",
    "section": "Materialized Views",
    "text": "Materialized Views\n\nMaterializing a view: create a physical table containing all the tuples in the result of the query defining the view\nIf relations used in the query are updated, the materialized view result becomes out of date\n\nNeed to maintain the view, by updating the view whenever the underlying relations are updated",
    "crumbs": [
      "DBMS",
      "Week 3"
    ]
  },
  {
    "objectID": "pages/w3.html#transactions",
    "href": "pages/w3.html#transactions",
    "title": "DBMS - Week 3",
    "section": "Transactions",
    "text": "Transactions\n\nUnit of work\nAtomic transaction\n\neither fully executed or rolled back as if it never happened\n\nIsolation from concurrent transactions\nTransactions begin implicitly\n\nEnd by commit work or rollback work\n\nBut default on most databases: each SQL statement commits automatically\n\nCan turn off auto-commit for a session (for example, using API)\nIn SQL:1999, can use: begin atomic … end\n\nNot supported on most databases",
    "crumbs": [
      "DBMS",
      "Week 3"
    ]
  },
  {
    "objectID": "pages/w3.html#integrity-constraints",
    "href": "pages/w3.html#integrity-constraints",
    "title": "DBMS - Week 3",
    "section": "Integrity Constraints",
    "text": "Integrity Constraints\n\nIntegrity constraints guard against accidental damage to the database, by ensuring that authorized changes to the database do not result in a loss of data consistency\n\nA checking account must have a balance greater than Rs. 10,000.00\nA salary of a bank employee must be at least Rs. 250.00 an hour\nA customer must have a (non-null) phone number",
    "crumbs": [
      "DBMS",
      "Week 3"
    ]
  },
  {
    "objectID": "pages/w3.html#integrity-constraints-on-a-single-relation",
    "href": "pages/w3.html#integrity-constraints-on-a-single-relation",
    "title": "DBMS - Week 3",
    "section": "Integrity Constraints on a Single Relation",
    "text": "Integrity Constraints on a Single Relation\n\nnot null\nprimary key\nunique\ncheck(P), where P is a predicate",
    "crumbs": [
      "DBMS",
      "Week 3"
    ]
  },
  {
    "objectID": "pages/w3.html#not-null-and-unique-constraints",
    "href": "pages/w3.html#not-null-and-unique-constraints",
    "title": "DBMS - Week 3",
    "section": "Not Null and Unique Constraints",
    "text": "Not Null and Unique Constraints\n\nnot null\n\nDeclare name and budget to be not null\nname varchar(20) not null,\nbudget numeric(12, 2) not null\n\nunique \\((A_1, A_2, ..., A_m)\\)\n\nThe unique specification states that the attributes \\(A_1, A_2, ..., A_m\\) form a candidate key\nCandidate keys are permeitted to be null (unlike primary keys)",
    "crumbs": [
      "DBMS",
      "Week 3"
    ]
  },
  {
    "objectID": "pages/w3.html#the-check-clause",
    "href": "pages/w3.html#the-check-clause",
    "title": "DBMS - Week 3",
    "section": "The check clause",
    "text": "The check clause\n\ncheck(P), where P is a predicate\nEnsure that semester is one of fall, winter, spring, or summer:\ncreate table section (\n  course_id varchar(8),\n  sec_id varchar(8),\n  semester varchar(6),\n  year numeric(4, 0),\n  building varchar(15),\n  room_number varchar(7),\n  time_slot_id varchar(4),\n  primary key (course_id, sec_id, semester, year),\n  check (semester in ('fall', 'winter', 'spring', 'summer'))\n);",
    "crumbs": [
      "DBMS",
      "Week 3"
    ]
  },
  {
    "objectID": "pages/w3.html#referential-integrity",
    "href": "pages/w3.html#referential-integrity",
    "title": "DBMS - Week 3",
    "section": "Referential Integrity",
    "text": "Referential Integrity\n\nEnsures that a value that appears in one relation for a given set of attributes also appears for a certain set of attributes in another relation\nExample: If “Biology” is a department name appearing in one of the tuples in the instructor relation, then there exists a tuple in the department relation for “Biology”\nLet A be a set of attributes. Let R and S be two relations that contain attributes A and where A is the primary key of S. A is said to be a foreign key of R if for any values of A appearing in R these values also appear in S",
    "crumbs": [
      "DBMS",
      "Week 3"
    ]
  },
  {
    "objectID": "pages/w3.html#cascading-actions-in-referential-integrity",
    "href": "pages/w3.html#cascading-actions-in-referential-integrity",
    "title": "DBMS - Week 3",
    "section": "Cascading Actions in Referential Integrity",
    "text": "Cascading Actions in Referential Integrity\n\nWith cascading, you can define the actions that the Database Engine takes when a user tries to delete or update a key to which existing foreign keys point\n    create table course (\n        course_id char(5) primary key,\n        title varchar(20),\n        dept_name varchar(20) references department\n    );\n    create table course (\n        ...\n        dept_name varchar(20),\n        foreign key (dept_name) references department\n            on delete cascade\n            on update cascade,\n        ...\n    );\nAlternative actions to cascade: no action, set null, set default",
    "crumbs": [
      "DBMS",
      "Week 3"
    ]
  },
  {
    "objectID": "pages/w3.html#integrity-constraint-violation-during-transactions",
    "href": "pages/w3.html#integrity-constraint-violation-during-transactions",
    "title": "DBMS - Week 3",
    "section": "Integrity Constraint Violation During Transactions",
    "text": "Integrity Constraint Violation During Transactions\n\n    create table person (\n        ID char(10),\n        name char(40),\n        mother char(10),\n        father char(10),\n        primary key ID,\n        foreign key father references person,\n        foreign key mother references person)\nHow to insert a tuple without causing constraint violation?\n\nInsert father and mother of a person before inserting person\nOR, Set father and mother to null initially, update after inserting all persons (not possible if father and mother attributes declared to be not null)\nOR Defer constraint checking (will discuss later)",
    "crumbs": [
      "DBMS",
      "Week 3"
    ]
  },
  {
    "objectID": "pages/w3.html#built-in-data-types-in-sql",
    "href": "pages/w3.html#built-in-data-types-in-sql",
    "title": "DBMS - Week 3",
    "section": "Built-in Data Types in SQL",
    "text": "Built-in Data Types in SQL\n\ndate: Dates, containing a (4 digit) year, month and date\n\nExample: date ‘2005-7-27’\n\ntime: Time of day, in hours, minutes and seconds.\n\nExample: time ‘09:00:30’ time ‘09:00:30.75’\n\ntimestamp: date plus time of day\n\nExample: timestamp ‘2005-7-27 09:00:30.75’\n\ninterval: period of time\n\nExample: interval ‘1’ day\nSubtracting a date/time/timestamp value from another gives an interval value\nInterval values can be added to date/time/timestamp values",
    "crumbs": [
      "DBMS",
      "Week 3"
    ]
  },
  {
    "objectID": "pages/w3.html#index-creation",
    "href": "pages/w3.html#index-creation",
    "title": "DBMS - Week 3",
    "section": "Index Creation",
    "text": "Index Creation\n\n    create table student(ID varchar(5),\n    name varchar(20) not null,\n    dept_name varchar(20),\n    tot cred numeric (3,0) default 0,\n    primary key (ID))\ncreate index studentID index on student(ID)\nIndices are data structures used to speed up access to records with specified values for index attributes\n  select *\n  from student\n  where ID = '12345'\n\nCan be executed by using the index to find the required record, without looking at all records of student",
    "crumbs": [
      "DBMS",
      "Week 3"
    ]
  },
  {
    "objectID": "pages/w3.html#user-defined-types",
    "href": "pages/w3.html#user-defined-types",
    "title": "DBMS - Week 3",
    "section": "User Defined Types",
    "text": "User Defined Types\n\ncreate type construct in SQL creates user-defined type (alias, like typedef in C)\n  create type Dollars as numeric (12,2) final\n    create table department (\n        dept_name varchar (20),\n        building varchar (15),\n        budget Dollars\n    );",
    "crumbs": [
      "DBMS",
      "Week 3"
    ]
  },
  {
    "objectID": "pages/w3.html#domains",
    "href": "pages/w3.html#domains",
    "title": "DBMS - Week 3",
    "section": "Domains",
    "text": "Domains\n\ncreate domain construct in SQL-92 creates user-defined domain types\n  create domain person_name char(20) not null\nTypes and domains are similar\nDomains can have constraints, such as not null specified on them\n  create domain degree_level varchar(10)\n  constraint degree_level_test\n  check (value in ('Bachelors', 'Masters', 'Doctorate'));",
    "crumbs": [
      "DBMS",
      "Week 3"
    ]
  },
  {
    "objectID": "pages/w3.html#large-object-types",
    "href": "pages/w3.html#large-object-types",
    "title": "DBMS - Week 3",
    "section": "Large-Object Types",
    "text": "Large-Object Types\n\nLarge objects (photos, videos, CAD files, etc.) are stored as a large object:\n\nblob: binary large object – object is a large collection of uninterpreted binary data (whose interpretation is left to an application outside of the database system)\nclob: character large object – object is a large collection of character data\nWhen a query returns a large object, a pointer is returned rather than the large object itself",
    "crumbs": [
      "DBMS",
      "Week 3"
    ]
  },
  {
    "objectID": "pages/w3.html#authorization",
    "href": "pages/w3.html#authorization",
    "title": "DBMS - Week 3",
    "section": "Authorization",
    "text": "Authorization\n\nForms of authorization on parts of the database:\n\nRead - allows reading, but not modification of data\nInsert - allows insertion of new data, but not modification of existing data\nUpdate - allows modification, but not deletion of data\nDelete - allows deletion of data\n\nForms of authorization to modify the database schema\n\nIndex - allows creation and deletion of indices\nResources - allows creation of new relations\nAlteration - allows addition or deletion of attributes in a relation\nDrop - allows deletion of relations",
    "crumbs": [
      "DBMS",
      "Week 3"
    ]
  },
  {
    "objectID": "pages/w3.html#authorization-specification-in-sql",
    "href": "pages/w3.html#authorization-specification-in-sql",
    "title": "DBMS - Week 3",
    "section": "Authorization Specification in SQL",
    "text": "Authorization Specification in SQL\n\nThe grant statement is used to confer authorization\n  grant &lt;privilege list&gt;\n  on &lt;relation name or view name&gt; to &lt;user list&gt;\n\\(\\text{&lt;user list&gt;}\\) is:\n\na user-id\npublic, which allows all valid users the privilege granted\nA role (more on this later)\n\nGranting a privilege on a view does not imply granting any privileges on the underlying relations\nThe grantor of the privilege must already hold the privilege on the specified item (or be the database administrator)",
    "crumbs": [
      "DBMS",
      "Week 3"
    ]
  },
  {
    "objectID": "pages/w3.html#privileges-in-sql",
    "href": "pages/w3.html#privileges-in-sql",
    "title": "DBMS - Week 3",
    "section": "Privileges in SQL",
    "text": "Privileges in SQL\n\nselect: allows read access to relation, or the ability to query using the view\n\nExample: grant users \\(U_1\\), \\(U_2\\), and \\(U_3\\) select authorization on the instructor relation:\n  grant select on instructor to U1, U2, U3\n\ninsert: the ability to insert tuples\nupdate: the ability to update tuples\ndelete: the ability to delete tuples\nall privileges: used as a short form for all the allowable privileges",
    "crumbs": [
      "DBMS",
      "Week 3"
    ]
  },
  {
    "objectID": "pages/w3.html#revoking-authorization-in-sql",
    "href": "pages/w3.html#revoking-authorization-in-sql",
    "title": "DBMS - Week 3",
    "section": "Revoking Authorization in SQL",
    "text": "Revoking Authorization in SQL\n\nThe revoke statement is used to revoke authorization\n  revoke &lt;privilege list&gt;\n  on &lt;relation name or view name&gt; from &lt;user list&gt;\nExample:\n  revoke select on branch from U1, U2, U3\n\\(\\text{&lt;privilege-list&gt;}\\) may be all to revoke all privileges the revokee may hold\nIf \\(\\text{&lt;revokee-list&gt;}\\) includes public, all users lose the privilege except those granted it explicitly\nIf the same privilege was granted twice to the same user by different grantees, the user may retain the privilege after the revocation\nAll privileges that depend on the privilege being revoked are also revoked",
    "crumbs": [
      "DBMS",
      "Week 3"
    ]
  },
  {
    "objectID": "pages/w3.html#roles",
    "href": "pages/w3.html#roles",
    "title": "DBMS - Week 3",
    "section": "Roles",
    "text": "Roles\n\n    create role instructor;\n    grant instructor to Amit;\nPrivileges can be granted to roles:\n  grant select on takes to instructor;\nRoles can be granted to users, as well as to other roles\n  create role teaching_assistant;\n  grant teaching_assistant to instructor;\n\nInstructor inherits all privileges of teaching_assistant\n\nChain of roles\n\ncreate role dean;\ngrant instructor to dean;\ngrant dean to Satoshi;",
    "crumbs": [
      "DBMS",
      "Week 3"
    ]
  },
  {
    "objectID": "pages/w3.html#authorization-on-views",
    "href": "pages/w3.html#authorization-on-views",
    "title": "DBMS - Week 3",
    "section": "Authorization on Views",
    "text": "Authorization on Views\n\n    create view geo_instructor as\n    (select *\n    from instructor\n    where dept_name = ’Geology’);\n    grant select on geo_instructor to geo_staff\nSuppose that a geo_staff member issues\n  select *\n  from geo_instructor;\nWhat if\n\ngeo_staff does not have permissions on instructor?\ncreator of view did not have some permissions on instructor?",
    "crumbs": [
      "DBMS",
      "Week 3"
    ]
  },
  {
    "objectID": "pages/w3.html#other-authorization-features",
    "href": "pages/w3.html#other-authorization-features",
    "title": "DBMS - Week 3",
    "section": "Other Authorization Features",
    "text": "Other Authorization Features\n\nreferences privilege to create foreign key\n  grant reference (dept_name) on department to Mariano;\n\nwhy is this required?\n\nTransfer of privileges\n\ngrant select on department to Amit with grant option;\nrevoke select on department from Amit, Satoshi cascade;\nrevoke select on department from Amit, Satoshi restrict;",
    "crumbs": [
      "DBMS",
      "Week 3"
    ]
  },
  {
    "objectID": "pages/w3.html#native-language-query-language",
    "href": "pages/w3.html#native-language-query-language",
    "title": "DBMS - Week 3",
    "section": "Native Language ← → Query Language",
    "text": "Native Language ← → Query Language",
    "crumbs": [
      "DBMS",
      "Week 3"
    ]
  },
  {
    "objectID": "pages/w3.html#functions-and-procedures",
    "href": "pages/w3.html#functions-and-procedures",
    "title": "DBMS - Week 3",
    "section": "Functions and Procedures",
    "text": "Functions and Procedures\n\nFunctions / Procedures and Control Flow Statements were added in SQL:1999\n\nFunctions/Procedures can be written in SQL itself, or in an external programming language (like C, Java)\nFunctions written in an external languages are particularly useful with specialized data types such as images and geometric objects\n\nExample: Functions to check if polygons overlap, or to compare images for similarity\n\nSome database systems support table-valued functions, which can return a relation as a result\n\nSQL:1999 also supports a rich set of imperative constructs, including loops, if-then-else, and assignment\nMany databases have proprietary procedural extensions to SQL that differ from SQL:1999",
    "crumbs": [
      "DBMS",
      "Week 3"
    ]
  },
  {
    "objectID": "pages/w3.html#sql-functions",
    "href": "pages/w3.html#sql-functions",
    "title": "DBMS - Week 3",
    "section": "SQL Functions",
    "text": "SQL Functions\n\nDefine a function that, given the name of a department, returns the count of the number of instructors in that department:\n    create function dept_count (dept name varchar(20))\n        returns integer\n        begin\n        declare d_count integer;\n            select count (*) into d_count\n            from instructor\n            where instructor.dept_name = dept_name\n        return d_cont;\n        end\nThe function dept count can be used to find the department names and budget of all departments with more that 12 instructors:\n    select dept_name, budget\n    from department\n    where dept_count (dept_name ) &gt; 12",
    "crumbs": [
      "DBMS",
      "Week 3"
    ]
  },
  {
    "objectID": "pages/w3.html#sql-functions-2",
    "href": "pages/w3.html#sql-functions-2",
    "title": "DBMS - Week 3",
    "section": "SQL Functions (2)",
    "text": "SQL Functions (2)\n\nCompound statement: begin . . . end May contain multiple SQL statements between begin and end.\nreturns – indicates the variable-type that is returned (for example, integer)\nreturn – specifies the values that are to be returned as result of invoking the function\nSQL function are in fact parameterized views that generalize the regular notion of views by allowing parameters",
    "crumbs": [
      "DBMS",
      "Week 3"
    ]
  },
  {
    "objectID": "pages/w3.html#table-functions",
    "href": "pages/w3.html#table-functions",
    "title": "DBMS - Week 3",
    "section": "Table Functions",
    "text": "Table Functions\n\nFunctions that return a relation as a result added in SQL:2003\nReturn all instructors in a given department:\n  create function instructor_of (dept_name char(20))\n    returns table (\n      ID varchar(5),\n      name varchar(20),\n      dept_name varchar(20)\n      salary numeric(8, 2) )\n    returns table\n      (select ID, name, dept_name, salary\n      from instructor\n      where instructor.dept_name = instructor_of.dept_name)\nUsage\n  select *\n  from table (instructor_of (‘Music’))",
    "crumbs": [
      "DBMS",
      "Week 3"
    ]
  },
  {
    "objectID": "pages/w3.html#sql-procedures",
    "href": "pages/w3.html#sql-procedures",
    "title": "DBMS - Week 3",
    "section": "SQL Procedures",
    "text": "SQL Procedures\n\nThe dept count function could instead be written as procedure:\n      create procedure dept_count_proc (\n          in dept_name varchar (20), out d_count integer)\n          begin\n              select count(*) into d_count\n              from instructor\n              where instructor.dept_name = dept_count_proc.dept_name\n          end\nProcedures can be invoked either from an SQL procedure or from embedded SQL, using the call statement.\ndeclare d_count integer;\ncall dept_count_proc(‘Physics’, d_count);\nProcedures and functions can be invoked also from dynamic SQL\nSQL:1999 allows overloading - more than one function/procedure of the same name as long as the number of arguments and/or the types of the arguments differ",
    "crumbs": [
      "DBMS",
      "Week 3"
    ]
  },
  {
    "objectID": "pages/w3.html#language-constructs-for-procedures-and-functions",
    "href": "pages/w3.html#language-constructs-for-procedures-and-functions",
    "title": "DBMS - Week 3",
    "section": "Language Constructs for Procedures and Functions",
    "text": "Language Constructs for Procedures and Functions\n\nSQL supports constructs that gives it almost all the power of a general-purpose programming language.\n\nWarning: Most database systems implement their own variant of the standard syntax\n\nCompound statements: begin . . . end\n\nMay contain multiple SQL statements between begin and end\nLocal variables can be declared within a compound statement",
    "crumbs": [
      "DBMS",
      "Week 3"
    ]
  },
  {
    "objectID": "pages/w3.html#language-constructs-2-while-and-repeat",
    "href": "pages/w3.html#language-constructs-2-while-and-repeat",
    "title": "DBMS - Week 3",
    "section": "Language Constructs (2): while and repeat",
    "text": "Language Constructs (2): while and repeat\n\nwhile loop\n     while boolean_expression do\n         sequence_of_statements;\n     end while;\nrepeat loop\n    repeat\n        sequence_of_statements;\n    until boolean_expression;\n    end repeat;",
    "crumbs": [
      "DBMS",
      "Week 3"
    ]
  },
  {
    "objectID": "pages/w3.html#language-constructs-3-for",
    "href": "pages/w3.html#language-constructs-3-for",
    "title": "DBMS - Week 3",
    "section": "Language Constructs (3): for",
    "text": "Language Constructs (3): for\n\nfor loop\n\nPermits iteration over all results of a query\n\nFind the budget if all departments:\n    declare n integer default 0;\n    for r as\n      select budget from department\n    do\n      set n = n + r.budget\n    end for;",
    "crumbs": [
      "DBMS",
      "Week 3"
    ]
  },
  {
    "objectID": "pages/w3.html#language-constructs-4-if-then-else",
    "href": "pages/w3.html#language-constructs-4-if-then-else",
    "title": "DBMS - Week 3",
    "section": "Language Constructs (4): if-then-else",
    "text": "Language Constructs (4): if-then-else\n\nConditional statements\n\nif-then-else\ncase\n\nif-then-else statement\n    if boolean_expression then\n        sequence_of_statements;\n    elseif boolean_expression then\n        sequence_of_statements;\n    ...\n    else\n        sequence_of_statements;\n    end if;\nThe if statement supports the use of optional elseif clauses and a default else clause\nExample procedure: registers student after ensuring that classroom capacity is not exceeded\n\nReturns 0 on success and -1 if capacity is exceeded",
    "crumbs": [
      "DBMS",
      "Week 3"
    ]
  },
  {
    "objectID": "pages/w3.html#language-constructs-5-simple-case",
    "href": "pages/w3.html#language-constructs-5-simple-case",
    "title": "DBMS - Week 3",
    "section": "Language Constructs (5): Simple case",
    "text": "Language Constructs (5): Simple case\n\nSimple case statement\n    case variable\n        when value1 then\n            sequence_of_statements;\n        when value2 then\n            sequence_of_statements;\n        ...\n        else\n            sequence_of_statements;\n    end case;\nThe when clause of the case statement defines the value that when satisfied determines the flow of control",
    "crumbs": [
      "DBMS",
      "Week 3"
    ]
  },
  {
    "objectID": "pages/w3.html#language-constructs-6-searched-case",
    "href": "pages/w3.html#language-constructs-6-searched-case",
    "title": "DBMS - Week 3",
    "section": "Language Constructs (6): Searched case",
    "text": "Language Constructs (6): Searched case\n\nSearched case statements\n    case\n        when sql_expression = value1 then\n            sequence_of_statements;\n        when sql_expression = value2 then\n            sequence_of_statements;\n        ...\n        else\n            sequence_of_statements;\n    end case;\nAny supported SQL expression can be used here. These expressions can contain references to variables, parameters, special registers, and more.",
    "crumbs": [
      "DBMS",
      "Week 3"
    ]
  },
  {
    "objectID": "pages/w3.html#language-constructs-7-exception",
    "href": "pages/w3.html#language-constructs-7-exception",
    "title": "DBMS - Week 3",
    "section": "Language Constructs (7): Exception",
    "text": "Language Constructs (7): Exception\n\nSignaling of exception conditions, and declaring handlers for exceptions\n    declare out_of_classroom_seats condition\n    declare exit handler for out_of_classroom_seats\n    begin\n        ...\n        signal out_of_classroom_seats\n        ...\n    end\n\nThe handler here is exit – causes enclosing begin . . . end to be terminate and exit\nOther actions possible on exception",
    "crumbs": [
      "DBMS",
      "Week 3"
    ]
  },
  {
    "objectID": "pages/w3.html#external-language-routines",
    "href": "pages/w3.html#external-language-routines",
    "title": "DBMS - Week 3",
    "section": "External Language Routines*",
    "text": "External Language Routines*\n\nSQL:1999 allows the definition of functions and procedures in an external / imperative programming language, (Java, C#, C, or C++) which can be invoked from SQL queries\nSuch functions can be more efficient than functions defined in SQL, and computations that cannot be carried out in SQL can be executed by these functions\nDeclaring external language procedures and functions\n    create procedure dept_count_proc(\n            in dept_name varchar(20),\n            out count integer)\n        language C\n        external name ’/usr/avi/bin/dept_count_proc’\n\n    create function dept_count(dept_name varchar(20))\n    returns integer\n        language C\n        external name ‘/usr/avi/bin/dept_count’",
    "crumbs": [
      "DBMS",
      "Week 3"
    ]
  },
  {
    "objectID": "pages/w3.html#external-language-routines-2",
    "href": "pages/w3.html#external-language-routines-2",
    "title": "DBMS - Week 3",
    "section": "External Language Routines (2)*",
    "text": "External Language Routines (2)*\n\nBenefits of external language functions/procedures:\n\nMore efficient for many operations, and more expressive power\n\nDrawbacks\n\nCode to implement function may need to be loaded into database system and executed in the database system’s address space\n\nRisk of accidental corruption of database structures\nSecurity risk, allowing users access to unauthorized data\n\nThere are alternatives, which give good security at the cost of performance\nDirect execution in the database system’s space is used when efficiency is more important than security",
    "crumbs": [
      "DBMS",
      "Week 3"
    ]
  },
  {
    "objectID": "pages/w3.html#external-language-routines-3-security",
    "href": "pages/w3.html#external-language-routines-3-security",
    "title": "DBMS - Week 3",
    "section": "External Language Routines (3)*: Security",
    "text": "External Language Routines (3)*: Security\n\nTo deal with security problems, we can do one of the following:\n\nUse sandbox techniques\n\nThat is, use a safe language like Java, which cannot be used to access/damage other parts of the database code\n\nRun external language functions/procedures in a separate process, with no access to the database process’ memory\n\nParameters and results communicated via inter-process communication\n\n\nBoth have performance overheads\nMany database systems support both above approaches as well as direct executing in database system address space",
    "crumbs": [
      "DBMS",
      "Week 3"
    ]
  },
  {
    "objectID": "pages/w3.html#trigger",
    "href": "pages/w3.html#trigger",
    "title": "DBMS - Week 3",
    "section": "Trigger",
    "text": "Trigger\n\nA trigger defines a set of actions that are performed in response to an insert, update, or delete operation on a specified table\n\nWhen such an SQL operation is executed, the trigger is said to have been activated\nTriggers are optional\nTriggers are defined using the create trigger statement\n\nTriggers can be used\n\nTo enforce data integrity rules via referential constraints and check constraints\nTo cause updates to other tables, automatically generate or transform values for inserted or updated rows, or invoke functions to perform tasks such as issuing alerts\n\nTo design a trigger mechanism, we must:\n\nSpecify the events / (like update, insert, or delete) for the trigger to executed\nSpecify the time (BEFORE or AFTER) of execution\nSpecify the actions to be taken when the trigger executes\n\nSyntax of triggers may vary across systems",
    "crumbs": [
      "DBMS",
      "Week 3"
    ]
  },
  {
    "objectID": "pages/w3.html#types-of-triggers-before",
    "href": "pages/w3.html#types-of-triggers-before",
    "title": "DBMS - Week 3",
    "section": "Types of Triggers: BEFORE",
    "text": "Types of Triggers: BEFORE\n\nBEFORE triggers\n\nRun before an update, or insert\nValues that are being updated or inserted can be modified before the database is actually modified. You can use triggers that run before an update or insert to:\n\nCheck or modify values before they are actually updated or inserted in the database\n\nUseful if user-view and internal database format differs\n\nRun other non-database operations coded in user-defined functions\n\n\nBEFORE DELETE triggers\n\nRun before a delete\n\nChecks values (a raises an error, if necessary)",
    "crumbs": [
      "DBMS",
      "Week 3"
    ]
  },
  {
    "objectID": "pages/w3.html#types-of-triggers-2-after",
    "href": "pages/w3.html#types-of-triggers-2-after",
    "title": "DBMS - Week 3",
    "section": "Types of Triggers (2): AFTER",
    "text": "Types of Triggers (2): AFTER\n\nAFTER triggers\n\nRun before an update, insert, or delete\nYou can use triggers that run after an update or insert to:\n\nUpdate data in other tables\n\nUseful for maintain relationships between data or keep audit trail\n\nCheck against other data in the table or in other tables\n\nUseful to ensure data integrity when referential integrity constraints aren’t appropriate, or\nwhen table check constraints limit checking to the current table only\n\nRun non-database operations coded in user-defined functions\n\nUseful when issuing alerts or to update information outside the database",
    "crumbs": [
      "DBMS",
      "Week 3"
    ]
  },
  {
    "objectID": "pages/w3.html#row-level-and-statement-level-triggers",
    "href": "pages/w3.html#row-level-and-statement-level-triggers",
    "title": "DBMS - Week 3",
    "section": "Row Level and Statement Level Triggers",
    "text": "Row Level and Statement Level Triggers\nThere are two types of triggers based on the level at which the triggers are applied:\n\nRow level triggers are executed whenever a row is affected by the event on which the trigger is defined.\n\nLet Employee be a table with 100 rows. Suppose an update statement is executed to increase the salary of each employee by 10%. Any row level update trigger configured on the table Employee will affect all the 100 rows in the table during this update.\n\nStatement level triggers perform a single action for all rows affected by a statement, instead of executing a separate action for each affected row.\n\nUsed for each statement instead of for each row\nUses referencing old table or referencing new table to refer to temporary tables called transition tables containing the affected rows\nCan be more efficient when dealing with SQL statements that update a large number of rows",
    "crumbs": [
      "DBMS",
      "Week 3"
    ]
  },
  {
    "objectID": "pages/w3.html#triggering-events-and-actions-in-sql",
    "href": "pages/w3.html#triggering-events-and-actions-in-sql",
    "title": "DBMS - Week 3",
    "section": "Triggering Events and Actions in SQL",
    "text": "Triggering Events and Actions in SQL\n\nTriggering event can be an insert, delete or update\nTriggers on update can be restricted to specific attributes\n\nFor example, after update of grade on takes\n\nValues of attributes before and after an update can be referenced\n\nreferencing old row as : for deletes and updates\nreferencing new row as : for inserts and updates\n\nTriggers can be activated before an event, which can serve as extra constraints. For example, convert blank grades to null.\n  create trigger setnull_trigger before update of takes\n  referencing new row as nrow\n  for each row\n  when (nrow.grade = ‘ ‘)\n    begin atomic\n      set nrow.grade = null;\n    end;",
    "crumbs": [
      "DBMS",
      "Week 3"
    ]
  },
  {
    "objectID": "pages/w3.html#triggering-to-maintain-credits_earned-value",
    "href": "pages/w3.html#triggering-to-maintain-credits_earned-value",
    "title": "DBMS - Week 3",
    "section": "Triggering to Maintain credits_earned value",
    "text": "Triggering to Maintain credits_earned value\n  create trigger credits_earned after update of grade on takes\n  referencing new row as nrow\n  referencing old row as orow\n  for each row\n  when nrow.grade &lt;&gt; 'F' and nrow.grade is not null and\n       (orow.grade = 'F' or orow.grade is null)\n    begin atomic\n      update student\n      set tot_cred = tot_cred + \n          (select credits\n          from course\n          where course.course_id = nrow.course_id)\n      where student.ID = nrow.ID;\n    end;",
    "crumbs": [
      "DBMS",
      "Week 3"
    ]
  },
  {
    "objectID": "pages/w3.html#how-to-use-triggers",
    "href": "pages/w3.html#how-to-use-triggers",
    "title": "DBMS - Week 3",
    "section": "How to use triggers?",
    "text": "How to use triggers?\n\nThe optimal use of DML triggers is for short, simple, and easy to maintain write operations that act largely independent of an applications business logic.\nTypical and recommended uses of triggers include:\n\nLogging changes to a history table\nAuditing users and their actions against sensitive tables\nAdding additional values to a table that may not be available to an application (due to security restrictions or other limitations), such as:\n\nLogin/user name\nTime an operation occurs\nServer/database name\n\nSimple validation",
    "crumbs": [
      "DBMS",
      "Week 3"
    ]
  },
  {
    "objectID": "pages/w3.html#how-not-to-use-triggers",
    "href": "pages/w3.html#how-not-to-use-triggers",
    "title": "DBMS - Week 3",
    "section": "How not to use triggers?",
    "text": "How not to use triggers?\n\nTriggers are like Lays: Once you pop, you can’t stop\nOne of the greatest challenges for architects and developers is to ensure that\n\ntriggers are used only as needed, and\nto not allow them to become a one-size-fits-all solution for any data needs that happen to come along\n\nAdding triggers is often seen as faster and easier than adding code to an application, but the cost of doing so is compounded over time with each added line of code",
    "crumbs": [
      "DBMS",
      "Week 3"
    ]
  },
  {
    "objectID": "pages/w3.html#how-to-use-triggers-2",
    "href": "pages/w3.html#how-to-use-triggers-2",
    "title": "DBMS - Week 3",
    "section": "How to use triggers? (2)",
    "text": "How to use triggers? (2)\n\nTriggers can become dangerous when:\n\nThere are too many\nTrigger code becomes complex\nTriggers go cross-server - across databases over network\nTriggers call triggers\nRecursive triggers are set to ON. This database-level setting is set to off by default\nFunctions, stored procedures, or views are in triggers\nIteration occurs",
    "crumbs": [
      "DBMS",
      "Week 3"
    ]
  },
  {
    "objectID": "pages/w4.html",
    "href": "pages/w4.html",
    "title": "DBMS - Week 4",
    "section": "",
    "text": "Relational Algebra\n\nProcedural and Algebra based\n\nTuple Relational Calculus\n\nNon-Procedural (Declarative) and Predicate Calculus based\n\nDomain Relational Calculus\n\nNon-Procedural (Declarative) and Predicate Calculus based\n\n\n\n\n\nRelational algebra is a procedural query language which takes relations as input and returns relation as output.\nIt was created by Edgar F. Codd at IBM in 1970.\nSix basic operators of relational algebra are:\n\nSelect (\\(\\sigma\\))\nProject (\\(\\Pi\\))\nUnion (\\(\\cup\\))\nSet Difference (\\(-\\))\nCartesian Product (\\(\\times\\))\nRename (\\(\\rho\\))\n\n\n\n\n\n\nNotation: \\(\\sigma_{p}(r)\\)\n\\(p\\) is called the selection predicate\nDefinition: \\[\n\\sigma_{p}(r) = \\{t \\mid t \\in r \\text{ and } p(t) \\}\n\\]\nwhere \\(p\\) is a formula in propositional calculus consisting of terms connected by: \\(\\land\\) (and), \\(\\lor\\) (or), and \\(\\lnot\\) (not).\nEach term is one of:\n&lt; attribute &gt; op &lt; attribute &gt; or &lt; constant &gt;\nwhere op is one of: \\(=\\), \\(\\neq\\), \\(&lt;\\), \\(\\leq\\), \\(&gt;\\), \\(\\geq\\)\n\n\n\n\n\nCode\nimport pandas as pd\nfrom IPython.display import HTML\ndata1 = {\n    'A': ['α', 'α', 'β', 'β'],\n    'B': ['α', 'β', 'β', 'β'],\n    'C': [1, 5, 12, 23],\n    'D': [7, 7, 3, 10]\n}\n\n# Create DataFrame\ndf1 = pd.DataFrame(data1)\n\n# Display the DataFrame without the index\nHTML(df1.to_html(index=False))\n# print(df1.to_string(index=False))\n\n\n\n\n\nA\nB\nC\nD\n\n\n\n\nα\nα\n1\n7\n\n\nα\nβ\n5\n7\n\n\nβ\nβ\n12\n3\n\n\nβ\nβ\n23\n10\n\n\n\n\n\n\\[\nr\n\\]\n\n\nCode\n# Selection operation: A = B and D &gt; 5\nselected_df_1 = df1[(df1['A'] == df1['B']) & (df1['D'] &gt; 5)]\n\n# Display the DataFrame without the index\nHTML(selected_df_1.to_html(index=False))\n\n\n\n\n\nA\nB\nC\nD\n\n\n\n\nα\nα\n1\n7\n\n\nβ\nβ\n23\n10\n\n\n\n\n\n\\[\n\\sigma_{A=B\\wedge D&gt;5}(r)\n\\]\n\n\n\n\n\nNotation: \\(\\Pi_{A_1, A_2, \\ldots, A_k}(r)\\)\nwhere \\(A_1, A_2, \\ldots, A_k\\) are attributes of relation \\(r\\)\nThe result is defined as the relation of \\(k\\) columns obtained by deleting columns other than \\(A_1, A_2, \\ldots, A_k\\) from \\(r\\)\nDuplicate rows are automatically eliminated, since the result is a set\n\n\n\n\n\nCode\nrelation2 = {\n    'A': ['α', 'α', 'β', 'β'],\n    'B': [10, 20, 30, 40],\n    'C': [1, 1, 1, 2]\n}\n\n# Create DataFrame\ndf2 = pd.DataFrame(relation2)\n\n# Display the DataFrame without the index\nHTML(df2.to_html(index=False))\n\n\n\n\n\nA\nB\nC\n\n\n\n\nα\n10\n1\n\n\nα\n20\n1\n\n\nβ\n30\n1\n\n\nβ\n40\n2\n\n\n\n\n\n\\[\nr\n\\]\n\n\nCode\nprojected_df_1 = df2[['A', 'C']].drop_duplicates()\n\n# Display the projected DataFrame without duplicates\nHTML(projected_df_1.to_html(index=False))\n\n\n\n\n\nA\nC\n\n\n\n\nα\n1\n\n\nβ\n1\n\n\nβ\n2\n\n\n\n\n\n\\[\n\\Pi_{A, C}(r)\n\\]\n\n\n\n\n\nNotation: \\(r \\cup s\\)\nDefined as: \\(r \\cup s = \\{t \\mid t \\in r \\text{ or } t \\in s \\}\\)\nFor \\(r \\cup s\\) to be valid\n\n\\(r\\) and \\(s\\) must have the same arity (same number of attributes)\nThe attribute domains must be compatible (same type)\n\n\n\n\n\n\nCode\nr = {\n    'A': ['α', 'α', 'β'],\n    'B': [1, 2, 1]\n}\n\n# Create DataFrame\ndf_r = pd.DataFrame(r)\n\n\ns = {\n    'A': ['α', 'β'],\n    'B': [2, 3]\n}\n\n# Create DataFrame\ndf_s = pd.DataFrame(s)\n\n# Display the DataFrame without the index\nHTML(df_r.to_html(index=False))\n\n\n\n\n\nA\nB\n\n\n\n\nα\n1\n\n\nα\n2\n\n\nβ\n1\n\n\n\n\n\n\\[\nr\n\\]\n\n\nCode\n# Display the DataFrame without the index\nHTML(df_s.to_html(index=False))\n\n\n\n\n\nA\nB\n\n\n\n\nα\n2\n\n\nβ\n3\n\n\n\n\n\n\\[\ns\n\\]\n\n\nCode\n# Union operation\nunion_df = pd.concat([df_r, df_s]).drop_duplicates()\n\n# Display the DataFrame without the index\nHTML(union_df.to_html(index=False))\n\n\n\n\n\nA\nB\n\n\n\n\nα\n1\n\n\nα\n2\n\n\nβ\n1\n\n\nβ\n3\n\n\n\n\n\n\n\\[\nr \\cup s\n\\]\n\n\n\n\n\nNotation: \\(r - s\\)\nDefined as: \\(r - s = \\{t \\mid t \\in r \\text{ and } t \\notin s \\}\\)\nSet differences must be taken between compatible relations\n\n\\(r\\) and \\(s\\) must have the same arity\nThe attribute domains must be compatible\n\n\n\n\n\n\nCode\nr = {\n    'A': ['α', 'α', 'β'],\n    'B': [1, 2, 1]\n}\n\n# Create DataFrame\ndf_r = pd.DataFrame(r)\n\ns = {\n    'A': ['α', 'β'],\n    'B': [2, 3]\n}\n\n# Create DataFrame\ndf_s = pd.DataFrame(s)\n\n# Display the DataFrame without the index\nHTML(df_r.to_html(index=False))\n\n\n\n\n\nA\nB\n\n\n\n\nα\n1\n\n\nα\n2\n\n\nβ\n1\n\n\n\n\n\n\\[\nr\n\\]\n\n\nCode\n# Display the DataFrame without the index\nHTML(df_s.to_html(index=False))\n\n\n\n\n\nA\nB\n\n\n\n\nα\n2\n\n\nβ\n3\n\n\n\n\n\n\\[\ns\n\\]\n\n\nCode\n# Difference operation\ndifference_df = df_r.merge(df_s, on=['A', 'B'], how='left', indicator=True).query('_merge == \"left_only\"').drop(columns=['_merge'])\n\n# Display the set difference DataFrame without the index\ndisplay(HTML(difference_df.to_html(index=False)))\n\n\n\n\n\nA\nB\n\n\n\n\nα\n1\n\n\nβ\n1\n\n\n\n\n\n\\[\nr - s\n\\]\n\n\n\n\n\nNotation: \\(r \\cap s\\)\nDefined as: \\(r \\cap s = \\{t \\mid t \\in r \\text{ and } t \\in s \\}\\)\nAssume:\n\n\\(r\\), \\(s\\) have the same arity\nAttributes of \\(r\\) and \\(s\\) are compatible\n\nNote: \\(r \\cap s = r - (r - s)\\)\n\n\n\n\n\nCode\nimport pandas as pd\nfrom IPython.display import HTML\n\n# Relation r\nr = {\n    'A': ['α', 'α', 'β'],\n    'B': [1, 2, 1]\n}\n\n# Create DataFrame for r\ndf_r = pd.DataFrame(r)\n\n# Relation s\ns = {\n    'A': ['α', 'β'],\n    'B': [2, 3]\n}\n\n# Create DataFrame for s\ndf_s = pd.DataFrame(s)\n\n# Display the DataFrame without the index\nHTML(df_r.to_html(index=False))\n\n\n\n\n\nA\nB\n\n\n\n\nα\n1\n\n\nα\n2\n\n\nβ\n1\n\n\n\n\n\n\\[\nr\n\\]\n\n\nCode\n# Display the DataFrame without the index\nHTML(df_s.to_html(index=False))\n\n\n\n\n\nA\nB\n\n\n\n\nα\n2\n\n\nβ\n3\n\n\n\n\n\n\\[\ns\n\\]\n\n\nCode\n# Intersection operation\nintersection_df = pd.merge(df_r, df_s, on=['A', 'B'], how='inner')\n\n# Display the intersection DataFrame without the index\ndisplay(HTML(intersection_df.to_html(index=False)))\n\n\n\n\n\nA\nB\n\n\n\n\nα\n2\n\n\n\n\n\n\\[\nr \\cap s\n\\]\n\n\n\n\n\nNotation: \\(r \\times s\\)\nDefined as: \\(r \\times s = \\{t_1, t_2 \\mid t_1 \\in r \\text{ and } t_2 \\in s \\}\\)\nAssume that attributes of \\(r\\) and \\(s\\) are disjoint (no common attributes)\nIf attributes are not disjoint, use rename operation to make them disjoint\n\n\n\n\n\nCode\nimport pandas as pd\nfrom IPython.display import HTML\n\n# Relation r\nr = {\n    'A': ['α', 'β'],\n    'B': [1, 2]\n}\n\n# Create DataFrame for r\ndf_r = pd.DataFrame(r)\n\n# Relation s\ns = {\n    'C': ['α', 'β', 'β', 'γ'],\n    'D': [10, 10, 20, 10],\n    'E': ['a', 'a', 'b', 'b']\n}\n\n# Create DataFrame for s\ndf_s = pd.DataFrame(s)\n\n# Display the original DataFrames without the index\ndisplay(HTML(df_r.to_html(index=False)))\n\n\n\n\n\nA\nB\n\n\n\n\nα\n1\n\n\nβ\n2\n\n\n\n\n\n\\[\nr\n\\]\n\n\nCode\ndisplay(HTML(df_s.to_html(index=False)))\n\n\n\n\n\nC\nD\nE\n\n\n\n\nα\n10\na\n\n\nβ\n10\na\n\n\nβ\n20\nb\n\n\nγ\n10\nb\n\n\n\n\n\n\\[\ns\n\\]\n\n\nCode\n# Cartesian product of df_r and df_s\ncartesian_product_df = pd.merge(df_r.assign(key=1), df_s.assign(key=1), on='key').drop('key', axis=1)\n\n# Display the Cartesian product DataFrame without the index\ndisplay(HTML(cartesian_product_df.to_html(index=False)))\n\n\n\n\n\nA\nB\nC\nD\nE\n\n\n\n\nα\n1\nα\n10\na\n\n\nα\n1\nβ\n10\na\n\n\nα\n1\nβ\n20\nb\n\n\nα\n1\nγ\n10\nb\n\n\nβ\n2\nα\n10\na\n\n\nβ\n2\nβ\n10\na\n\n\nβ\n2\nβ\n20\nb\n\n\nβ\n2\nγ\n10\nb\n\n\n\n\n\n\\[\nr \\times s\n\\]\n\n\n\n\n\nAllows us to name, and therefore to refer to, the result of a relational-algebra expression\nAllows us to refer to a relation by more than one name\nExample:\n\\(\\rho_{X}(E)\\)\nreturns the relation \\(E\\) under the name \\(X\\)\nIf a relational-algebra expression \\(E\\) has arity \\(n\\), then \\[\n\\rho_{X(A_1, A_2, \\ldots, A_n)}(E)\n\\] returns the result of the expression \\(E\\) under the name \\(X\\), and with the attributes renamed to \\[\nA_1, A_2, \\ldots, A_n\n\\]\n\n\n\n\n\nCode\nimport pandas as pd\nfrom IPython.display import HTML\n\n# Relation r\nr = {\n    'A': ['α', 'β'],\n    'B': [1, 2]\n}\n\n# Create DataFrame for r\ndf_r = pd.DataFrame(r)\n\n# Relation r's duplicate relation s\ndf_s = pd.DataFrame(r)\n\n# Display the original DataFrame without the index\ndisplay(HTML(df_r.to_html(index=False)))\n\n\n\n\n\nA\nB\n\n\n\n\nα\n1\n\n\nβ\n2\n\n\n\n\n\n\\[\nr\n\\]\n\n\nCode\n# Cartesian product of df_r and df_s\ncartesian_product_df = pd.merge(df_r.assign(key=1), df_s.assign(key=1), on='key').drop('key', axis=1)\n\n# Rename the columns to make them unique\ncartesian_product_df.columns = ['r.A', 'r.B', 's.A','s.B']\n\n# Display the Cartesian product DataFrame without the index\ndisplay(HTML(cartesian_product_df.to_html(index=False)))\n\n\n\n\n\nr.A\nr.B\ns.A\ns.B\n\n\n\n\nα\n1\nα\n1\n\n\nα\n1\nβ\n2\n\n\nβ\n2\nα\n1\n\n\nβ\n2\nβ\n2\n\n\n\n\n\n\\[\nr \\times \\rho_{s}(r)\n\\]\n\n\n\n\n\nThe division operation is applied to two relations\n\\(R(Z) \\div S(X)\\), where \\(X\\) is a subset of \\(Z\\). Let \\(Y = Z - X\\) (hence \\(Z = X \\cup Y\\)); that is, let \\(Y\\) be the set of attributes of \\(R\\) that are not in \\(S\\)\nThe result of the division operation is a relation \\(T(Y)\\) that includes a tuple \\(t\\) if tuples \\(t_R\\) appear in \\(R\\) with \\(t_R[Y] = t\\), and with\n\n\\(t_R[X] = t_S\\) for all tuples \\(t_S\\) in \\(S\\)\n\nFor a tuple \\(t\\) to appear in the result \\(T\\) of the division operation, the values in \\(t\\) must appear in \\(R\\) with all possible combinations of values in \\(S\\)\nDivision is a derived operation, and can be expressed in terms of the basic operations of relational algebra\n\\(r \\div s \\equiv \\Pi_{R - S}(r) - \\Pi_{R - S}(r)((\\Pi_{R - S}(r) \\times s) - \\Pi_{R-S,S}(r))\\)\n\n\n\n\n\nCode\nimport pandas as pd\nfrom IPython.display import HTML\ndata1 = {\n    'Lecturer': ['Brown', 'Brown', 'Green', 'Green', 'Lewis', 'Smith'],\n    'Module': ['Compilers', 'Databases', 'Prolog', 'Databases', 'Prolog', 'Databases']\n}\n\n# Create DataFrame\ndf1 = pd.DataFrame(data1)\n\n# Display the DataFrame without the index\nHTML(df1.to_html(index=False))\n\n\n\n\n\nLecturer\nModule\n\n\n\n\nBrown\nCompilers\n\n\nBrown\nDatabases\n\n\nGreen\nProlog\n\n\nGreen\nDatabases\n\n\nLewis\nProlog\n\n\nSmith\nDatabases\n\n\n\n\n\n\\[\nR\n\\]\n\n\nCode\ndata2 = {\n    'Subject': ['Prolog']\n}\n\n# Create DataFrame\ndf2 = pd.DataFrame(data2)\n\n# Display the DataFrame without the index\nHTML(df2.to_html(index=False))\n\n\n\n\n\nSubject\n\n\n\n\nProlog\n\n\n\n\n\n\\[\nS\n\\]\n\n\nCode\n# Division operation\ndivision_df = df1.groupby('Lecturer').Module.apply(set).reset_index()\ndivision_df = division_df[division_df['Module'].apply(lambda x: df2['Subject'].values[0] in x)]\ndivision_df = division_df.drop(columns='Module')\n\n# Display the division DataFrame without the index\ndisplay(HTML(division_df.to_html(index=False)))\n\n\n\n\n\nLecturer\n\n\n\n\nGreen\n\n\nLewis\n\n\n\n\n\n\\[\nR \\mid S\n\\]",
    "crumbs": [
      "DBMS",
      "Week 4"
    ]
  },
  {
    "objectID": "pages/w4.html#formal-relational-query-language",
    "href": "pages/w4.html#formal-relational-query-language",
    "title": "DBMS - Week 4",
    "section": "",
    "text": "Relational Algebra\n\nProcedural and Algebra based\n\nTuple Relational Calculus\n\nNon-Procedural (Declarative) and Predicate Calculus based\n\nDomain Relational Calculus\n\nNon-Procedural (Declarative) and Predicate Calculus based",
    "crumbs": [
      "DBMS",
      "Week 4"
    ]
  },
  {
    "objectID": "pages/w4.html#relational-algebra",
    "href": "pages/w4.html#relational-algebra",
    "title": "DBMS - Week 4",
    "section": "",
    "text": "Relational algebra is a procedural query language which takes relations as input and returns relation as output.\nIt was created by Edgar F. Codd at IBM in 1970.\nSix basic operators of relational algebra are:\n\nSelect (\\(\\sigma\\))\nProject (\\(\\Pi\\))\nUnion (\\(\\cup\\))\nSet Difference (\\(-\\))\nCartesian Product (\\(\\times\\))\nRename (\\(\\rho\\))",
    "crumbs": [
      "DBMS",
      "Week 4"
    ]
  },
  {
    "objectID": "pages/w4.html#select-operation-σ",
    "href": "pages/w4.html#select-operation-σ",
    "title": "DBMS - Week 4",
    "section": "Select Operation (σ)",
    "text": "Select Operation (σ)\n\nThe select operation selects tuples that satisfy a given predicate\nNotation: \\sigma_{p}(r)\n\nr is a relation\n\np is called the selection predicate\nDefinition: \n\\sigma_{p}(r) = \\{t \\in r \\mid p(t) = \\text{true}\\}\n\nwhere p is a formula in propositional calculus consisting of terms connected by:\n\nand ( \\land )\nor ( \\lor )\nnot ( \\lnot )",
    "crumbs": [
      "DBMS",
      "Week 4"
    ]
  },
  {
    "objectID": "pages/w4.html#select-operation-sigma",
    "href": "pages/w4.html#select-operation-sigma",
    "title": "DBMS - Week 4",
    "section": "",
    "text": "Notation: \\sigma_{p}(r)\np is called the selection predicate\nDefinition: \n\\sigma_{p}(r) = \\{t \\mid t \\in r \\text{ and } p(t) \\}\n\nwhere p is a formula in propositional calculus consisting of terms connected by: \\land (and), \\lor (or), and \\lnot (not).\nEach term is one of:\n&lt; attribute &gt; op &lt; attribute &gt; or &lt; constant &gt;\nwhere op is one of: =, \\neq, &lt;, \\leq, &gt;, \\geq\nExample:\n\n\n\nA\nB\nC\nD\n\n\n\n\n\\alpha\n\\alpha\n1\n7\n\n\n\\alpha\n\\beta\n5\n7\n\n\n\\beta\n\\beta\n12\n3\n\n\n\\beta\n\\beta\n23\n10\n\n\n\n\\sigma_{A=B \\wedge D &gt; 5}(r)\n\n\n\nA\nB\nC\nD\n\n\n\n\n\\alpha\n\\alpha\n1\n7\n\n\n\\beta\n\\beta\n23\n10",
    "crumbs": [
      "DBMS",
      "Week 4"
    ]
  },
  {
    "objectID": "pages/w4.html#select-operation",
    "href": "pages/w4.html#select-operation",
    "title": "DBMS - Week 4",
    "section": "",
    "text": "Notation: \\(\\sigma_{p}(r)\\)\n\\(p\\) is called the selection predicate\nDefinition: \\[\n\\sigma_{p}(r) = \\{t \\mid t \\in r \\text{ and } p(t) \\}\n\\]\nwhere \\(p\\) is a formula in propositional calculus consisting of terms connected by: \\(\\land\\) (and), \\(\\lor\\) (or), and \\(\\lnot\\) (not).\nEach term is one of:\n&lt; attribute &gt; op &lt; attribute &gt; or &lt; constant &gt;\nwhere op is one of: \\(=\\), \\(\\neq\\), \\(&lt;\\), \\(\\leq\\), \\(&gt;\\), \\(\\geq\\)\n\n\n\n\n\nCode\nimport pandas as pd\nfrom IPython.display import HTML\ndata1 = {\n    'A': ['α', 'α', 'β', 'β'],\n    'B': ['α', 'β', 'β', 'β'],\n    'C': [1, 5, 12, 23],\n    'D': [7, 7, 3, 10]\n}\n\n# Create DataFrame\ndf1 = pd.DataFrame(data1)\n\n# Display the DataFrame without the index\nHTML(df1.to_html(index=False))\n# print(df1.to_string(index=False))\n\n\n\n\n\nA\nB\nC\nD\n\n\n\n\nα\nα\n1\n7\n\n\nα\nβ\n5\n7\n\n\nβ\nβ\n12\n3\n\n\nβ\nβ\n23\n10\n\n\n\n\n\n\\[\nr\n\\]\n\n\nCode\n# Selection operation: A = B and D &gt; 5\nselected_df_1 = df1[(df1['A'] == df1['B']) & (df1['D'] &gt; 5)]\n\n# Display the DataFrame without the index\nHTML(selected_df_1.to_html(index=False))\n\n\n\n\n\nA\nB\nC\nD\n\n\n\n\nα\nα\n1\n7\n\n\nβ\nβ\n23\n10\n\n\n\n\n\n\\[\n\\sigma_{A=B\\wedge D&gt;5}(r)\n\\]",
    "crumbs": [
      "DBMS",
      "Week 4"
    ]
  },
  {
    "objectID": "pages/w4.html#project-operation",
    "href": "pages/w4.html#project-operation",
    "title": "DBMS - Week 4",
    "section": "",
    "text": "Notation: \\(\\Pi_{A_1, A_2, \\ldots, A_k}(r)\\)\nwhere \\(A_1, A_2, \\ldots, A_k\\) are attributes of relation \\(r\\)\nThe result is defined as the relation of \\(k\\) columns obtained by deleting columns other than \\(A_1, A_2, \\ldots, A_k\\) from \\(r\\)\nDuplicate rows are automatically eliminated, since the result is a set\n\n\n\n\n\nCode\nrelation2 = {\n    'A': ['α', 'α', 'β', 'β'],\n    'B': [10, 20, 30, 40],\n    'C': [1, 1, 1, 2]\n}\n\n# Create DataFrame\ndf2 = pd.DataFrame(relation2)\n\n# Display the DataFrame without the index\nHTML(df2.to_html(index=False))\n\n\n\n\n\nA\nB\nC\n\n\n\n\nα\n10\n1\n\n\nα\n20\n1\n\n\nβ\n30\n1\n\n\nβ\n40\n2\n\n\n\n\n\n\\[\nr\n\\]\n\n\nCode\nprojected_df_1 = df2[['A', 'C']].drop_duplicates()\n\n# Display the projected DataFrame without duplicates\nHTML(projected_df_1.to_html(index=False))\n\n\n\n\n\nA\nC\n\n\n\n\nα\n1\n\n\nβ\n1\n\n\nβ\n2\n\n\n\n\n\n\\[\n\\Pi_{A, C}(r)\n\\]",
    "crumbs": [
      "DBMS",
      "Week 4"
    ]
  },
  {
    "objectID": "pages/w4.html#union-operation",
    "href": "pages/w4.html#union-operation",
    "title": "DBMS - Week 4",
    "section": "",
    "text": "Notation: \\(r \\cup s\\)\nDefined as: \\(r \\cup s = \\{t \\mid t \\in r \\text{ or } t \\in s \\}\\)\nFor \\(r \\cup s\\) to be valid\n\n\\(r\\) and \\(s\\) must have the same arity (same number of attributes)\nThe attribute domains must be compatible (same type)\n\n\n\n\n\n\nCode\nr = {\n    'A': ['α', 'α', 'β'],\n    'B': [1, 2, 1]\n}\n\n# Create DataFrame\ndf_r = pd.DataFrame(r)\n\n\ns = {\n    'A': ['α', 'β'],\n    'B': [2, 3]\n}\n\n# Create DataFrame\ndf_s = pd.DataFrame(s)\n\n# Display the DataFrame without the index\nHTML(df_r.to_html(index=False))\n\n\n\n\n\nA\nB\n\n\n\n\nα\n1\n\n\nα\n2\n\n\nβ\n1\n\n\n\n\n\n\\[\nr\n\\]\n\n\nCode\n# Display the DataFrame without the index\nHTML(df_s.to_html(index=False))\n\n\n\n\n\nA\nB\n\n\n\n\nα\n2\n\n\nβ\n3\n\n\n\n\n\n\\[\ns\n\\]\n\n\nCode\n# Union operation\nunion_df = pd.concat([df_r, df_s]).drop_duplicates()\n\n# Display the DataFrame without the index\nHTML(union_df.to_html(index=False))\n\n\n\n\n\nA\nB\n\n\n\n\nα\n1\n\n\nα\n2\n\n\nβ\n1\n\n\nβ\n3\n\n\n\n\n\n\n\\[\nr \\cup s\n\\]",
    "crumbs": [
      "DBMS",
      "Week 4"
    ]
  },
  {
    "objectID": "pages/w4.html#difference-operation",
    "href": "pages/w4.html#difference-operation",
    "title": "DBMS - Week 4",
    "section": "",
    "text": "Notation: \\(r - s\\)\nDefined as: \\(r - s = \\{t \\mid t \\in r \\text{ and } t \\notin s \\}\\)\nSet differences must be taken between compatible relations\n\n\\(r\\) and \\(s\\) must have the same arity\nThe attribute domains must be compatible\n\n\n\n\n\n\nCode\nr = {\n    'A': ['α', 'α', 'β'],\n    'B': [1, 2, 1]\n}\n\n# Create DataFrame\ndf_r = pd.DataFrame(r)\n\ns = {\n    'A': ['α', 'β'],\n    'B': [2, 3]\n}\n\n# Create DataFrame\ndf_s = pd.DataFrame(s)\n\n# Display the DataFrame without the index\nHTML(df_r.to_html(index=False))\n\n\n\n\n\nA\nB\n\n\n\n\nα\n1\n\n\nα\n2\n\n\nβ\n1\n\n\n\n\n\n\\[\nr\n\\]\n\n\nCode\n# Display the DataFrame without the index\nHTML(df_s.to_html(index=False))\n\n\n\n\n\nA\nB\n\n\n\n\nα\n2\n\n\nβ\n3\n\n\n\n\n\n\\[\ns\n\\]\n\n\nCode\n# Difference operation\ndifference_df = df_r.merge(df_s, on=['A', 'B'], how='left', indicator=True).query('_merge == \"left_only\"').drop(columns=['_merge'])\n\n# Display the set difference DataFrame without the index\ndisplay(HTML(difference_df.to_html(index=False)))\n\n\n\n\n\nA\nB\n\n\n\n\nα\n1\n\n\nβ\n1\n\n\n\n\n\n\\[\nr - s\n\\]",
    "crumbs": [
      "DBMS",
      "Week 4"
    ]
  },
  {
    "objectID": "pages/w4.html#intersection-operation",
    "href": "pages/w4.html#intersection-operation",
    "title": "DBMS - Week 4",
    "section": "",
    "text": "Notation: \\(r \\cap s\\)\nDefined as: \\(r \\cap s = \\{t \\mid t \\in r \\text{ and } t \\in s \\}\\)\nAssume:\n\n\\(r\\), \\(s\\) have the same arity\nAttributes of \\(r\\) and \\(s\\) are compatible\n\nNote: \\(r \\cap s = r - (r - s)\\)\n\n\n\n\n\nCode\nimport pandas as pd\nfrom IPython.display import HTML\n\n# Relation r\nr = {\n    'A': ['α', 'α', 'β'],\n    'B': [1, 2, 1]\n}\n\n# Create DataFrame for r\ndf_r = pd.DataFrame(r)\n\n# Relation s\ns = {\n    'A': ['α', 'β'],\n    'B': [2, 3]\n}\n\n# Create DataFrame for s\ndf_s = pd.DataFrame(s)\n\n# Display the DataFrame without the index\nHTML(df_r.to_html(index=False))\n\n\n\n\n\nA\nB\n\n\n\n\nα\n1\n\n\nα\n2\n\n\nβ\n1\n\n\n\n\n\n\\[\nr\n\\]\n\n\nCode\n# Display the DataFrame without the index\nHTML(df_s.to_html(index=False))\n\n\n\n\n\nA\nB\n\n\n\n\nα\n2\n\n\nβ\n3\n\n\n\n\n\n\\[\ns\n\\]\n\n\nCode\n# Intersection operation\nintersection_df = pd.merge(df_r, df_s, on=['A', 'B'], how='inner')\n\n# Display the intersection DataFrame without the index\ndisplay(HTML(intersection_df.to_html(index=False)))\n\n\n\n\n\nA\nB\n\n\n\n\nα\n2\n\n\n\n\n\n\\[\nr \\cap s\n\\]",
    "crumbs": [
      "DBMS",
      "Week 4"
    ]
  },
  {
    "objectID": "pages/w4.html#cartesian-product-operation",
    "href": "pages/w4.html#cartesian-product-operation",
    "title": "DBMS - Week 4",
    "section": "",
    "text": "Notation: \\(r \\times s\\)\nDefined as: \\(r \\times s = \\{t_1, t_2 \\mid t_1 \\in r \\text{ and } t_2 \\in s \\}\\)\nAssume that attributes of \\(r\\) and \\(s\\) are disjoint (no common attributes)\nIf attributes are not disjoint, use rename operation to make them disjoint\n\n\n\n\n\nCode\nimport pandas as pd\nfrom IPython.display import HTML\n\n# Relation r\nr = {\n    'A': ['α', 'β'],\n    'B': [1, 2]\n}\n\n# Create DataFrame for r\ndf_r = pd.DataFrame(r)\n\n# Relation s\ns = {\n    'C': ['α', 'β', 'β', 'γ'],\n    'D': [10, 10, 20, 10],\n    'E': ['a', 'a', 'b', 'b']\n}\n\n# Create DataFrame for s\ndf_s = pd.DataFrame(s)\n\n# Display the original DataFrames without the index\ndisplay(HTML(df_r.to_html(index=False)))\n\n\n\n\n\nA\nB\n\n\n\n\nα\n1\n\n\nβ\n2\n\n\n\n\n\n\\[\nr\n\\]\n\n\nCode\ndisplay(HTML(df_s.to_html(index=False)))\n\n\n\n\n\nC\nD\nE\n\n\n\n\nα\n10\na\n\n\nβ\n10\na\n\n\nβ\n20\nb\n\n\nγ\n10\nb\n\n\n\n\n\n\\[\ns\n\\]\n\n\nCode\n# Cartesian product of df_r and df_s\ncartesian_product_df = pd.merge(df_r.assign(key=1), df_s.assign(key=1), on='key').drop('key', axis=1)\n\n# Display the Cartesian product DataFrame without the index\ndisplay(HTML(cartesian_product_df.to_html(index=False)))\n\n\n\n\n\nA\nB\nC\nD\nE\n\n\n\n\nα\n1\nα\n10\na\n\n\nα\n1\nβ\n10\na\n\n\nα\n1\nβ\n20\nb\n\n\nα\n1\nγ\n10\nb\n\n\nβ\n2\nα\n10\na\n\n\nβ\n2\nβ\n10\na\n\n\nβ\n2\nβ\n20\nb\n\n\nβ\n2\nγ\n10\nb\n\n\n\n\n\n\\[\nr \\times s\n\\]",
    "crumbs": [
      "DBMS",
      "Week 4"
    ]
  },
  {
    "objectID": "pages/w4.html#rename-operation",
    "href": "pages/w4.html#rename-operation",
    "title": "DBMS - Week 4",
    "section": "",
    "text": "Allows us to name, and therefore to refer to, the result of a relational-algebra expression\nAllows us to refer to a relation by more than one name\nExample:\n\\(\\rho_{X}(E)\\)\nreturns the relation \\(E\\) under the name \\(X\\)\nIf a relational-algebra expression \\(E\\) has arity \\(n\\), then \\[\n\\rho_{X(A_1, A_2, \\ldots, A_n)}(E)\n\\] returns the result of the expression \\(E\\) under the name \\(X\\), and with the attributes renamed to \\[\nA_1, A_2, \\ldots, A_n\n\\]\n\n\n\n\n\nCode\nimport pandas as pd\nfrom IPython.display import HTML\n\n# Relation r\nr = {\n    'A': ['α', 'β'],\n    'B': [1, 2]\n}\n\n# Create DataFrame for r\ndf_r = pd.DataFrame(r)\n\n# Relation r's duplicate relation s\ndf_s = pd.DataFrame(r)\n\n# Display the original DataFrame without the index\ndisplay(HTML(df_r.to_html(index=False)))\n\n\n\n\n\nA\nB\n\n\n\n\nα\n1\n\n\nβ\n2\n\n\n\n\n\n\\[\nr\n\\]\n\n\nCode\n# Cartesian product of df_r and df_s\ncartesian_product_df = pd.merge(df_r.assign(key=1), df_s.assign(key=1), on='key').drop('key', axis=1)\n\n# Rename the columns to make them unique\ncartesian_product_df.columns = ['r.A', 'r.B', 's.A','s.B']\n\n# Display the Cartesian product DataFrame without the index\ndisplay(HTML(cartesian_product_df.to_html(index=False)))\n\n\n\n\n\nr.A\nr.B\ns.A\ns.B\n\n\n\n\nα\n1\nα\n1\n\n\nα\n1\nβ\n2\n\n\nβ\n2\nα\n1\n\n\nβ\n2\nβ\n2\n\n\n\n\n\n\\[\nr \\times \\rho_{s}(r)\n\\]",
    "crumbs": [
      "DBMS",
      "Week 4"
    ]
  },
  {
    "objectID": "pages/w4.html#division-operation",
    "href": "pages/w4.html#division-operation",
    "title": "DBMS - Week 4",
    "section": "",
    "text": "The division operation is applied to two relations\n\\(R(Z) \\div S(X)\\), where \\(X\\) is a subset of \\(Z\\). Let \\(Y = Z - X\\) (hence \\(Z = X \\cup Y\\)); that is, let \\(Y\\) be the set of attributes of \\(R\\) that are not in \\(S\\)\nThe result of the division operation is a relation \\(T(Y)\\) that includes a tuple \\(t\\) if tuples \\(t_R\\) appear in \\(R\\) with \\(t_R[Y] = t\\), and with\n\n\\(t_R[X] = t_S\\) for all tuples \\(t_S\\) in \\(S\\)\n\nFor a tuple \\(t\\) to appear in the result \\(T\\) of the division operation, the values in \\(t\\) must appear in \\(R\\) with all possible combinations of values in \\(S\\)\nDivision is a derived operation, and can be expressed in terms of the basic operations of relational algebra\n\\(r \\div s \\equiv \\Pi_{R - S}(r) - \\Pi_{R - S}(r)((\\Pi_{R - S}(r) \\times s) - \\Pi_{R-S,S}(r))\\)\n\n\n\n\n\nCode\nimport pandas as pd\nfrom IPython.display import HTML\ndata1 = {\n    'Lecturer': ['Brown', 'Brown', 'Green', 'Green', 'Lewis', 'Smith'],\n    'Module': ['Compilers', 'Databases', 'Prolog', 'Databases', 'Prolog', 'Databases']\n}\n\n# Create DataFrame\ndf1 = pd.DataFrame(data1)\n\n# Display the DataFrame without the index\nHTML(df1.to_html(index=False))\n\n\n\n\n\nLecturer\nModule\n\n\n\n\nBrown\nCompilers\n\n\nBrown\nDatabases\n\n\nGreen\nProlog\n\n\nGreen\nDatabases\n\n\nLewis\nProlog\n\n\nSmith\nDatabases\n\n\n\n\n\n\\[\nR\n\\]\n\n\nCode\ndata2 = {\n    'Subject': ['Prolog']\n}\n\n# Create DataFrame\ndf2 = pd.DataFrame(data2)\n\n# Display the DataFrame without the index\nHTML(df2.to_html(index=False))\n\n\n\n\n\nSubject\n\n\n\n\nProlog\n\n\n\n\n\n\\[\nS\n\\]\n\n\nCode\n# Division operation\ndivision_df = df1.groupby('Lecturer').Module.apply(set).reset_index()\ndivision_df = division_df[division_df['Module'].apply(lambda x: df2['Subject'].values[0] in x)]\ndivision_df = division_df.drop(columns='Module')\n\n# Display the division DataFrame without the index\ndisplay(HTML(division_df.to_html(index=False)))\n\n\n\n\n\nLecturer\n\n\n\n\nGreen\n\n\nLewis\n\n\n\n\n\n\\[\nR \\mid S\n\\]",
    "crumbs": [
      "DBMS",
      "Week 4"
    ]
  }
]